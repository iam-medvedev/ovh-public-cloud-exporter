export interface paths {
    "/cloud/agreements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get agreements related to a product */
        get: {
            parameters: {
                query: {
                    /** @description Name of a product supported by cloud projects */
                    product: components["schemas"]["cloud.project.ProductNameEnum"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ProductAgreements"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/eligibility": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check your eligibility to create a Public Cloud order */
        get: {
            parameters: {
                query?: {
                    /** @description Voucher code */
                    voucher?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.EligibilityInfo"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all cloud pending orders */
        get: {
            parameters: {
                query?: {
                    /** @description Order plan code */
                    planCode?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.order.Order"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/order/rule/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product availability */
        get: {
            parameters: {
                query: {
                    /** @description Addon family filter */
                    addonFamily?: string;
                    /** @description OVH subsidiary */
                    ovhSubsidiary: components["schemas"]["nichandle.OvhSubsidiaryEnum"];
                    /** @description Plan code filter */
                    planCode?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.order.rule.Availability"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/order/rule/instanceCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get instance categories */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.order.rule.InstanceCategories"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available services */
        get: {
            parameters: {
                query?: {
                    /** @description Filter resources on IAM tags */
                    iamTags?: {
                        [key: string]: components["schemas"]["iam.resource.TagFilter"][] | undefined;
                    };
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.ProjectWithIAM"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.Project"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/acl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ACL on your cloud project */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of type property (=) */
                    type?: components["schemas"]["cloud.AclTypeEnum"];
                };
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Create new ACL */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Deleguates rights to */
                        accountId: string;
                        /** @description Acl type */
                        type: components["schemas"]["cloud.AclTypeEnum"];
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Acl"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/acl/{accountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description OVH customer unique identifier */
                    accountId: string;
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Acl"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete ACL */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description OVH customer unique identifier */
                    accountId: string;
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/activateMonthlyBilling": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Activate monthly billing on multiple instances */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectActivateMonthlyBillingCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.InstanceDetail"][];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List apps */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on app label (e.g. 'app_name=kind_of_magic') */
                    labelSelector?: string;
                    /** @description Order the result set */
                    order?: components["schemas"]["cloud.project.ai.OrderEnum"];
                    /** @description Page of the result set */
                    page?: number;
                    /** @description Size of the result set */
                    size?: number;
                    /** @description Sort the result with this field */
                    sort?: string;
                    /** @description Filter on status state */
                    statusState?: components["schemas"]["cloud.project.ai.app.AppStateEnum"][];
                    /** @description Filter on updatedAt property (>) */
                    updatedAfter?: string;
                    /** @description Filter on updatedAt property (<) */
                    updatedBefore?: string;
                    /** @description User that submit the job */
                    userName?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.app.App"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new app */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.app.AppSpecInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.app.App"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/app/command": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate an app spec corresponding CLI command */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.app.AppSpecInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.Command"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/app/{appId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get app information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description App ID */
                    appId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.app.App"];
                    };
                };
            };
        };
        /** Update several parts of an app's spec */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description App ID */
                    appId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.app.UpdateInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.app.App"];
                    };
                };
            };
        };
        post?: never;
        /** Delete an app */
        delete: {
            parameters: {
                query?: {
                    /** @description Force app deletion by killing it if at a running state */
                    force?: boolean;
                };
                header?: never;
                path: {
                    /** @description App ID */
                    appId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/app/{appId}/datasync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Starts a manual data synchronization on an app */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description App ID */
                    appId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.volume.DataSyncSpec"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.volume.DataSync"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/app/{appId}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set the Docker image of an AI app */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description App ID */
                    appId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.app.AppImageInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.GenericResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/app/{appId}/label": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update/add an AI Solutions app label */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description App ID */
                    appId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.Label"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/app/{appId}/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the logs of an app */
        get: {
            parameters: {
                query?: {
                    /** @description Page of the result set */
                    page?: number;
                    /** @description Only show logs from this replica */
                    replica?: string;
                    /** @description Size of the result set */
                    size?: number;
                };
                header?: never;
                path: {
                    /** @description App ID */
                    appId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.Logs"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/app/{appId}/scalingstrategy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Scale a App */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description App ID */
                    appId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.app.ScalingStrategyInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/app/{appId}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Start an existing AI Solutions app */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description App ID */
                    appId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/app/{appId}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Stop an AI Solutions app */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description App ID */
                    appId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get authorization status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.AuthorizationStatus"];
                    };
                };
            };
        };
        put?: never;
        /** Authorization of AI Solutions service by allowing access to your object storage containers */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/capabilities/feature": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List AI Solutions available features */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Features"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/capabilities/quota": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List AI Solutions available quotas */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.ProjectQuotas"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/capabilities/region": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Region */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Region"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/capabilities/region/{region}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Region Information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Region"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/capabilities/region/{region}/app/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List AI Solutions App images */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.app.Image"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/capabilities/region/{region}/data/region": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Available data regions Information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Flavors */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Flavor"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor/{flavorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Flavor Information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Flavor ID */
                    flavorId: string;
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Flavor"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/capabilities/region/{region}/preset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Presets */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on type of preset image */
                    type?: string;
                };
                header?: never;
                path: {
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Preset"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/capabilities/region/{region}/preset/{presetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Preset Information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Preset ID */
                    presetId: string;
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Preset"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/data/region": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Region */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Region"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/data/region/{region}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Region Information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Region"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/data/region/{region}/alias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List datastores */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.DataStore"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new datastore */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.DataStoreInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.DataStore"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Datastore Information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Alias */
                    alias: string;
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.DataStore"];
                    };
                };
            };
        };
        /** Update a datastore */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Alias */
                    alias: string;
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.DataStoreInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Permanently delete a datastore */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Alias */
                    alias: string;
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an AI datastore auth in a given region by its alias */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Alias */
                    alias: string;
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.DataStoreAuth"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/job": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List jobs */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on job label (e.g. 'job_name=potions_cooking') */
                    labelSelector?: string;
                    /** @description Order the result set */
                    order?: components["schemas"]["cloud.project.ai.OrderEnum"];
                    /** @description Page of the result set */
                    page?: number;
                    /** @description Size of the result set */
                    size?: number;
                    /** @description Sort the result with this field */
                    sort?: string;
                    /** @description Filter on status state */
                    statusState?: components["schemas"]["cloud.project.ai.job.JobStateEnum"][];
                    /** @description Filter on updatedAt property (>) */
                    updatedAfter?: string;
                    /** @description Filter on updatedAt property (<) */
                    updatedBefore?: string;
                    /** @description User that submit the job */
                    userName?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.job.Job"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new job */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.job.JobSpecInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.job.Job"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/job/capabilities/presetImage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List AI Solutions Preset Model Images (deprecated) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.job.PresetImage"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/job/command": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate a job spec corresponding CLI command */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.job.JobSpecInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.Command"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/job/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get job information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.job.Job"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Permanently delete a job */
        delete: {
            parameters: {
                query?: {
                    /** @description Force job deletion by killing it if at a running state */
                    force?: boolean;
                };
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/job/{jobId}/datasync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Starts a manual data synchronization on an AI Solutions job */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.volume.DataSyncSpec"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.volume.DataSync"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/job/{jobId}/kill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Kill a AI Solutions job */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/job/{jobId}/label": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update/add an AI Solutions job label */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.Label"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/job/{jobId}/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the logs of a job */
        get: {
            parameters: {
                query?: {
                    /** @description Page of the result set */
                    page?: number;
                    /** @description Size of the result set */
                    size?: number;
                };
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.Logs"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List notebooks */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on notebook label (e.g. 'notebook_name=spell_book') */
                    labelSelector?: string;
                    /** @description Order the result set */
                    order?: components["schemas"]["cloud.project.ai.OrderEnum"];
                    /** @description Page of the result set */
                    page?: number;
                    /** @description Size of the result set */
                    size?: number;
                    /** @description Sort the result with this field */
                    sort?: string;
                    /** @description Filter on status state */
                    statusState?: components["schemas"]["cloud.project.ai.notebook.NotebookStateEnum"][];
                    /** @description Filter on updatedAt property (>) */
                    updatedAfter?: string;
                    /** @description Filter on updatedAt property (<) */
                    updatedBefore?: string;
                    /** @description User that submit the job */
                    userName?: string;
                    /** @description Whether or not to include spark notebooks in search results */
                    withSpark?: boolean;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.notebook.Notebook"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new notebook */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.notebook.NotebookSpecInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.notebook.Notebook"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/capabilities/editor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List AI Solutions Notebook available code editors */
        get: {
            parameters: {
                query?: {
                    /** @description Only list editors compatible with this framework */
                    compatibleWithFramework?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.notebook.Editor"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/capabilities/framework": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List AI Solutions Notebook available frameworks */
        get: {
            parameters: {
                query?: {
                    /** @description Only list frameworks compatible with this editor */
                    compatibleWithEditor?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.notebook.Framework"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/command": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate a notebook spec corresponding CLI command */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.notebook.NotebookSpecInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.Command"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/{notebookId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get notebook information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.notebook.Notebook"];
                    };
                };
            };
        };
        /** Update an existing notebook. Only labels update can be done while notebook is running. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.notebook.NotebookUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a notebook */
        delete: {
            parameters: {
                query?: {
                    /** @description Force notebook deletion by killing it if at a running state */
                    force?: boolean;
                };
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all backups of an AI Solutions notebook */
        get: {
            parameters: {
                query?: {
                    /** @description Order the result set */
                    order?: components["schemas"]["cloud.project.ai.OrderEnum"];
                    /** @description Page of the result set */
                    page?: number;
                    /** @description Size of the result set */
                    size?: number;
                    /** @description Sort the result with this field */
                    sort?: string;
                    /** @description Filter on updatedAt property (>) */
                    updatedAfter?: string;
                    /** @description Filter on updatedAt property (<) */
                    updatedBefore?: string;
                };
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.notebook.Backup"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details for a single AI Solutions notebook backup */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.notebook.Backup"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}/fork": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Starts a new AI Solutions notebook from a backup */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.notebook.Notebook"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/{notebookId}/datasync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Starts a manual data synchronization on an AI Solutions notebook */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.volume.DataSyncSpec"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.volume.DataSync"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/{notebookId}/label": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update/add an AI Solutions notebook label */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.Label"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/{notebookId}/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the logs of a notebook */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.Logs"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/{notebookId}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Start an AI Solutions notebook */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/notebook/{notebookId}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Stop an AI Solutions notebook */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/partners/region": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Region */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Region"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/partners/region/{region}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Region Information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.capabilities.Region"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/partners/region/{region}/partner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List partners and contracts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.partner.Partner"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/partners/region/{region}/partner/{partnerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get partner and contract */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Partner ID */
                    partnerId: string;
                    /** @description Region */
                    region: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.partner.Partner"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/registry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Docker registries */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.registry.Registry"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a Docker registry */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.registry.Registry"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.registry.Registry"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/registry/{registryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about a Docker registry */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Registry ID */
                    registryId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.registry.Registry"];
                    };
                };
            };
        };
        /** Update a Docker registry */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Registry ID */
                    registryId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.registry.RegistryUpdateInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a Docker registry */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Registry ID */
                    registryId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List application tokens */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.token.Token"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new application token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.ai.token.TokenSpec"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.token.Token"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/token/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get application token information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.token.Token"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete this application token */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ai/token/{id}/renew": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Renew an application token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ai.token.Token"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/alerting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Manage alerts on your consumption */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Add new alert */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Delay between alerts in seconds */
                        delay: components["schemas"]["cloud.AlertingDelayEnum"];
                        /** @description Email to contact */
                        email: string;
                        /** @description Monthly threshold for this alerting in currency */
                        monthlyThreshold: number;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Alerting"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/alerting/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Alerting unique UUID */
                    id: string;
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Alerting"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Alerting unique UUID */
                    id: string;
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.Alerting"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete alerting */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Alerting unique UUID */
                    id: string;
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/alerting/{id}/alert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** See alerts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Alerting unique UUID */
                    id: string;
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/alerting/{id}/alert/{alertId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Alert id */
                    alertId: number;
                    /** @description Alerting unique UUID */
                    id: string;
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.AlertingAlert"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/bill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get your project bills */
        get: {
            parameters: {
                query: {
                    /** @description Get bills from */
                    from: string;
                    /** @description Get bills to */
                    to: string;
                };
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.Bill"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel project creation */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/capabilities/containerRegistry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List container registry capabilities per region */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.Capability"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/capabilities/kube/admissionplugins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of admissionPlugins managed by MKS product that can be enabled or disabled. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.ProjectKubeCustomizationAPIServerAdmissionPluginsEnum"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/capabilities/kube/flavors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Kubernetes available flavors for a region */
        get: {
            parameters: {
                query?: {
                    /** @description The region to list available flavors from. Example: GRA11. */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.Flavor"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/capabilities/kube/log/kind": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available log kinds */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/capabilities/kube/log/kind/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a log kind */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogKind"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/capabilities/kube/regions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Kubernetes regions where cluster creation is possible. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/capabilities/loadbalancer/region": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all available regions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/capabilities/loadbalancer/region/{regionName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get specific information of a region */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.loadbalancer.Region"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/capabilities/productAvailability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List product availability */
        get: {
            parameters: {
                query: {
                    /** @description Addon family filter */
                    addonFamily?: string;
                    /** @description OVH subsidiary */
                    ovhSubsidiary: components["schemas"]["nichandle.OvhSubsidiaryEnum"];
                    /** @description Plan code filter */
                    planCode?: string;
                    /** @description Plan family filter (deprecated, use addonFamily instead) */
                    planFamily?: string;
                    /** @description Product filter */
                    product?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.capabilities.Availability"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/changeContact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Launch a contact change procedure */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The contact to set as admin contact */
                        contactAdmin?: string;
                        /** @description The contact to set as billing contact */
                        contactBilling?: string;
                        /** @description The contact to set as tech contact */
                        contactTech?: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/confirmTermination": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm service termination */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Commentary about your termination request */
                        commentary?: string;
                        /** @description What next after your termination request */
                        futureUse?: components["schemas"]["service.TerminationFutureUseEnum"];
                        /** @description Reason of your termination request */
                        reason?: components["schemas"]["service.TerminationReasonEnum"];
                        /** @description The termination token sent by email to the admin contact */
                        token: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/consumption": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get your project consumption */
        get: {
            parameters: {
                query: {
                    /** @description Get usage from */
                    from: string;
                    /** @description Get usage to */
                    to: string;
                };
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.ProjectUsage"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/containerRegistry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List registries of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.Registry"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new registry */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectContainerRegistryCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.Registry"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/containerRegistry/{registryID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the registry information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.Registry"];
                    };
                };
            };
        };
        /** Update the registry */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectContainerRegistryUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a registry */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/containerRegistry/{registryID}/capabilities/plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available plans for the current registry. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.Plan"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/management": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your IP restrictions applied on Harbor UI and API */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.IPRestrictions"][];
                    };
                };
            };
        };
        /** Replace IP restrictions applied on Harbor UI and API */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.containerRegistry.IPRestrictions"][];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.IPRestrictions"][];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/registry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your IP restrictions applied on artifact manager component */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.IPRestrictions"][];
                    };
                };
            };
        };
        /** Replace IP restrictions applied on artifact manager component (Docker, Helm, etc...) */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.containerRegistry.IPRestrictions"][];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.IPRestrictions"][];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the registry's OIDC configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.OIDCConfiguration"];
                    };
                };
            };
        };
        /** Edit the registry's OIDC configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.containerRegistry.OIDCPut"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Add or replace the registry's OIDC configuration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.containerRegistry.OIDCPost"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Delete the registry's OIDC Configuration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/containerRegistry/{registryID}/plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show the actual plan of the registry. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.Plan"];
                    };
                };
            };
        };
        /** Update the plan of a registry. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.containerRegistry.PlanUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/containerRegistry/{registryID}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List registry user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.User"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new registry user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectContainerRegistryUsersCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.User"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get registry user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description UserID */
                    userID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.containerRegistry.User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a registry user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description UserID */
                    userID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}/setAsAdmin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set the user as Admin */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description RegistryID */
                    registryID: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description UserID */
                    userID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/credit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get your credit */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Add credit to your project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Voucher code */
                        code: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/credit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Credit id */
                    id: number;
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Credit"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/dataProcessing/authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get authorization status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.dataProcessing.AuthorizationStatus"];
                    };
                };
            };
        };
        put?: never;
        /** Authorization of Data Processing service by allowing access to your object storage containers */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/dataProcessing/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Data processing capabilities */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.dataProcessing.Capability"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/dataProcessing/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all jobs */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Submit a job */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.dataProcessing.Job"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.dataProcessing.Job"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/dataProcessing/jobs/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get jobs information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.dataProcessing.Job"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Kill job with given id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/dataProcessing/jobs/{jobId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the logs of a job */
        get: {
            parameters: {
                query?: {
                    /** @description From how long ago we want logs. Example: from=now-2h. Or since when we want the logs. Example: 2019-10-28T12:00:00.000 (must be UTC). */
                    from?: string;
                };
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.dataProcessing.JobLogs"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/dataProcessing/notebooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all notebooks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Create a notebook */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.dataProcessing.notebook.NotebookSpec"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.dataProcessing.notebook.Notebook"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/dataProcessing/notebooks/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get notebooks capabilities */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.dataProcessing.notebook.Capability"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get notebook information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.dataProcessing.notebook.Notebook"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete notebook with given id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Start a Data Processing notebook */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Stop a Data Processing notebook */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Notebook ID */
                    notebookId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get database engines availability */
        get: {
            parameters: {
                query?: {
                    /** @description Type of action on which restrict the availabilities */
                    action?: components["schemas"]["cloud.project.database.availability.ActionEnum"];
                    /** @description Cluster ID on which restrict the availabilities */
                    clusterId?: string;
                    /** @description Type of target on which restrict the availabilities */
                    target?: components["schemas"]["cloud.project.database.availability.TargetEnum"];
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Availability"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get database engines capabilities */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Capabilities"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the cassandra clusters of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new cassandra cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cassandra cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing cassandra cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a cassandra cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cassandra advanced configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update cassandra advanced configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List backups of the cassandra */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/backup/{backupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cassandra backups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Backup"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cassandra advanced configuration fields */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.advancedConfiguration.Property"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the cassandra service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the certificates of the cassandra cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Certificates"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cassandra ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add ip restrictions to the cassandra
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestrictionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cassandra ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Changes the list of ip restrictions to the cassandra
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes the given IP from the restricted IPs of the cassandra
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a cassandra */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent cassandra log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the cassandra cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the cassandra cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the cassandra cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the cassandra cluster */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the cassandra */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cassandra nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users of the cassandra */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new user on the cassandra cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.UserCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cassandra users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a cassandra user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}/credentials/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the password of a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the grafana of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new grafana cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get grafana cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing grafana cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a grafana cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get grafana advanced configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update grafana advanced configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List backups of the grafana */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/backup/{backupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get grafana backups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Backup"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get grafana advanced configuration fields */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.advancedConfiguration.Property"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the grafana service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List grafana ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add ip restrictions to the grafana
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestrictionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get grafana ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Changes the list of ip restrictions to the grafana
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes the given IP from the restricted IPs of the grafana
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a grafana */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent grafana log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the grafana cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the grafana cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the grafana cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the grafana cluster */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the grafana */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get grafana nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users of the grafana */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get grafana users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}/credentials/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the password of a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the kafka of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new kafka cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafka cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing kafka cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.kafka.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a kafka cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/acl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List acls of the kafka
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new acl on the kafka cluster
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.kafka.TopicAcl"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.TopicAcl"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/acl/{aclId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get kafka acls
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Acl ID */
                    aclId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.TopicAcl"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a kafka acl
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Acl ID */
                    aclId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafka advanced configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update kafka advanced configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafka advanced configuration fields */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.advancedConfiguration.Property"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the kafka service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the certificates of the kafka cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Certificates"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List kafka ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add ip restrictions to the kafka
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestrictionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get kafka ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Changes the list of ip restrictions to the kafka
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes the given IP from the restricted IPs of the kafka
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a kafka */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent kafka log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the kafka cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the kafka cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the kafka cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the kafka cluster */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the kafka */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafka nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the permissions available on the cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.Permissions"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List schema registry acls of the kafka */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new schema registry acl on the kafka cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.kafka.SchemaRegistryAcl"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.SchemaRegistryAcl"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl/{aclId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafka schema registry acls */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Acl ID */
                    aclId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.SchemaRegistryAcl"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a kafka schema registry acl */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Acl ID */
                    aclId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/topic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List topics of the kafka */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new topic on the kafka cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.kafka.TopicCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.Topic"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafka topics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Topic ID */
                    topicId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.Topic"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Updates the topic on the kafka cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Topic ID */
                    topicId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.kafka.Topic"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.Topic"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a kafka topic */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Topic ID */
                    topicId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List topic acls of the kafka */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new topic acl on the kafka cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.kafka.TopicAcl"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.TopicAcl"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl/{aclId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafka topic acls */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Acl ID */
                    aclId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.TopicAcl"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a kafka topic acl */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Acl ID */
                    aclId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users of the kafka */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new user on the kafka cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.UserCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafka users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a kafka user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the user acces for the cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafka.user.Access"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/credentials/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the password of a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the kafkaConnect of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new kafkaConnect cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafkaConnect cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing kafkaConnect cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a kafkaConnect cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafkaConnect advanced configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update kafkaConnect advanced configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafkaConnect advanced configuration fields */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.advancedConfiguration.Property"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Kafka Connect connectors */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Kafka Connect connector capability */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafkaConnect.capabilities.Connector"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}/configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Kafka Connect connector configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafkaConnect.capabilities.connector.configuration.Property"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}/transforms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Kafka Connect connector transforms */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafkaConnect.capabilities.connector.Transform"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the kafkaConnect service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List the connectors */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new connector */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.kafkaConnect.ConnectorCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafkaConnect.Connector"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get connector */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafkaConnect.Connector"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update a connector */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.kafkaConnect.Connector"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafkaConnect.Connector"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a connector */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pause the kafka connector execution */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/restart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restart the kafka connector execution */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resume the kafka connector execution */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List the connector tasks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get connector task */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Task ID */
                    taskId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.kafkaConnect.connector.Task"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task/{taskId}/restart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restart the kafka connector task execution */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connector ID */
                    connectorId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Task ID */
                    taskId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List kafkaConnect ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add ip restrictions to the kafkaConnect
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestrictionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get kafkaConnect ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Changes the list of ip restrictions to the kafkaConnect
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes the given IP from the restricted IPs of the kafkaConnect
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a kafkaConnect */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent kafkaConnect log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the kafka connect cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the kafka connect cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the kafkaConnect cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the kafkaConnect cluster */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the kafkaConnect */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafkaConnect nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users of the kafkaConnect */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new user on the kafkaConnect cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.UserCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafkaConnect users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a kafkaConnect user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}/credentials/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the password of a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the kafkaMirrorMaker of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new kafkaMirrorMaker */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafkaMirrorMaker properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing kafkaMirrorMaker */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a kafkaMirrorMaker */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the kafkaMirrorMaker service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a kafkaMirrorMaker */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent kafkaMirrorMaker log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the kafka mirror maker cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the kafka mirror maker cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the kafkaMirrorMaker */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the kafkaMirrorMaker */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the kafkaMirrorMaker */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafkaMirrorMaker nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List replication of the kafkaMirrorMaker */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new replication */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.ReplicationCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Replication"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get kafkaMirrorMaker replication */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Replication ID */
                    replicationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Replication"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Updates a replication */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Replication ID */
                    replicationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Replication"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Replication"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete an replication */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Replication ID */
                    replicationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the m3aggregator of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new m3aggregator */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get m3aggregator properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing m3aggregator */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a m3aggregator */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the m3aggregator service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a m3aggregator */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent m3aggregator log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the m3aggregator cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the m3aggregator cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the m3aggregator */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the m3aggregator */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the m3aggregator */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get m3aggregator nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the m3db clusters of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new m3db cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get m3db cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing m3db cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a m3db cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get m3db advanced configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update m3db advanced configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List backups of the m3db */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/backup/{backupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get m3db backups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Backup"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get m3db advanced configuration fields */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.advancedConfiguration.Property"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the m3db service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List m3db ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add ip restrictions to the m3db
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestrictionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get m3db ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Changes the list of ip restrictions to the m3db
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes the given IP from the restricted IPs of the m3db
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a m3db */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent m3db log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the m3db cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the m3db cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the m3db cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the m3db cluster */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List namespaces of the m3db */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new namespace on the m3db cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.m3db.NamespaceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.m3db.Namespace"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get m3db namespaces */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Namespace ID */
                    namespaceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.m3db.Namespace"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Updates the namespace on the m3db cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Namespace ID */
                    namespaceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.m3db.Namespace"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.m3db.Namespace"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete m3db namespace */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Namespace ID */
                    namespaceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the m3db */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get m3db nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users of the m3db */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new user on the m3db cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.m3db.UserCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.m3db.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get m3db users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.m3db.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Updates the user on the m3db cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.m3db.User"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.m3db.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete m3db user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}/credentials/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the password of a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.m3db.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List mongodbs of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new mongodb cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mongodb cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing mongodb cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a mongodb cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List backups of the mongodb */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mongodb backups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Backup"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore the backup */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Backup"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List mongodb ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add ip restrictions to the mongodb
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestrictionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get mongodb ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Changes the list of ip restrictions to the mongodb
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes the given IP from the restricted IPs of the mongodb
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a mongodb */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent mongoDB log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the mongodb cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the mongodb cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the mongodb cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the mongodb cluster */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the mongodb */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new node on the mongodb cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.NodeCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mongodb nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Modify mongodb nodes */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Node"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a mongodb cluster's node */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate a restore */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Restore"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mongodb roles */
        get: {
            parameters: {
                query?: {
                    /** @description Adds the advanced roles to the list of the roles */
                    advanced?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users of the mongodb */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new user on the mongodb cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.UserWithRolesCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPasswordAndRoles"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mongodb users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithRoles"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Updates the user on the mongodb cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.UserWithPasswordAndRoles"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithRoles"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a mongodb user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}/credentials/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the password of a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPasswordAndRoles"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the mysql of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new mysql cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mysql cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing mysql cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a mysql cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mysql advanced configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update mysql advanced configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List backups of the mysql */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/backup/{backupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mysql backups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Backup"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mysql advanced configuration fields */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.advancedConfiguration.Property"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the mysql service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the certificates of the mysql cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Certificates"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the current queries for the cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Limit size of the result set returned by the pagination */
                    limit?: number;
                    /** @description Offset of the result set returned by the pagination */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.CurrentQueries"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel the given current query of the cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.currentqueries.query.CancelRequest"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.currentqueries.query.CancelResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/database": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new database on the mysql cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Database"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Database"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/database/{databaseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the database for the mysql cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Database ID */
                    databaseId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Database"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a mysql database */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Database ID */
                    databaseId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/enableWrites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable temporary write permission on readonly lock mysql service */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.TemporaryWriteDeadline"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List mysql ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add ip restrictions to the mysql
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestrictionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get mysql ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Changes the list of ip restrictions to the mysql
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes the given IP from the restricted IPs of the mysql
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a mysql */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent mysql log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the mysql cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the mysql cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the mysql cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the mysql cluster */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the mysql */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mysql nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the query statistics for the cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Limit size of the result set returned by the pagination */
                    limit?: number;
                    /** @description Offset of the result set returned by the pagination */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.mysql.QueryStatistics"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset the query statistics of the cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users of the mysql */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new user on the mysql cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.UserCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mysql users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a mysql user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}/credentials/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the password of a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the opensearch of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new opensearch cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get opensearch cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.opensearch.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing opensearch cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.opensearch.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.opensearch.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a opensearch cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get opensearch advanced configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update opensearch advanced configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List backups of the opensearch */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/backup/{backupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get opensearch backups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Backup"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get opensearch advanced configuration fields */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.advancedConfiguration.Property"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the opensearch service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/index": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List indexes of the opensearch */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/index/{indexId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get opensearch index */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Index ID */
                    indexId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.opensearch.Index"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an opensearch index */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Index ID */
                    indexId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List opensearch ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add ip restrictions to the opensearch
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestrictionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get opensearch ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Changes the list of ip restrictions to the opensearch
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes the given IP from the restricted IPs of the opensearch
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a opensearch */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent opensearch log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the opensearch cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the opensearch cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the opensearch cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the opensearch cluster */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the opensearch */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get opensearch nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List patterns of the opensearch */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new pattern on the opensearch cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.opensearch.Pattern"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.opensearch.Pattern"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern/{patternId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get opensearch patterns */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Pattern ID */
                    patternId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.opensearch.Pattern"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an opensearch pattern */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Pattern ID */
                    patternId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the opensearch permissions values */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.opensearch.Permissions"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users of the opensearch */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new user on the opensearch cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.opensearch.UserCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.opensearch.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get opensearch users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.opensearch.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update a user on the opensearch cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.opensearch.User"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.opensearch.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a opensearch user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}/credentials/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the password of a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.opensearch.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the postgresql of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new postgresql cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get postgresql cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing postgresql cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a postgresql cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get postgresql advanced configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update postgresql advanced configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List backups of the postgresql */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/backup/{backupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get postgresql backups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Backup"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get postgresql advanced configuration fields */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.advancedConfiguration.Property"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the postgresql service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the certificates of the postgresql cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Certificates"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new connectionPool on the postgresql cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.postgresql.ConnectionPoolCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.postgresql.ConnectionPool"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the connectionPool for the postgresql cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connection pool ID */
                    connectionPoolId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.postgresql.ConnectionPool"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update a connectionPool on the postgresql cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connection pool ID */
                    connectionPoolId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.postgresql.ConnectionPool"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.postgresql.ConnectionPool"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a postgresql connectionPool */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Connection pool ID */
                    connectionPoolId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the current queries for the cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Limit size of the result set returned by the pagination */
                    limit?: number;
                    /** @description Offset of the result set returned by the pagination */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.CurrentQueries"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel the given current query of the cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.currentqueries.query.CancelRequest"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.currentqueries.query.CancelResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/database": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new database on the postgresql cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Database"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Database"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/database/{databaseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the database for the postgresql cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Database ID */
                    databaseId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Database"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a postgresql database */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Database ID */
                    databaseId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/enableWrites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable temporary write permission on readonly lock postgresql service */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.TemporaryWriteDeadline"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List postgresql ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add ip restrictions to the postgresql
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestrictionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get postgresql ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Changes the list of ip restrictions to the postgresql
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes the given IP from the restricted IPs of the postgresql
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a postgresql */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent postgresql log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the postgresql cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the postgresql cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the postgresql cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the postgresql cluster */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the postgresql */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get postgresql nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the query statistics for the cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Limit size of the result set returned by the pagination */
                    limit?: number;
                    /** @description Offset of the result set returned by the pagination */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.postgresql.QueryStatistics"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset the query statistics of the cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get postgresql roles */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users of the postgresql */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new user on the postgresql cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.UserWithRolesCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPasswordAndRoles"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get postgresql users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithRoles"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Updates the user on the postgresql cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.UserWithRoles"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithRoles"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a postgresql user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}/credentials/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the password of a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.UserWithPasswordAndRoles"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the redis of the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new redis cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.ServiceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get redis cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update an existing redis cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a redis cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get redis advanced configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update redis advanced configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List backups of the redis */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/backup/{backupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get redis backups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup ID */
                    backupId: string;
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Backup"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/advancedConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get redis advanced configuration fields */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.advancedConfiguration.Property"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available categories in the redis service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/commands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available commands in the redis service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration capabilities related to the redis service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.capabilities.Integration"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/integration/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an integration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Integration"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Integration ID */
                    integrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List redis ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add ip restrictions to the redis
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestrictionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get redis ip restrictions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Changes the list of ip restrictions to the redis
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.IpRestriction"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes the given IP from the restricted IPs of the redis
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Ip block */
                    ipBlock: components["schemas"]["ipBlock"];
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create subscription to log to customer for a redis */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the most recent redis log messages (limited to 1000) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.LogEntry"][];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List maintenances for the redis cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the maintenance for the redis cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply the maintenance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Maintenance ID */
                    maintenanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Maintenance"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/metric": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for the redis cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Display DB specific metrics */
                    extended?: boolean;
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/metric/{metricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the metric values for the redis cluster */
        get: {
            parameters: {
                query: {
                    /** @description The period of time to query metrics for */
                    period: components["schemas"]["cloud.project.database.service.MetricPeriodEnum"];
                };
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Metric name */
                    metricName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Metric"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List nodes of the redis */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get redis nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.service.Node"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users of the redis */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new user on the redis cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.redis.UserCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.redis.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get redis users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.redis.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        /** Update a user on the redis cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.database.redis.User"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.redis.User"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** Delete a redis user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}/credentials/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the password of a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.redis.UserWithPassword"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/service": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List database services of the project */
        get: {
            parameters: {
                query?: {
                    /** @description Category on which restrict the search on services */
                    category?: components["schemas"]["cloud.project.database.engine.CategoryEnum"];
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/database/service/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get service cluster properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cluster ID */
                    clusterId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.database.Service"];
                    };
                };
                /** @description Error 400 response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 401 response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 404 response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
                /** @description Error 409 response */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Class of the error */
                            class?: string;
                            /** @description Error message */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/flavor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get flavors */
        get: {
            parameters: {
                query?: {
                    /** @description Flavor region */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.flavor.Flavor"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/flavor/{flavorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get flavor */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Flavor ID */
                    flavorId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.flavor.Flavor"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get images */
        get: {
            parameters: {
                query?: {
                    /** @description Get compatible images with flavor type */
                    flavorType?: string;
                    /** @description Image OS */
                    osType?: components["schemas"]["cloud.image.OSTypeEnum"];
                    /** @description Image region */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.image.Image"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/image/{imageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get image */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Image ID */
                    imageId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.image.Image"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get instance */
        get: {
            parameters: {
                query?: {
                    /** @description Instance region */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.Instance"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectInstanceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.InstanceDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create multiple instances */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectInstanceBulkCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.Instance"][];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the detail of a group */
        get: {
            parameters: {
                query?: {
                    /** @description Instance region */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instancegroup.InstanceGroup"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a group */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectInstanceGroupCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instancegroup.InstanceGroup"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/group/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all groups */
        get: {
            parameters: {
                query?: {
                    /** @description Instance region */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Group ID */
                    groupId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instancegroup.InstanceGroup"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a group */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group ID */
                    groupId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get instance */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.InstanceDetail"];
                    };
                };
            };
        };
        /** Alter an instance */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectInstanceUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete an instance */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/activeMonthlyBilling": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Activate monthly billing on instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.InstanceDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/applicationAccess": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return initial credentials of applications installed from public image */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.ApplicationAccess"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/interface": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get interfaces */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instanceInterface.Interface"][];
                    };
                };
            };
        };
        put?: never;
        /** Create interface on an instance and attached it to a network */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectInstanceInterfaceCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instanceInterface.Interface"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get interface */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Interface ID */
                    interfaceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instanceInterface.Interface"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an interface */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Interface ID */
                    interfaceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/monitoring": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return many statistics about the virtual machine for a given period */
        get: {
            parameters: {
                query: {
                    /** @description The period the statistics are fetched for */
                    period: components["schemas"]["cloud.instance.MetricsPeriodEnum"];
                    /** @description The type of statistic to be fetched */
                    type: components["schemas"]["cloud.instance.MetricsTypeEnum"];
                };
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.InstanceMetrics"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/reboot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reboot an instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectInstanceRebootCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/reinstall": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reinstall an instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectInstanceReinstallCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.InstanceDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/rescueMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable or disable rescue mode */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectInstanceRescueModeCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.RescueAdminPassword"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/resize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Migrate your instance to another flavor */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectInstanceResizeCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.InstanceDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resume a suspended instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/shelve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shelve an instance
         * @description Shelve an instance. The resources dedicated to the Public Cloud instance are released. The data of the local storage will be stored, the duration of the operation depends on the size of the local disk. The instance can be unshelved at any time. Meanwhile hourly instances will not be billed. The Snapshot Storage used to store the instance's data will be billed.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Snapshot an instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectInstanceSnapshotCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start an instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop an instance
         * @description Stop an instance. The resources dedicated to the Public Cloud instances are still reserved. The instance can be restarted at any time. Meanwhile, the same price is charged for the instance.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/unshelve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unshelve an instance
         * @description Unshelve an instance. The resources dedicated to the Public Cloud instance are restored. The duration of the operation depends on the size of the local disk. Instance billing will get back to normal and the snapshot used to store the instance's data will be deleted.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/instance/{instanceId}/vnc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get VNC access to your instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.instance.InstanceVnc"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/capabilities/stream/region": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all available regions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/capabilities/stream/region/{regionName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connection information from a region
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.io.stream.Region"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all stream for a tenant
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a stream
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.io.StreamCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.io.Stream"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/stream/{streamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a stream
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.io.Stream"];
                    };
                };
            };
        };
        /**
         * Update a stream
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.io.Stream"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.io.Stream"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a stream
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/stream/{streamId}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve statistics of the stream
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.io.StreamStats"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/stream/{streamId}/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all subscriptions for a stream
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new subscription
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.io.stream.SubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.io.stream.Subscription"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a subscription
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.io.stream.Subscription"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a subscription
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/resetCursor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset a cursor
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve statistics of the subscription
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.io.stream.SubscriptionStats"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/stream/{streamId}/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all tokens for a stream
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a token
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.project.io.stream.TokenCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.io.stream.Token"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/io/stream/{streamId}/token/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get token
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                    /** @description Token ID */
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.io.stream.Token"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a token
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stream ID */
                    streamId: string;
                    /** @description Token ID */
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ips */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.ip.CloudIp"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ip/failover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get failover ips */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.ip.FailoverIp"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ip/failover/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get failover ip */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.ip.FailoverIp"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/ip/failover/{id}/attach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Attach failover ip to an instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectIpFailoverAttachCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.ip.FailoverIp"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your managed Kubernetes clusters */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Create a new managed Kubernetes cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.Cluster"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/regions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Kubernetes available regions
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about your managed Kubernetes cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.Cluster"];
                    };
                };
            };
        };
        /** Update information about your managed Kubernetes cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete your managed Kubernetes cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/auditLogs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate a temporary URL to retrieve audit logs
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.TemporaryLogsLink"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/auditLogs/forward": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Forward the cluster audit logs to a pre-existing LDP stream
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["dbaas.logs.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/customization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cluster customization */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.ProjectKubeCustomization"];
                    };
                };
            };
        };
        /** Update cluster customization */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeCustomization"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.ResponseMessage"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/flavors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all flavors available */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.Flavor"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your ip restrictions on your cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
            };
        };
        /** Remove the current list and add a list of ip restrictions on your cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeIpRestrictionUpsert"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
            };
        };
        /** Append a list of ip restrictions on your cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeIpRestrictionUpsert"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ipBlock"][];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions/{ip}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete an ip restriction from your cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ip */
                    ip: components["schemas"]["ipBlock"];
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/kubeconfig": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate kubeconfig file */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.Kubeconfig"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/kubeconfig/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset kubeconfig: Certificates will be regenerated, nodes will be reinstalled */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Create a subscription from logs to a pre-existing LDP stream */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["dbaas.logs.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/log/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate a temporary URL to retrieve logs */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["dbaas.logs.LogUrlCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.TemporaryLogsLink"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/metrics/etcdUsage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available metrics for this cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.EtcdUsage"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/node": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your nodes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.Node"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/node/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information on a specific node on your cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.Node"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a specific node on your cluster
         * @description Delete a specific node on your cluster. This will also decrease by one the desirednodes value of its nodepool.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Node ID */
                    nodeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/nodepool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your nodepools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.NodePool"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a nodepool on your cluster */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeNodePoolCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.NodePool"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information on a specific nodepool on your cluster */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Node pool ID */
                    nodePoolId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.NodePool"];
                    };
                };
            };
        };
        /** Update your nodepool information */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Node pool ID */
                    nodePoolId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeNodePoolUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a nodepool from your cluster */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Node pool ID */
                    nodePoolId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all nodes contained in a nodepool */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Node pool ID */
                    nodePoolId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.Node"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/openIdConnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get openIdConnect integration parameters */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.OpenIdConnect"];
                    };
                };
            };
        };
        /** Update parameters and reconfigure APIServer */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeOpenIdConnectUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Configure APIServer for OpenIdConnect */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeOpenIdConnectCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.OpenIdConnect"];
                    };
                };
            };
        };
        /** Remove OpenIdConnect integration from APIServer */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/privateNetworkConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get private network configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.PrivateNetworkConfiguration"];
                    };
                };
            };
        };
        /** Update private network configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.kube.PrivateNetworkConfiguration"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.kube.ResponseMessage"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset cluster: all Kubernetes data will be erased (pods, services, configuration, etc), nodes will be either deleted or reinstalled */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeResetCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/restart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restarting your control plane apiserver to invalidate cache without downtime (using force will create a slight downtime) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeRestart"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Force cluster and node update to the latest patch within minor version or next minor version */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeUpdateCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/updateLoadBalancersSubnetId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the load balancers subnet ID */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeUpdateLoadBalancersSubnetId"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/kube/{kubeId}/updatePolicy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Change the update policy of your cluster */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Kube ID */
                    kubeId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectKubeUpdatePolicyUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/lab": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available public cloud labs */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Lab"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/lab/{labId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of a public cloud lab */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Lab ID */
                    labId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Lab"];
                    };
                };
            };
        };
        put?: never;
        /** Activate a lab on your Cloud Project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Lab ID */
                    labId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/lab/{labId}/agreement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List required agreements to active this lab */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Lab ID */
                    labId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.LabAgreements"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/loadbalancer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all load balancer for a tenant */
        get: operations["listLoadBalancers"];
        put?: never;
        /** Create a load balancer */
        post: operations["createLoadBalancer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a load balancer */
        get: operations["getLoadBalancer"];
        /** Update a load balancer */
        put: operations["updateLoadBalancer"];
        post?: never;
        /** Delete a load balancer */
        delete: operations["deleteLoadBalancer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all versions of the configuration */
        get: operations["listLoadBalancerConfigurations"];
        put?: never;
        /** Create a configuration */
        post: operations["createLoadBalancerConfiguration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a configuration */
        get: operations["getLoadBalancerConfiguration"];
        put?: never;
        post?: never;
        /** Delete a configuration */
        delete: operations["deleteLoadBalancerConfiguration"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply a configuration */
        post: operations["applyLoadBalancerConfiguration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/migration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get planned migrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.migration.Migration"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/migration/{migrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get planned migration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Migration ID */
                    migrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.migration.Migration"];
                    };
                };
            };
        };
        /** Update planned migration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Migration ID */
                    migrationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectMigrationUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.migration.Migration"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/network/private": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get private networks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Network"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new network */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectNetworkPrivateCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Network"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/network/private/{networkId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get private network */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Network"];
                    };
                };
            };
        };
        /** Rename private network */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectNetworkPrivateUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete private network */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/network/private/{networkId}/region": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Activate private network in a new region */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectNetworkPrivateRegionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Network"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/network/private/{networkId}/subnet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get network subnets */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Subnet"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new network subnet */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectNetworkPrivateSubnetCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Subnet"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/network/private/{networkId}/subnet/{subnetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a network subnet */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subnet ID */
                    subnetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/network/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get public networks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Network"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/operation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your operations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/operation/{operationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about one operation */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Operation ID */
                    operationId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/quota": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List quotas */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.quota.Quotas"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your regions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Request access to a region */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectRegionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Region"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about your region */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Region"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/coldArchive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cold archive containers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.ColdArchiveContainer"][];
                    };
                };
            };
        };
        put?: never;
        /** Create S3 cold archive container */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.StorageContainerCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.ColdArchiveContainer"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get S3 cold archive container */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects in the result */
                    limit?: number;
                    /** @description Constrains the list to objects whose names are greater than the marker */
                    marker?: string;
                    /** @description Filter objects by name prefix */
                    prefix?: string;
                };
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.ColdArchiveContainer"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete S3 cold archive container */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start archiving of container */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.storage.ArchiveColdArchiveContainer"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/destroy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start cleaning tape date of archived container */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/object/{objectKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete S3 cold archive container object */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Object key */
                    objectKey: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/policy/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add S3 cold archive container policy */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.storage.AddContainerPolicy"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/presign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate presigned URLs to download or upload objects */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.storage.PresignedURLInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.storage.PresignedURL"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start restoring of container */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/floatingip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get floating ips */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.FloatingIp"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a floating ip */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Floating ip ID */
                    floatingIpId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.FloatingIp"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a floating ip */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Floating ip ID */
                    floatingIpId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}/detach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Detach your floating ip */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Floating ip ID */
                    floatingIpId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/gateway": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List gateways */
        get: {
            parameters: {
                query?: {
                    /** @description Attached interface's subnet id */
                    subnetId?: string;
                };
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Gateway"][];
                    };
                };
            };
        };
        put?: never;
        /** Create new Gateway and new Private Network with new Subnet */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.network.CreateGateway"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/gateway/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get gateway */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Gateway"];
                    };
                };
            };
        };
        /** Update a gateway */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.network.UpdateGateway"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Gateway"];
                    };
                };
            };
        };
        post?: never;
        /** Delete gateway */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/expose": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Expose gateway to public network by adding a public port on it. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.Gateway"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List interfaces */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.gateway.Interface"][];
                    };
                };
            };
        };
        put?: never;
        /** Create gateway interface */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.network.gateway.CreateInterface"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.gateway.Interface"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface/{interfaceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get interface */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Interface ID */
                    interfaceId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.network.gateway.Interface"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete gateway interface */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                    /** @description Interface ID */
                    interfaceId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/abortSnapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Abort an instance snapshot creation */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/associateFloatingIp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Associate an existing floating IP to an instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.instance.AssociateFloatingIp"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/floatingIp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a floating IP and attach it to an instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Instance ID */
                    instanceId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.instance.CreateFloatingIp"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List certificates */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.keymanager.Certificate"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new certificate */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.keymanager.CertificateCreate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.keymanager.Certificate"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate/{certificateId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about a certificate */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Certificate ID */
                    certificateId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.keymanager.Certificate"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a certificate */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Certificate ID */
                    certificateId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/keymanager/secret": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List secrets */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.keymanager.Secret"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/keymanager/secret/{secretId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about a secret */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Secret ID */
                    secretId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.keymanager.Secret"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a secret */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Secret ID */
                    secretId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List flavors */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.Flavor"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor/{flavorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about a load balancing flavor */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Flavor ID */
                    flavorId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.Flavor"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List health monitors */
        get: {
            parameters: {
                query?: {
                    /** @description Linked pool id */
                    poolId?: string;
                };
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.HealthMonitor"][];
                    };
                };
            };
        };
        put?: never;
        /** Create health monitor */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.HealthMonitor"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.HealthMonitor"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about a loadbalancer health monitor */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Health monitor ID */
                    healthMonitorId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.HealthMonitor"];
                    };
                };
            };
        };
        /** Update a health monitor */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Health monitor ID */
                    healthMonitorId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.UpdateHealthMonitor"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.HealthMonitor"];
                    };
                };
            };
        };
        post?: never;
        /** Delete health monitor */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Health monitor ID */
                    healthMonitorId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    /** @description Linked listener id */
                    listenerId?: string;
                };
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.L7Policy"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.L7Policy"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.L7Policy"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L7 policy ID */
                    l7PolicyId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.L7Policy"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L7 policy ID */
                    l7PolicyId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.L7PolicyUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.L7Policy"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L7 policy ID */
                    l7PolicyId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L7 policy ID */
                    l7PolicyId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.L7Rule"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L7 policy ID */
                    l7PolicyId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.L7Rule"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.L7Rule"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L7 policy ID */
                    l7PolicyId: string;
                    /** @description L7 rule ID */
                    l7RuleId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.L7Rule"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L7 policy ID */
                    l7PolicyId: string;
                    /** @description L7 rule ID */
                    l7RuleId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.L7Rule"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.L7Rule"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L7 policy ID */
                    l7PolicyId: string;
                    /** @description L7 rule ID */
                    l7RuleId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your loadbalancer listeners */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by loadbalancer */
                    loadbalancerId?: string;
                };
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.Listener"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a loadbalancer listener */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.CreateListener"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.Listener"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about a loadbalancer listener */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Listener ID */
                    listenerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.Listener"];
                    };
                };
            };
        };
        /** Edit a loadbalancer listener */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Listener ID */
                    listenerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.EditListener"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.Listener"];
                    };
                };
            };
        };
        post?: never;
        /** Delete loadbalancer listener */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Listener ID */
                    listenerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your load balancers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.LoadBalancer"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a loadbalancer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.Loadbalancer.CreateInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about a load balancer */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.LoadBalancer"];
                    };
                };
            };
        };
        /** Edit a loadbalancer */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.LoadbalancerEdit"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.LoadBalancer"];
                    };
                };
            };
        };
        post?: never;
        /** Delete loadbalancer */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/associateFloatingIp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Associate an existing floating IP to a loadbalancer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.AssociateFloatingIp"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/floatingIp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a floating IP and attach it to a loadbalancer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.CreateFloatingIp"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription IDs for a cluster */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on a specific kind (e.g., audit) */
                    kind?: string;
                };
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Create a subscription from logs to a pre-existing LDP stream */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["dbaas.logs.LogSubscriptionCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscription"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogSubscriptionResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate a temporary URL to retrieve logs */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["dbaas.logs.LogUrlCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.TemporaryLogsLink"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get loadbalancer statistics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Load balancer ID */
                    loadBalancerId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.loadbalancer.Stats"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available log kinds */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a log kind */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dbaas.logs.LogKind"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your loadbalancer pools */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by loadbalancer */
                    loadbalancerId?: string;
                };
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.Pool"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a loadbalancer pool */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.PoolCreate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.Pool"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about a loadbalancer pool */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Pool ID */
                    poolId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.Pool"];
                    };
                };
            };
        };
        /** Update a loadbalancer pool */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Pool ID */
                    poolId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.PoolUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.Pool"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a loadbalancer pool */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Pool ID */
                    poolId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your pool members */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Pool ID */
                    poolId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.pool.Member"][];
                    };
                };
            };
        };
        put?: never;
        /** Create pool members */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Pool ID */
                    poolId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.pool.CreateMembers"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.pool.Member"][];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about a pool member */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Member ID */
                    memberId: string;
                    /** @description Pool ID */
                    poolId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.pool.Member"];
                    };
                };
            };
        };
        /** Update a pool member */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Member ID */
                    memberId: string;
                    /** @description Pool ID */
                    poolId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.loadbalancing.pool.MemberUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.loadbalancing.pool.Member"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a pool member */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Member ID */
                    memberId: string;
                    /** @description Pool ID */
                    poolId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/network": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List networks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.Network"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a network with a gateway */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.network.CreateNetwork"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/network/{networkId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get network */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.Network"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete network */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subnets */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.Subnet"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subnet */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subnet ID */
                    subnetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.project.Subnet"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete subnet */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subnet ID */
                    subnetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}/gateway": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Gateway for existing subnet */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Network ID */
                    networkId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Subnet ID */
                    subnetId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.network.CreateGatewaySummary"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/quota": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List quotas */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.quota.Quotas"];
                    };
                };
            };
        };
        put?: never;
        /** Change project quotas on region */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectRegionQuotaCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/quota/allowed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get allowed quotas on region */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.quota.AllowedQuota"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/quota/storage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get storage quotas on region */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.quota.storage.Quota"];
                    };
                };
            };
        };
        /** Update storage quota on region */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.quota.storage.QuotaUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete storage quota on region */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/storage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get S3 storage containers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.StorageContainer"][];
                    };
                };
            };
        };
        put?: never;
        /** Create S3 storage container */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.StorageContainerCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.StorageContainer"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/storage/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get S3 storage container */
        get: {
            parameters: {
                query?: {
                    /** @description Limit the number of objects returned (1000 maximum, defaults to 1000) */
                    limit?: number;
                    /** @description List objects whose names are greater than marker */
                    marker?: string;
                    /** @description Filter objects by name prefix */
                    prefix?: string;
                };
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.StorageContainer"];
                    };
                };
            };
        };
        /** Update S3 storage container */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.StorageContainer"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.StorageContainer"];
                    };
                };
            };
        };
        post?: never;
        /** Delete S3 storage container */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{objectKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete S3 storage container object */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Object key */
                    objectKey: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/storage/{name}/policy/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add S3 storage container policy */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.storage.AddContainerPolicy"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/storage/{name}/presign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate S3 presigned URLs to download or upload objects */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name */
                    name: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.storage.PresignedURLInput"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.storage.PresignedURL"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/volumeBackup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List volume backups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volumeBackup.VolumeBackup"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a volume backup */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.volumeBackup.VolumeBackupCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volumeBackup.VolumeBackup"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get volume backup */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume backup ID */
                    volumeBackupId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volumeBackup.VolumeBackup"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete volume backup */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume backup ID */
                    volumeBackupId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore a volume backup on a volume */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume backup ID */
                    volumeBackupId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.volumeBackup.VolumeBackupRestore"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volumeBackup.VolumeBackup"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}/volume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a volume from a volume backup */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume backup ID */
                    volumeBackupId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.volumeBackup.VolumeCreationFromBackup"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Volume"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/workflow/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your automated backups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Backup"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new automated backup */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectRegionWorkflowBackupCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Backup"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/region/{regionName}/workflow/backup/{backupWorkflowId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about a backup workflow process */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup workflow ID */
                    backupWorkflowId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Backup"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a backup workflow process */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backup workflow ID */
                    backupWorkflowId: string;
                    /** @description Region name */
                    regionName: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/regionAvailable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List the regions on which you can ask an access to */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.AvailableRegion"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/retain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Do not expire the project, and retain it
         * @description Do not expire the project, and retain it. You will have to pay for the resources you will use after using this call
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all Roles */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.role.Roles"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/serviceInfos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get service information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["services.Service"];
                    };
                };
            };
        };
        /** Update service information */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["services.Service"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get snapshots */
        get: {
            parameters: {
                query?: {
                    /** @description Get compatible snapshots with flavor type */
                    flavorType?: string;
                    /** @description Region */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.image.Image"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/snapshot/{imageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get snapshot details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Image ID */
                    imageId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.image.Image"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a snapshot */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Image ID */
                    imageId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.image.Image"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/sshkey": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get SSH keys */
        get: {
            parameters: {
                query?: {
                    /** @description Region */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.sshkey.SshKey"][];
                    };
                };
            };
        };
        put?: never;
        /** Create SSH key */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectSshkeyCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.sshkey.SshKeyDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/sshkey/{keyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get SSH key */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Key ID */
                    keyId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.sshkey.SshKeyDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete SSH key */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Key ID */
                    keyId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/stack": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get stacks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.stack.Stack"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/stack/{stackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get stack */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Stack ID */
                    stackId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.stack.Stack"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/storage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get SWIFT storage containers */
        get: {
            parameters: {
                query?: {
                    /** @description Include container type */
                    includeType?: boolean;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.storage.Container"][];
                    };
                };
            };
        };
        put?: never;
        /** Create SWIFT container */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectStorageCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.storage.Container"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/storage/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Access to SWIFT storage API */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.storage.ContainerAccess"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/storage/quota": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List storage quotas */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.storage.Quota"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/storage/{containerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get SWIFT storage container */
        get: {
            parameters: {
                query?: {
                    /** @description Do not return container objects */
                    noObjects?: boolean;
                    /** @description Filter objects by name prefix */
                    prefix?: string;
                };
                header?: never;
                path: {
                    /** @description Container ID */
                    containerId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.storage.ContainerDetail"];
                    };
                };
            };
        };
        /** Update SWIFT storage container */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Container ID */
                    containerId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectStorageUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete SWIFT container */
        delete: {
            parameters: {
                query?: {
                    /** @description Recursively delete objects and container */
                    recursive?: boolean;
                };
                header?: never;
                path: {
                    /** @description Container ID */
                    containerId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/storage/{containerId}/cors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add CORS support on SWIFT container */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Container ID */
                    containerId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectStorageCorsCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Delete CORS support on SWIFT container */
        delete: {
            parameters: {
                query: {
                    /** @description Delete this origin */
                    origin: string;
                };
                header?: never;
                path: {
                    /** @description Container ID */
                    containerId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/storage/{containerId}/publicUrl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get a public temporary URL to access one of your SWIFT object */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Container ID */
                    containerId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectStoragePublicUrlCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.storage.ContainerObjectTempURL"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/storage/{containerId}/static": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deploy your SWIFT container files as a static web site */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Container ID */
                    containerId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/storage/{containerId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create openstack user with only access to this SWIFT container */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Container ID */
                    containerId: string;
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectStorageUserCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.UserDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/terminate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ask for the termination of your service
         * @description Ask for the termination of your service. Admin contact of this service will receive a termination token by email in order to confirm its termination with /confirmTermination endpoint.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/unleash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request more quota on your /cloud project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project id */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/usage/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current usage */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.usage.UsageCurrent"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/usage/forecast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get usage forecast */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.usage.UsageForecast"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/usage/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Usage information details */
        get: {
            parameters: {
                query?: {
                    /** @description Filter results having date superior to from */
                    from?: string;
                    /** @description Filter results having date inferior to */
                    to?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.usage.UsageHistory"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/usage/history/{usageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Usage information details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Usage ID */
                    usageId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.usage.UsageHistoryDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.User"][];
                    };
                };
            };
        };
        put?: never;
        /** Create user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectUserCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.UserDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get your client configuration */
        get: {
            parameters: {
                query?: {
                    /** @description Region */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.Configuration"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/openrc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get RC file of OpenStack */
        get: {
            parameters: {
                query: {
                    /** @description Region */
                    region: string;
                    /** @description Identity API version */
                    version?: components["schemas"]["cloud.user.OpenrcVersionEnum"];
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.Openrc"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/policy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export user storage policy */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.storage.PolicyRaw"];
                    };
                };
            };
        };
        put?: never;
        /** Import user storage policy */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.storage.PolicyRaw"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/rclone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get rclone configuration file */
        get: {
            parameters: {
                query: {
                    /** @description Region */
                    region: string;
                    /** @description Service */
                    service?: components["schemas"]["cloud.user.RCloneServiceEnum"];
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.Rclone"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/regeneratePassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Regenerate user password */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.UserDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user roles */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.role.Role"][];
                    };
                };
            };
        };
        /** Update roles of a user */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectUserRoleUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.UserDetail"];
                    };
                };
            };
        };
        /** Add a role to a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectUserRoleCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.UserDetail"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/role/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get role detail */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role ID */
                    roleId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.role.Role"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Remove role for a user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role ID */
                    roleId: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/s3Credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List your S3 credentials */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.S3Credentials"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new S3 credentials for an user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.S3CredentialsWithSecret"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about an S3 credential */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Access */
                    access: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.S3Credentials"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an S3 credential */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Access */
                    access: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}/secret": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Display secret from a S3 credential */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Access */
                    access: string;
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.user.S3CredentialsSecretOnly"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/user/{userId}/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get token for user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description User ID */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectUserTokenCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.authentication.Token"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/volume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get volumes */
        get: {
            parameters: {
                query?: {
                    /** @description Volume region */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Volume"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a volume */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectVolumeCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Volume"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/volume/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get volume snapshots */
        get: {
            parameters: {
                query?: {
                    /** @description Snapshots region */
                    region?: string;
                };
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Snapshot"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/volume/snapshot/{snapshotId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get volume snapshot details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Snapshot ID */
                    snapshotId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Snapshot"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a volume snapshot */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Snapshot ID */
                    snapshotId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/volume/{volumeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get volume details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume ID */
                    volumeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Volume"];
                    };
                };
            };
        };
        /** Update a volume */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume ID */
                    volumeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectVolumeUpdate"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Volume"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a volume */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume ID */
                    volumeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/volume/{volumeId}/attach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Attach a volume on an instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume ID */
                    volumeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectVolumeAttachCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Volume"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/volume/{volumeId}/detach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Detach a volume from an instance */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume ID */
                    volumeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectVolumeDetachCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Volume"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/volume/{volumeId}/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Snapshot a volume */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume ID */
                    volumeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectVolumeSnapshotCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Snapshot"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/volume/{volumeId}/upsize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Extend a volume */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                    /** @description Volume ID */
                    volumeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cloud.ProjectVolumeUpsizeCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.volume.Volume"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud/project/{serviceName}/vrack": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the linked vRack on your project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Vrack"];
                    };
                };
            };
        };
        put?: never;
        /** Order and attach a new vRack on your project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Service name */
                    serviceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cloud.Operation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details about your nichandle */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.Nichandle"];
                    };
                };
            };
        };
        /** Update details of your nichandle */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.Nichandle"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/abuse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve abuse cases list */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/abuse/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check specific abuse case */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.abuse.Abuse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/backupCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.accessRestriction.SOTPAccount"];
                    };
                };
            };
        };
        put?: never;
        /** Add a SOTP access restriction */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.accessRestriction.SOTPSecret"];
                    };
                };
            };
        };
        /** Delete this Two-Factor */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/backupCode/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable this SOTP account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: password
                         * @description OTP code given by the application
                         */
                        code: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/backupCode/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable this SOTP account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: password
                         * @description OTP code given by the application
                         */
                        code: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/backupCode/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate your SOTP account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: password
                         * @description OTP code given by the application
                         */
                        code: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.accessRestriction.SOTPValidate"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/developerMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.DeveloperModeRestriction"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.DeveloperModeRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/ip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of IP restrictions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Add an IP access restriction */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description An IP range where we will apply the rule */
                        ip: components["schemas"]["ipBlock"];
                        /** @description Accept or deny IP access */
                        rule: components["schemas"]["nichandle.accessRestriction.IpRestrictionRuleEnum"];
                        /** @description Send an email if someone try to access with this IP address */
                        warning: boolean;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/ip/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.IpRestriction"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.IpRestriction"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete this restriction rule */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/ipDefaultRule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.IpRestrictionDefaultRule"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.IpRestrictionDefaultRule"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/sms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of Sms accounts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Add a SMS access restriction */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Cell phone number to register */
                        phone: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.accessRestriction.SmsSecret"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/sms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.accessRestriction.SmsAccount"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.accessRestriction.SmsAccount"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete this Two-Factor */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/sms/{id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable this SMS account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: password
                         * @description SMS code send by a cellphone
                         */
                        code: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/sms/{id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable this SMS account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: password
                         * @description SMS code send by a cellphone
                         */
                        code: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/sms/{id}/sendCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a SMS to this account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.accessRestriction.SmsCode"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/sms/{id}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate your SMS account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: password
                         * @description SMS code send to a cellphone
                         */
                        code: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/totp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of TOTP accounts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Add a TOTP access restriction */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.accessRestriction.TOTPSecret"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/totp/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.accessRestriction.TOTPAccount"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.accessRestriction.TOTPAccount"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete this Two-Factor */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/totp/{id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable this TOTP account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: password
                         * @description OTP code given by the application
                         */
                        code: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/totp/{id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable this TOTP account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: password
                         * @description OTP code given by the application
                         */
                        code: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/totp/{id}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate your TOTP account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: password
                         * @description OTP code given by the application
                         */
                        code: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/u2f": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of U2F accounts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Add a U2F access restriction */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.accessRestriction.U2FRegisterChallenge"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/u2f/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.accessRestriction.U2FAccount"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.accessRestriction.U2FAccount"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete this Two-Factor */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/u2f/{id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable this U2F account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/u2f/{id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable this U2F account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/accessRestriction/u2f/{id}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate your U2F account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The Id of the restriction */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        attestationObject: string;
                        clientDataJSON: string;
                        rawId: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/agreements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of contracts signed between you and OVH */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of agreed property (like) */
                    agreed?: components["schemas"]["agreements.AgreementStateEnum"];
                    /** @description Filter the value of contractId property (like) */
                    contractId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/agreements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the contract */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["agreements.ContractAgreement"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/agreements/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept this contract */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the contract */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/agreements/{id}/contract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the contract */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["agreements.Contract"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/application": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all applications */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/application/{applicationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information about an application */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Application ID */
                    applicationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["auth.ApiApplication"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an application. It will revoke all credential belonging to this application */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Application ID */
                    applicationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/credential": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all credentials */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by applicationId */
                    applicationId?: number;
                    /** @description Filter by status */
                    status?: components["schemas"]["auth.CredentialStateEnum"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/credential/{credentialId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information about a credential */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Credential ID */
                    credentialId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["auth.ApiCredential"];
                    };
                };
            };
        };
        /** Edit a credential */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Credential ID */
                    credentialId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["auth.ApiCredential"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a credential */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Credential ID */
                    credentialId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/credential/{credentialId}/application": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get associated application */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Credential ID */
                    credentialId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["auth.ApiApplication"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/logs/forward": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Forward API & Customer panel account logs to a dedicated logs stream */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["apilogs.ForwardRequest"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["apilogs.ForwardResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/logs/self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of Api calls done with your account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/logs/self/{logId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    logId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Log"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/logs/services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of Api calls done on services you have access to */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/logs/services/{logId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    logId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Log"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/oauth2/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List oAuth2 clients */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Create a new oauth2 client */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["oauth2.clientRequest"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["oauth2.clientSecret"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/api/oauth2/client/{clientId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["oauth2.client"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["oauth2.client"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete an oAuth2 client */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/autorenew": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.NicAutorenewInfos"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.NicAutorenewInfos"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Activate auto renew for this nic */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Day of autorenew */
                        renewDay: number;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/availableAutomaticPaymentMeans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available payment methods in this Nic's country */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.AutomaticPaymentMean"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all the bills the logged account has */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of category property (=) */
                    category?: components["schemas"]["billing.CategoryEnum"];
                    /** @description Filter the value of date property (>=) */
                    "date.from"?: string;
                    /** @description Filter the value of date property (<=) */
                    "date.to"?: string;
                    /** @description Filter the value of orderId property (=) */
                    orderId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Exports a bundle of invoices */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The file type of the archive */
                        archiveType: components["schemas"]["billing.ArchiveTypeEnum"];
                        /**
                         * Format: date-time
                         * @description End interval of the export
                         */
                        endDate?: string;
                        /** @description A list of ids to export */
                        ids?: string[];
                        /**
                         * Format: date-time
                         * @description Start interval of the export
                         */
                        startDate?: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill/{billId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Bill"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill/{billId}/debt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.Debt"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill/{billId}/debt/operation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** All operations related to these debts */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of depositOrderId property (=) */
                    depositOrderId?: number;
                };
                header?: never;
                path: {
                    billId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill/{billId}/debt/operation/{operationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                    operationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.Operation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill/{billId}/debt/operation/{operationId}/associatedObject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return main data about the object related to this debt operation */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                    operationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.entry.AssociatedObject"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill/{billId}/debt/pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an order in order to pay this order's debt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Order"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill/{billId}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Give access to all entries of the bill */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill/{billId}/details/{billDetailId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billDetailId: string;
                    billId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.BillDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bill/{billId}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Payment"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all billing groups */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by name */
                    name?: string;
                    /** @description Filter by Service ID */
                    serviceId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Create a new billing group */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.billing.group.BillingGroup"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.billing.group.BillingGroup"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/group/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information about a billing group */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group ID */
                    groupId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.billing.group.BillingGroup"];
                    };
                };
            };
        };
        /** Edit billing group */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group ID */
                    groupId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.billing.group.BillingGroup"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a billing group */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group ID */
                    groupId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/group/{groupId}/service": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve billing group service ID list */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group ID */
                    groupId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Associate a service to a billing group */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group ID */
                    groupId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.billing.group.service.Create"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.billing.group.Service"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/group/{groupId}/service/{serviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information about a billing group service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group ID */
                    groupId: number;
                    /** @description Service ID */
                    serviceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.billing.group.Service"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Unlink a service from a billing group */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group ID */
                    groupId: number;
                    /** @description Service ID */
                    serviceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/invoicesByPostalMail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Send invoices through postal mail */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": boolean;
                    };
                };
            };
        };
        put?: never;
        /** Enable or disable invoices by postal mail */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Send invoices through postal mail */
                        enable: boolean;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/purchaseOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all purchase orders */
        get: {
            parameters: {
                query?: {
                    /** @description Billing Group Identifier */
                    billingGroupId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Create a purchase order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.billing.purchaseOrder.Creation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.billing.purchaseOrder.PurchaseOrder"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/purchaseOrder/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information about a purchase order */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.billing.purchaseOrder.PurchaseOrder"];
                    };
                };
            };
        };
        /** Update a purchase order */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.billing.purchaseOrder.Update"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a purchase order */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/report/consumption": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all billing reports of consumption */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Generate consumption billing report for a period */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.billing.report.consumption.CreationRequest"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.billing.report.consumption.CreationResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/report/consumption/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a consumption billing report with task id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Task ID */
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.billing.report.Consumption"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/bringYourOwnIp/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get your Bring your own IP token */
        get: {
            parameters: {
                query: {
                    /** @description Campus where you plan to bring your own IP range in. See /ip/campus to get more details. */
                    campus: components["schemas"]["ip.CampusEnum"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/carbonCalculator/hasInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find out if the account has data to generate invoice */
        get: {
            parameters: {
                query?: {
                    /** @description Month of the requested invoice (day is ignored) */
                    date?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["carbonCalculator.HasInvoiceResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/carbonCalculator/task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all tasks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["carbonCalculator.Task"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a carbon footprint generation task */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["carbonCalculator.CalculationRequest"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["carbonCalculator.CalculationResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/carbonCalculator/task/{taskID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a task by its ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description TaskID */
                    taskID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["carbonCalculator.Task"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all certificates of the account */
        get: operations["getCertificates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/changeEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate an email change procedure */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description New email to associate to your account */
                        newEmail: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.emailChange.Task"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/changePassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate a password change procedure */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/consent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all consent campaign available */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.consent.Campaign"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/consent/{campaignName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information about a consent campaign */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Campaign name */
                    campaignName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.consent.Campaign"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/consent/{campaignName}/decision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get decision value for a consent campaign */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Campaign name */
                    campaignName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.consent.Consent"];
                    };
                };
            };
        };
        /** Update decision of a consent campaign */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Campaign name */
                    campaignName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.consent.Decision"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/consumption/usage/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get on-going consumptions for all services */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.consumption.Transaction"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/consumption/usage/forecast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get forecasted consumptions for all services */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.consumption.Transaction"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/consumption/usage/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of transactions between two dates */
        get: {
            parameters: {
                query: {
                    /** @description Begin date */
                    beginDate: string;
                    /** @description End date */
                    endDate: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.consumption.Transaction"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve every contact your created */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Create a new contact */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.contact.Contact"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.contact.Contact"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/contact/{contactId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information about a contact */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Contact ID */
                    contactId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.contact.Contact"];
                    };
                };
            };
        };
        /** Update an existing contact */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Contact ID */
                    contactId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.contact.Contact"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.contact.Contact"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/contact/{contactId}/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mandatory/read-only information about the fields of a contact */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Contact ID */
                    contactId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.contact.FieldInformation"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/credit/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all credit balances */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by balance type */
                    type?: components["schemas"]["me.credit.balance.TypeEnum"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/credit/balance/{balanceName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a credit balance */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Balance name */
                    balanceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.credit.Balance"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/credit/balance/{balanceName}/movement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve movements for a specific balance */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Balance name */
                    balanceName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/credit/balance/{balanceName}/movement/{movementId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a specific movement for a credit balance */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Balance name */
                    balanceName: string;
                    /** @description Movement ID */
                    movementId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.credit.balance.Movement"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/credit/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate a code to generate associated credit movement */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.credit.code.Redeem"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.credit.balance.Movement"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/debtAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.Balance"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/debtAccount/debt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** All debts related to your account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/debtAccount/debt/{debtId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    debtId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.Debt"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/debtAccount/debt/{debtId}/operation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** All operations related to these debts */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of depositOrderId property (=) */
                    depositOrderId?: number;
                };
                header?: never;
                path: {
                    debtId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/debtAccount/debt/{debtId}/operation/{operationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    debtId: number;
                    operationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.Operation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/debtAccount/debt/{debtId}/operation/{operationId}/associatedObject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return main data about the object related to this debt operation */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    debtId: number;
                    operationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.entry.AssociatedObject"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/debtAccount/debt/{debtId}/pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an order in order to pay this order's debt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    debtId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Order"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/debtAccount/pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an order in order to pay all your due debts */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Order"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all the deposits made to your prepaid account or debt account */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of date property (>=) */
                    "date.from"?: string;
                    /** @description Filter the value of date property (<=) */
                    "date.to"?: string;
                    /** @description Filter the value of orderId property (=) */
                    orderId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Deposit"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Give access to all entries of this deposit */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/details/{depositDetailId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    depositDetailId: string;
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.DepositDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/paidBills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get invoices paid by this deposit */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/paidBills/{billId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Bill"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/paidBills/{billId}/debt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.Debt"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/paidBills/{billId}/debt/operation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** All operations related to these debts */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of depositOrderId property (=) */
                    depositOrderId?: number;
                };
                header?: never;
                path: {
                    billId: string;
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                    depositId: string;
                    operationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.Operation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}/associatedObject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return main data about the object related to this debt operation */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                    depositId: string;
                    operationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.entry.AssociatedObject"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/paidBills/{billId}/debt/pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an order in order to pay this order's debt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Order"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/paidBills/{billId}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Give access to all entries of the bill */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/paidBills/{billId}/details/{billDetailId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billDetailId: string;
                    billId: string;
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.BillDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/paidBills/{billId}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Payment"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/deposit/{depositId}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    depositId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Payment"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of documents added in your account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Create new document */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description File name */
                        name: string;
                        /** @description File tags */
                        tags?: components["schemas"]["complexType.SafeKeyValue_string"][];
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.document.Document"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/document/cors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add CORS support on your container */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Allow this origin */
                        origin: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/document/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Document id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.document.Document"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Document id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.document.Document"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a document */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Document id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/fax/customDomains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the fax custom domains linked to the customer account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Create a custom domain for your fax services */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The custom domain of your fax services */
                        domain: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["telephony.MailDomain2Service"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/fax/customDomains/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["telephony.MailDomain2Service"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a custom domain of your fax services */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/fidelityAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.FidelityAccount"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["billing.FidelityAccount"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/fidelityAccount/creditOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate an order that can be paid in order to credit the fidelity account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount of points you want to credit your fidelity account of */
                        amount: number;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Order"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/fidelityAccount/movements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of entries of the fidelity account */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of date property (>=) */
                    "date.from"?: string;
                    /** @description Filter the value of date property (<=) */
                    "date.to"?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/fidelityAccount/movements/{movementId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    movementId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.FidelityMovement"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/geolocation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fetch visitor country & region */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.geolocation.ContinentCountryLocation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/identity/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all IAM groups of this account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Create a new IAM group */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["auth.GroupRequest"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["auth.Group"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/identity/group/{group}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an IAM group */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group */
                    group: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["auth.Group"];
                    };
                };
            };
        };
        /** Alter an IAM group */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group */
                    group: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["auth.Group"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete an IAM group */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group */
                    group: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/identity/provider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the identity provider linked to this account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["auth.Provider"];
                    };
                };
            };
        };
        /** Alter the provider */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["auth.Provider"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Define an identity provider (SAML 2.0) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["auth.ProviderRequest"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["auth.Provider"];
                    };
                };
            };
        };
        /** Remove the identity provider */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/identity/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all IAM users of this account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Create a new IAM user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["auth.UserRequest"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/identity/user/{user}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an IAM user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User */
                    user: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["auth.User"];
                    };
                };
            };
        };
        /** Alter an IAM user */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User */
                    user: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["auth.User"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete an IAM user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User */
                    user: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/identity/user/{user}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable this user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User */
                    user: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/identity/user/{user}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable this user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User */
                    user: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/incident/sbg/migrateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all services you can migrate */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.incident.ServiceMigration"][];
                    };
                };
            };
        };
        put?: never;
        /** Ask for impacted services migration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.incident.MigrateServices"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.incident.Order"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/insight": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get your insight access token */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.insight.Access"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/installationTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Your customized operating system installation templates */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Create a template */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description OVH template name yours will be based on, choose one among the list given by compatibleTemplates function */
                        baseTemplateName: string;
                        /** @description Your template name */
                        name: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/installationTemplate/{templateName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dedicated.installationTemplate.Templates"];
                    };
                };
            };
        };
        /** Alter this template */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["dedicated.installationTemplate.Templates"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Remove this template */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/installationTemplate/{templateName}/checkIntegrity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check the integrity of this template */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/installationTemplate/{templateName}/partitionScheme": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Partitioning schemes available on this template */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Add a scheme of partition */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description This partitioning scheme name */
                        name: string;
                        /** @description on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications) */
                        priority: number;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dedicated.installationTemplate.templatePartitioningSchemes"];
                    };
                };
            };
        };
        /** Alter this scheme of partition */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["dedicated.installationTemplate.templatePartitioningSchemes"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Remove this scheme of partition */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Hardware RAIDs defined in this partitioning scheme */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Add an hardware RAID in this partitioning scheme */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Disk list. Syntax is cX:dY for disks and [cX:dY, cX:dY] for groups. With X and Y resp. the controler id and the disk id. */
                        disks: string[];
                        /** @description RAID mode */
                        mode: components["schemas"]["dedicated.TemplateOsHardwareRaidEnum"];
                        /** @description Hardware RAID name */
                        name: string;
                        /** @description Specifies the creation order of the hardware RAID */
                        step: number;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Hardware RAID name */
                    name: string;
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dedicated.installationTemplate.hardwareRaid"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Hardware RAID name */
                    name: string;
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["dedicated.installationTemplate.hardwareRaid"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Remove this RAID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Hardware RAID name */
                    name: string;
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Partitions defined in this partitioning scheme */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Add a partition in this partitioning scheme */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Partition filesytem */
                        filesystem: components["schemas"]["dedicated.server.FileSystemEnum"];
                        /** @description Partition mount point */
                        mountpoint: string;
                        /** @description Partition raid */
                        raid?: components["schemas"]["dedicated.server.PartitionRaidEnum"];
                        /** @description Partition size in MB, 0 => rest of the space */
                        size: number;
                        /** @description Partition step */
                        step: number;
                        /** @description Partition type */
                        type: components["schemas"]["dedicated.TemplatePartitionTypeEnum"];
                        /** @description Logical volume name (required if type is lv) or optional zpool name if filesystem is ZFS */
                        volumeName?: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Partition mount point */
                    mountpoint: string;
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dedicated.installationTemplate.templatePartitions"];
                    };
                };
            };
        };
        /** Alter this partition */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Partition mount point */
                    mountpoint: string;
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["dedicated.installationTemplate.templatePartitions"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Remove this partition */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Partition mount point */
                    mountpoint: string;
                    /** @description This partitioning scheme name */
                    schemeName: string;
                    /** @description This template name */
                    templateName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ipOrganisation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of organisations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Add an organisation */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        abuse_mailbox: string;
                        address: string;
                        city: string;
                        country: components["schemas"]["nichandle.CountryEnum"];
                        firstname: string;
                        lastname: string;
                        phone: components["schemas"]["phoneNumber"];
                        registry: components["schemas"]["nichandle.IpRegistryEnum"];
                        state?: string;
                        zip?: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ipOrganisation/{organisationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    organisationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.Ipv4Org"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    organisationId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.Ipv4Org"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete this organisation */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    organisationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ipxeScript": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of all your IPXE scripts - Use /dedicated/server/{serviceName} instead: see https://help.ovhcloud.com/csm/en-dedicated-servers-ipxe-scripts
         * @deprecated
         * @description List of all your IPXE scripts - Use /dedicated/server/{serviceName} instead: see https://help.ovhcloud.com/csm/en-dedicated-servers-ipxe-scripts?id=kb_article_view&sysparm_article=KB0058505 for more details
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ipxeScript/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get this object properties
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name of this script */
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.ipxe"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Remove this IPXE Script
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name of this script */
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/logs/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get your audit logs */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["audit.Log"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/logs/audit/forward": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Forward account audit logs to a dedicated logs stream */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["audit.log.ForwardRequest"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["audit.log.ForwardResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/mailingList/availableLists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of mailing list you can subscribe */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/mailingList/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Subscribe an email to a restricted mailing list */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Email you want to subscribe to */
                        email: string;
                        /** @description Mailing list */
                        mailingList: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/marketing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve user marketing consent details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.marketing.Consent"];
                    };
                };
            };
        };
        /** Update user marketing consent */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.marketing.Consent"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.marketing.Consent"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/migration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all country migrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/migration/{migrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information about a country migration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Migration ID */
                    migrationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.Migration"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/migration/{migrationId}/contract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all contracts for a billing country migration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Migration ID */
                    migrationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/migration/{migrationId}/contract/{contractId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve detail about a contract for a billing country migration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Contract ID */
                    contractId: number;
                    /** @description Migration ID */
                    migrationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.migration.Contract"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/migration/{migrationId}/contract/{contractId}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept contract */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Contract ID */
                    contractId: number;
                    /** @description Migration ID */
                    migrationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.agreements.ContractAgreement"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/migration/{migrationId}/contract/{contractId}/agreement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve agreement for this contract */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Contract ID */
                    contractId: number;
                    /** @description Migration ID */
                    migrationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.agreements.ContractAgreement"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/notification/email/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve every email sent to you */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/notification/email/history/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information about an email */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.EmailNotification"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all the orders the logged account has */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of date property (>=) */
                    "date.from"?: string;
                    /** @description Filter the value of date property (<=) */
                    "date.to"?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Order"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/associatedObject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return main data about the object the processing of the order generated */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.order.AssociatedObject"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/availableRegisteredPaymentMean": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of registered payment mean you can use to pay this order */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.order.RegisteredPaymentMean"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List credit balances applied on this Order */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Use a credit balance on this Order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Balance name to use on this Order */
                        balanceName: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.CreditBalance"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/balance/{balanceName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Credit balance name */
                    balanceName: string;
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.CreditBalance"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Remove a credit balance from this Order */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Credit balance name */
                    balanceName: string;
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/consumption/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve order's detailed consumption information as a file */
        get: {
            parameters: {
                query: {
                    /** @description Format of the file */
                    fileFormat: components["schemas"]["consumption.ConsumptionExportFormatsEnum"];
                };
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.order.ConsumptionDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/debt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.Debt"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/debt/operation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** All operations related to these debts */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of depositOrderId property (=) */
                    depositOrderId?: number;
                };
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/debt/operation/{operationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    operationId: number;
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.Operation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/debt/operation/{operationId}/associatedObject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return main data about the object related to this debt operation */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    operationId: number;
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["debt.entry.AssociatedObject"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/debt/pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an order in order to pay this order's debt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Order"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Give access to all entries of the order */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/details/{orderDetailId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderDetailId: number;
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.OrderDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/details/{orderDetailId}/extension": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderDetailId: number;
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.ItemDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/followUp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return tracking of the order */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.order.FollowUp"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pay with a payment method reference */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Payment method informations for pay */
                        paymentMethod: components["schemas"]["billing.order.PayWithPaymentMethod"];
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/payWithRegisteredPaymentMean": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pay with an already registered payment mean */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The registered payment mean you want to use */
                        paymentMean: components["schemas"]["billing.ReusablePaymentMeanEnum"];
                        /** @description Id of registered payment mean, mandatory for bankAccount, creditCard and paypal */
                        paymentMeanId?: number;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Payment"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/paymentMeans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return main data about the object the processing of the order generated */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.order.PaymentMeans"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/paymentMethods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of registered payment method you can use to pay this order */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.order.PaymentMethods"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/retraction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request retraction of order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description An optional comment of why you want to retract */
                        comment?: string;
                        /** @description The reason why you want to retract */
                        reason: components["schemas"]["billing.order.RetractionReasonEnum"];
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return status of order */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.order.OrderStatusEnum"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/order/{orderId}/waiveRetraction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Waive retraction period of order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ovhAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of OVH accounts the logged account has */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ovhAccount/{ovhAccountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ovhAccountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.OvhAccount"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ovhAccountId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["billing.OvhAccount"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ovhAccount/{ovhAccountId}/creditOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate an order that can be paid in order to credit the OVH account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ovhAccountId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount in cents you want to credit your account of */
                        amount: number;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Order"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ovhAccount/{ovhAccountId}/movements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Details about an entry of the OVH account */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of date property (>=) */
                    "date.from"?: string;
                    /** @description Filter the value of date property (<=) */
                    "date.to"?: string;
                };
                header?: never;
                path: {
                    ovhAccountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ovhAccount/{ovhAccountId}/movements/{movementId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    movementId: number;
                    ovhAccountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Movement"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ovhAccount/{ovhAccountId}/movements/{movementId}/requestRefund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** request a refund of this credit note to your original payment method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    movementId: number;
                    ovhAccountId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount in cents you want to retrieve */
                        amount: number;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/ovhAccount/{ovhAccountId}/retrieveMoney": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transfer money from ovhAccount to your bank account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ovhAccountId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount in cents you want to transfer */
                        amount: number;
                        /** @description A valid bank account */
                        bankAccountId: number;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Order"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/partnerLevel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch the partner level of the account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.partnerLevel.Level"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/passwordRecover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request a password recover */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Company of your OVH Account Id */
                        ovhCompany: components["schemas"]["nichandle.OvhCompanyEnum"];
                        /** @description Your OVH Account Id */
                        ovhId: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/payment/availableMethods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve available payment method */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.payment.AvailablePaymentMethod"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/payment/method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve payment method list */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on 'default' property */
                    default?: boolean;
                    /** @description Filter on 'paymentType' property */
                    paymentType?: string;
                    /** @description Filter on 'status' property */
                    status?: components["schemas"]["me.payment.method.StatusEnum"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Register a new payment method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.payment.method.Creation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.payment.method.Validation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/payment/method/{paymentMethodId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a payment method */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment method ID */
                    paymentMethodId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.payment.PaymentMethod"];
                    };
                };
            };
        };
        /** Edit payment method */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment method ID */
                    paymentMethodId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.payment.PaymentMethod"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.payment.PaymentMethod"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a payment method */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment method ID */
                    paymentMethodId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.payment.PaymentMethod"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/payment/method/{paymentMethodId}/challenge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Challenge your payment method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment method ID */
                    paymentMethodId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.payment.method.Challenge"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/payment/method/{paymentMethodId}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add details to your payment method challenge */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment method ID */
                    paymentMethodId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.payment.method.Details"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.payment.method.Validation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/payment/method/{paymentMethodId}/finalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finalize a payment method registration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment method ID */
                    paymentMethodId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.payment.method.Finalize"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.payment.PaymentMethod"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/payment/transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve payment transaction list */
        get: {
            parameters: {
                query?: {
                    /** @description Payment method ID */
                    paymentMethodId?: number;
                    /** @description Status */
                    status?: components["schemas"]["me.payment.transaction.StatusEnum"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/payment/transaction/{transactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a transaction */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Transaction ID */
                    transactionId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.payment.Transaction"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/bankAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of bank accounts
         * @deprecated
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter on 'status' property */
                    state?: components["schemas"]["me.paymentMean.BankAccountStateEnum"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add a new payment mean bank account
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.paymentMean.BankAccountCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.paymentMean.BankAccountValidation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/bankAccount/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get bank account properties
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.paymentMean.BankAccount"];
                    };
                };
            };
        };
        /**
         * Alter this object properties
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.paymentMean.BankAccount"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Disable payment through this account
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/bankAccount/{id}/challenge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Challenge your bank account
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.paymentMean.BankAccountChallengeCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/bankAccount/{id}/chooseAsDefaultPaymentMean": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Choose this bank account as your default payment mean. Will cancel the previous choice.
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/creditCard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of payment mean credit cards
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add a new payment mean credit card
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.paymentMean.CreditCardCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.paymentMean.CreditCardValidation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/creditCard/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get credit card properties
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.paymentMean.CreditCard"];
                    };
                };
            };
        };
        /**
         * Alter this object properties
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.paymentMean.CreditCard"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Disable payment through this credit card
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/creditCard/{id}/challenge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Challenge your credit card
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.paymentMean.CreditCardChallengeCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/creditCard/{id}/chooseAsDefaultPaymentMean": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Choose this credit card as your default payment mean. Will cancel the previous choice.
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/deferredPaymentAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of payment mean deferred accounts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/deferredPaymentAccount/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.paymentMean.Deferred"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.paymentMean.Deferred"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/deferredPaymentAccount/{id}/chooseAsDefaultPaymentMean": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Choose this deferred account as your default payment mean. Will cancel the previous choice. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/paypal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of payment mean paypals
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add a new payment mean paypal
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.paymentMean.PaypalCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.paymentMean.PaypalValidation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/paypal/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get paypal properties
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.paymentMean.Paypal"];
                    };
                };
            };
        };
        /**
         * Alter this object properties
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.paymentMean.Paypal"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Disable payment through this paypal
         * @deprecated
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/paypal/{id}/challenge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Challenge your paypal
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.paymentMean.PaypalChallengeCreation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/paymentMean/paypal/{id}/chooseAsDefaultPaymentMean": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Choose this paypal as your default payment mean. Will cancel the previous choice.
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/recommendations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of recommendations to be returned */
                    max?: number;
                    /** @description Filter recommendations by product range */
                    range?: components["schemas"]["recommendations.productRangesEnum"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["recommendations.Recommendations"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all the refunds the logged account has */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of date property (>=) */
                    "date.from"?: string;
                    /** @description Filter the value of date property (<=) */
                    "date.to"?: string;
                    /** @description Filter the value of orderId property (=) */
                    orderId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/refund/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Exports a bundle of refunds */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The file type of the archive */
                        archiveType: components["schemas"]["billing.ArchiveTypeEnum"];
                        /**
                         * Format: date-time
                         * @description End interval of the export
                         */
                        endDate?: string;
                        /** @description A list of ids to export */
                        ids?: string[];
                        /**
                         * Format: date-time
                         * @description Start interval of the export
                         */
                        startDate?: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/refund/{refundId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    refundId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Refund"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/refund/{refundId}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Give access to all entries of the refund */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    refundId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/refund/{refundId}/details/{refundDetailId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    refundDetailId: string;
                    refundId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.RefundDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/refund/{refundId}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    refundId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Payment"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/reverseBill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all the bills sent by the current account */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of date property (>=) */
                    "date.from"?: string;
                    /** @description Filter the value of date property (<=) */
                    "date.to"?: string;
                    /** @description Filter the value of orderId property (=) */
                    orderId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/reverseBill/{reverseBillId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    reverseBillId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.ReverseBill"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/reverseBill/{reverseBillId}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Give access to all entries of this withdrawal */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    reverseBillId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/reverseBill/{reverseBillId}/details/{reverseBillDetailId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    reverseBillDetailId: string;
                    reverseBillId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.ReversableBillDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/reverseBill/{reverseBillId}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    reverseBillId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Payment"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/sla": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List active SLA */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/sla/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the object */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.SlaOperation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/sla/{id}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ask for SLA application */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the object */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/sla/{id}/canBeApplied": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check whether this SLA can be applied on your services */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the object */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": boolean;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/sla/{id}/services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get services impacted by this SLA */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the object */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.SlaOperationService"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/sla/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the status request of this SLA */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the object */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/sshKey": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of your public SSH keys */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Add a new public SSH key */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description ASCII encoded public SSH key to add */
                        key: string;
                        /** @description name of the new public SSH key */
                        keyName: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/sshKey/{keyName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name of this public SSH key */
                    keyName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.sshKey"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Remove this public SSH key */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name of this public SSH key */
                    keyName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/subAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of sub-accounts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Create a new sub-account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Description of the new sub-account */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/subAccount/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the object */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.SubAccount"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the object */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.SubAccount"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/subAccount/{id}/createConsumerKey": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a consumer key for the current application */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the object */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.SubAccountConsumerKey"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of all OVH things you can subscribe to
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/subscription/{subscriptionType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get this object properties
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The type of subscription */
                    subscriptionType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.Subscription"];
                    };
                };
            };
        };
        /**
         * Alter this object properties
         * @deprecated
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The type of subscription */
                    subscriptionType: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.Subscription"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/supportLevel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch the support level of the account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.SupportLevel.Level"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve customer tags list */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        /** Activate customer tag */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["me.tag.Creation"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.tag.Tag"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/tag/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all available tags */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.tag.AvailableTag"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/tag/{tag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a customer tag */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Tag */
                    tag: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.tag.Tag"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a customer tag */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Tag */
                    tag: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.tag.Tag"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/contactChange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of service contact change tasks you are involved in */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of askingAccount property (like) */
                    askingAccount?: string;
                    /** @description Filter the value of state property (like) */
                    state?: components["schemas"]["nichandle.changeContact.TaskStateEnum"];
                    /** @description Filter the value of toAccount property (like) */
                    toAccount?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/contactChange/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.contactChange.Task"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/contactChange/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept this change request */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The token you received by email for this request */
                        token: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/contactChange/{id}/refuse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refuse this change request */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The token you received by email for this request */
                        token: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/contactChange/{id}/resendEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** This call will send you a new email, containing a new token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/dns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List zone tasks */
        get: {
            parameters: {
                query?: {
                    function?: components["schemas"]["domain.TaskFunctionEnum"];
                    status?: components["schemas"]["domain.TaskStatusEnum"];
                    zone?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/dns/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a zone task */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["me.dns.Task"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/dns/{id}/accelerate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accelerate the task */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/dns/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel the task */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/dns/{id}/relaunch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Relaunch the task */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/domain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of domain tasks */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of domain property (like) */
                    domain?: string;
                    /** @description Filter the value of function property (like) */
                    function?: components["schemas"]["domain.OperationFunctionEnum"];
                    /** @description Filter the value of status property (=) */
                    status?: components["schemas"]["domain.OperationStatusEnum"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/domain/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Task"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/domain/{id}/accelerate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accelerate the task */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/domain/{id}/argument": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of arguments */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/domain/{id}/argument/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                    /** @description Key */
                    key: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.DomainTaskArgument"];
                    };
                };
            };
        };
        /** Alter this object properties */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                    /** @description Key */
                    key: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["nichandle.DomainTaskArgument"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/domain/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel the task */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/domain/{id}/progressbar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show progress of a task */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.DomainTaskProgressBar"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/domain/{id}/relaunch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Relaunch the task */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/emailChange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of email change tasks you are involved in */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of state property (like) */
                    state?: components["schemas"]["nichandle.changeEmail.TaskStateEnum"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/emailChange/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.emailChange.Task"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/emailChange/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept this change request */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The token you received by email for this request */
                        token: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/task/emailChange/{id}/refuse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refuse this change request */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The token you received by email for this request */
                        token: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/telephony/defaultIpRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** The default SIP IP restictions for your future VoIP lines */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": number[];
                    };
                };
            };
        };
        put?: never;
        /** Create a default IP restriction for your future VoIP lines */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The IPv4 subnet you want to allow */
                        subnet: components["schemas"]["ipv4Block"];
                        /** @description The protocol you want to restrict (sip/mgcp) */
                        type: components["schemas"]["telephony.ProtocolEnum"];
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["telephony.DefaultIpRestriction"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/telephony/defaultIpRestriction/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["telephony.DefaultIpRestriction"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a default IP restriction for your future VoIP lines */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/telephony/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the telephony settings linked to the customer account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["telephony.Settings"];
                    };
                };
            };
        };
        put?: never;
        /** Change the telephony settings linked to the customer account */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Settings to be changed */
                        settings: components["schemas"]["telephony.Settings"];
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/vipStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** VIP Status of this account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.VipStatus"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/voucher/checkValidity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify existing voucher */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Voucher value */
                        voucher: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["nichandle.VoucherStatus"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/withdrawal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all the withdrawals made from your prepaid account */
        get: {
            parameters: {
                query?: {
                    /** @description Filter the value of date property (>=) */
                    "date.from"?: string;
                    /** @description Filter the value of date property (<=) */
                    "date.to"?: string;
                    /** @description Filter the value of orderId property (=) */
                    orderId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/withdrawal/{withdrawalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    withdrawalId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Withdrawal"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/withdrawal/{withdrawalId}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Give access to all entries of this withdrawal */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    withdrawalId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/withdrawal/{withdrawalId}/details/{withdrawalDetailId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    withdrawalDetailId: string;
                    withdrawalId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.WithdrawalDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/withdrawal/{withdrawalId}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get this object properties */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    withdrawalId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["billing.Payment"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/xdsl/setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get xdsl settings linked to the nichandle */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["xdsl.Setting"];
                    };
                };
            };
        };
        put?: never;
        /** Change xdsl settings linked to the nichandle */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Send the modem as soon as possible, do not wait the xdsl line to be active */
                        resellerFastModemShipping?: boolean;
                        /** @description Let the modem with vendor configuration. It prevent to apply the config managed by ovh manager */
                        resellerModemBasicConfig?: boolean;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description Possible values for project access type
         * @enum {string}
         */
        "cloud.AccessTypeEnum": "full" | "restricted";
        /** @description Cloud ACL */
        "cloud.Acl": {
            /** @description OVH customer unique identifier */
            readonly accountId?: string;
            /** @description ACL type */
            readonly type?: components["schemas"]["cloud.AclTypeEnum"];
        };
        /**
         * @description Possible values for ACL type
         * @enum {string}
         */
        "cloud.AclTypeEnum": "readOnly" | "readWrite";
        /** @description Cloud alerting consumption */
        "cloud.Alerting": {
            /**
             * Format: date-time
             * @description Alerting creation date
             */
            readonly creationDate?: string;
            /** @description Delay between alerts in seconds */
            delay?: components["schemas"]["cloud.AlertingDelayEnum"];
            /** @description Email to contact */
            email?: string;
            /** @description Formatted monthly threshold for this alerting */
            readonly formattedMonthlyThreshold?: components["schemas"]["order.Price"];
            /** @description Alerting unique UUID */
            readonly id?: string;
            /** @description Monthly threshold for this alerting */
            monthlyThreshold?: number;
        };
        /** @description Cloud alert on your consumption */
        "cloud.AlertingAlert": {
            /**
             * Format: date-time
             * @description Alert date
             */
            readonly alertDate?: string;
            /** @description Alert id */
            readonly alertId?: number;
            /** @description Alert sent to */
            readonly emails?: string[];
        };
        /**
         * @description Possible values for delay between two alerts in seconds
         * @enum {integer}
         */
        "cloud.AlertingDelayEnum": 3600 | 10800 | 21600 | 43200 | 86400 | 172800 | 259200 | 604800;
        /** @description Details about an available region that can be activated on your project */
        "cloud.AvailableRegion": {
            /** @description Region continent code */
            readonly continentCode?: components["schemas"]["cloud.RegionContinentEnum"];
            /** @description Location of the datacenter where the region is */
            readonly datacenterLocation?: string;
            /** @description Region name */
            readonly name?: string;
            /** @description Region type */
            readonly type?: components["schemas"]["cloud.RegionTypeEnum"];
        };
        /** @description List your automated backups */
        "cloud.Backup": {
            /** @description Backup name */
            readonly backupName?: string;
            /**
             * Format: date-time
             * @description Creation date of the workflow
             */
            readonly createdAt?: string;
            /** @description Workflow cron pattern */
            readonly cron?: string;
            /** @description Executions logs */
            readonly executions?: components["schemas"]["cloud.Execution"][] | null;
            /** @description Workflow id */
            readonly id?: string;
            /** @description Instance id */
            readonly instanceId?: string;
            /** @description Workflow name identifier */
            readonly name?: string;
        };
        /** @description Container */
        "cloud.ColdArchiveContainer": {
            /**
             * Format: date-time
             * @description After restoring your archive, date when the restored files will be deleted
             */
            readonly automaticDeletionAt?: string | null;
            /**
             * Format: date-time
             * @description The date when the resource was created
             */
            readonly createdAt?: string;
            /**
             * Format: date-time
             * @description Archive is locked (cannot be deleted) until this date
             */
            readonly lockedUntil?: string | null;
            /** @description Container name */
            readonly name?: string;
            /** @description Container objects */
            readonly objects?: components["schemas"]["cloud.StorageObject"][];
            /** @description Container total objects count */
            readonly objectsCount?: number;
            /** @description Container total objects size (bytes) */
            readonly objectsSize?: number;
            /** @description Container owner user ID */
            readonly ownerId?: number;
            /** @description ColdArchive status */
            readonly status?: components["schemas"]["cloud.ColdArchiveContainerStatusEnum"];
            /** @description Container virtual host */
            readonly virtualHost?: string;
        };
        /**
         * @description Enum values for Status
         * @enum {string}
         */
        "cloud.ColdArchiveContainerStatusEnum": "archived" | "archiving" | "deleting" | "flushed" | "none" | "restored" | "restoring";
        /** @description Information about the different components available in the region */
        "cloud.Component": {
            /** @description Endpoint URL */
            readonly endpoint?: string;
            /** @description Service name */
            readonly name?: string;
            /** @description Service status */
            readonly status?: components["schemas"]["cloud.ServiceStatusEnum"];
        };
        /** @description Cloud credit */
        "cloud.Credit": {
            /** @description Available credit */
            readonly available_credit?: components["schemas"]["order.Price"];
            /** @description Credit bill id */
            readonly bill?: string | null;
            /** @description Credit description */
            readonly description?: string | null;
            /** @description Credit id */
            readonly id?: number;
            /** @description Use credits on following products */
            readonly products?: string[] | null;
            /** @description Total credit */
            readonly total_credit?: components["schemas"]["order.Price"];
            /** @description Used credit */
            readonly used_credit?: components["schemas"]["order.Price"];
            /** @description Credit validity */
            readonly validity?: components["schemas"]["cloud.common.VoucherValidity"] | null;
            /** @description Voucher code */
            readonly voucher?: string | null;
        };
        /** @description An execution of the backup workflow */
        "cloud.Execution": {
            /**
             * Format: date-time
             * @description Last date of cron trigger execution
             */
            readonly executedAt?: string;
            /** @description Execution ID */
            readonly id?: string;
            /** @description Execution state */
            readonly state?: components["schemas"]["cloud.ExecutionStateEnum"];
            /** @description Information about state */
            readonly stateInfo?: string;
        };
        /**
         * @description Enum values for State
         * @enum {string}
         */
        "cloud.ExecutionStateEnum": "CANCELED" | "ERROR" | "IDLE" | "PAUSED" | "RUNNING" | "SUCCESS";
        /**
         * @description Enum values for IpCountry
         * @enum {string}
         */
        "cloud.IpCountryEnum": "au" | "be" | "ca" | "cz" | "de" | "es" | "fi" | "fr" | "ie" | "it" | "lt" | "nl" | "pl" | "pt" | "sg" | "uk" | "us";
        /** @description A public cloud lab permits to activate a feature in beta */
        "cloud.Lab": {
            /** @description Lab ID */
            readonly id?: string;
            /** @description Lab name */
            readonly name?: string;
            /** @description Lab status */
            readonly status?: components["schemas"]["cloud.LabStatusEnum"];
        };
        /** @description List of required agreements to activate the lab */
        "cloud.LabAgreements": {
            /** @description List of agreements already accepted to activate the lab */
            readonly accepted?: number[];
            /** @description List of agreements to accept before activate the lab */
            readonly toAccept?: number[];
        };
        /**
         * @description Enum values for Status
         * @enum {string}
         */
        "cloud.LabStatusEnum": "activated" | "activating" | "closed" | "open";
        /** @description An operation is an async process on your Project */
        "cloud.Operation": {
            /** @description The action of the operation */
            readonly action?: string;
            /**
             * Format: date-time
             * @description The completed date of the operation
             */
            readonly completedAt?: string | null;
            /**
             * Format: date-time
             * @description The creation date of the operation
             */
            readonly createdAt?: string;
            /** @description Unique ID to describe the operation */
            readonly id?: string;
            /** @description The progression in percentage of the operation */
            readonly progress?: number;
            /** @description Affected regions of the operation */
            readonly regions?: string[] | null;
            /** @description Affected resource of the operation */
            readonly resourceId?: string | null;
            /**
             * Format: date-time
             * @description The started date of the operation
             */
            readonly startedAt?: string | null;
            /** @description Operation status */
            readonly status?: components["schemas"]["cloud.OperationStatusEnum"];
            /** @description Sub-operations of the operation */
            readonly subOperations?: components["schemas"]["cloud.SubOperation"][] | null;
        };
        /**
         * @description Enum values for Status
         * @enum {string}
         */
        "cloud.OperationStatusEnum": "completed" | "created" | "in-error" | "in-progress" | "unknown";
        /** @description Project */
        "cloud.Project": {
            /** @description Project access */
            readonly access?: components["schemas"]["cloud.AccessTypeEnum"];
            /**
             * Format: date-time
             * @description Project creation date
             */
            readonly creationDate?: string;
            /** @description Description of your project */
            description?: string | null;
            /**
             * Format: date-time
             * @description Expiration date of your project. After this date, your project will be deleted
             */
            readonly expiration?: string | null;
            /** @description Manual quota prevent automatic quota upgrade */
            manualQuota?: boolean;
            /** @description Project order id */
            readonly orderId?: number | null;
            /** @description Order plan code */
            readonly planCode?: string;
            /** @description Project name */
            readonly projectName?: string | null;
            /** @description Project id */
            readonly project_id?: string;
            /** @description Current status */
            readonly status?: components["schemas"]["cloud.project.ProjectStatusEnum"];
            /** @description Project unleashed */
            readonly unleash?: boolean;
        };
        /** @description Missing description */
        "cloud.ProjectActivateMonthlyBillingCreation": {
            /** @description Instance ids and regions */
            instances: components["schemas"]["cloud.instance.MonthlyInstanceBulkParams"][];
        };
        /** @description Missing description */
        "cloud.ProjectContainerRegistryCreation": {
            /** @description Name of the new registry */
            name: string;
            /** @description ID of the plan to use for the new registry */
            planID?: string;
            /** @description Region where to deploy the registry.  Get available regions with /cloud/project/{serviceName}/capabilities/containerRegistry. */
            region: string;
        };
        /** @description Missing description */
        "cloud.ProjectContainerRegistryUpdate": {
            /** @description New registry name */
            name: string;
        };
        /** @description Missing description */
        "cloud.ProjectContainerRegistryUsersCreation": {
            /** @description New user email */
            email?: string | null;
            /** @description New user login */
            login?: string | null;
        };
        /** @description Missing description */
        "cloud.ProjectInstanceBulkCreation": {
            /** @description Create an autobackup workflow after instance start up */
            autobackup?: components["schemas"]["cloud.instance.AutoBackup"] | null;
            /** @description Instance flavor id */
            flavorId: string;
            /** @description Start instance in group */
            groupId?: string | null;
            /** @description Instance image id */
            imageId?: string | null;
            /** @description Active monthly billing */
            monthlyBilling?: boolean | null;
            /** @description Instance name */
            name: string;
            /** @description Create network interfaces */
            networks?: components["schemas"]["cloud.instance.NetworkBulkParams"][] | null;
            /** @description Number of instances you want to create */
            number: number;
            /** @description Instance region */
            region: string;
            /** @description SSH keypair id */
            sshKeyId?: string | null;
            /** @description Configuration information or scripts to use upon launch */
            userData?: string | null;
            /** @description Specify a volume id to boot from it */
            volumeId?: string | null;
        };
        /** @description Missing description */
        "cloud.ProjectInstanceCreation": {
            /** @description Create an autobackup workflow after instance start up */
            autobackup?: components["schemas"]["cloud.instance.AutoBackup"] | null;
            /** @description Instance flavor id */
            flavorId: string;
            /** @description Start instance in group */
            groupId?: string | null;
            /** @description Instance image id */
            imageId?: string | null;
            /** @description Active monthly billing */
            monthlyBilling?: boolean | null;
            /** @description Instance name */
            name: string;
            /** @description Create network interfaces */
            networks?: components["schemas"]["cloud.instance.NetworkParams"][] | null;
            /** @description Instance region */
            region: string;
            /** @description SSH keypair id */
            sshKeyId?: string | null;
            /** @description Configuration information or scripts to use upon launch */
            userData?: string | null;
            /** @description Specify a volume id to boot from it */
            volumeId?: string | null;
        };
        /** @description Missing description */
        "cloud.ProjectInstanceGroupCreation": {
            /** @description instance group name */
            name: string;
            /** @description Instance region */
            region: string;
            /** @description Instance group type */
            type: components["schemas"]["cloud.instancegroup.InstanceGroupTypeEnum"];
        };
        /** @description Missing description */
        "cloud.ProjectInstanceInterfaceCreation": {
            /** @description Static ip (Can only be defined for private networks) */
            ip?: components["schemas"]["ip"] | null;
            /** @description Network id */
            networkId: string;
        };
        /** @description Missing description */
        "cloud.ProjectInstanceRebootCreation": {
            /** @description Reboot type (default soft) */
            type: components["schemas"]["cloud.instance.RebootTypeEnum"];
        };
        /** @description Missing description */
        "cloud.ProjectInstanceReinstallCreation": {
            /** @description Image to reinstall */
            imageId: string;
        };
        /** @description Missing description */
        "cloud.ProjectInstanceRescueModeCreation": {
            /** @description Image to boot on */
            imageId?: string | null;
            /** @description Enable rescue mode */
            rescue: boolean;
        };
        /** @description Missing description */
        "cloud.ProjectInstanceResizeCreation": {
            /** @description Flavor id */
            flavorId: string;
        };
        /** @description Missing description */
        "cloud.ProjectInstanceSnapshotCreation": {
            /** @description Snapshot name */
            snapshotName: string;
        };
        /** @description Missing description */
        "cloud.ProjectInstanceUpdate": {
            /** @description Instance new name */
            instanceName: string;
        };
        /** @description Missing description */
        "cloud.ProjectIpFailoverAttachCreation": {
            /** @description Attach failover ip to instance */
            instanceId: string;
        };
        /** @description Missing description */
        "cloud.ProjectKubeCreation": {
            /** @description Kubernetes cluster customization */
            customization?: components["schemas"]["cloud.ProjectKubeCustomization"] | null;
            /** @description Selected mode for kube-proxy */
            kubeProxyMode?: components["schemas"]["cloud.kube.KubeProxyModeEnum"];
            /**
             * Format: uuid
             * @description OpenStack subnet ID that the load balancers will use. Optional, can only be set on cluster creation or reset, can only be set if privateNetworkId and nodesSubnetId are also set
             */
            loadBalancersSubnetId?: string;
            /** @description Kubernetes cluster name */
            name?: string;
            /** @description Nodepool to initialize with cluster creation */
            nodepool?: components["schemas"]["cloud.ProjectKubeCreationNodePool"];
            /** @description OpenStack subnet ID that the cluster nodes will use. Optional, can only be set on cluster creation or reset, can only be set if privateNetworkId is also set. If unspecified, it will be selected automatically when the first node is created. */
            nodesSubnetId?: string;
            /** @description The private network configuration. */
            privateNetworkConfiguration?: components["schemas"]["cloud.kube.PrivateNetworkConfiguration"];
            /** @description OpenStack private network ID that the cluster will use. Optional, can only be set on cluster creation or reset. If unspecified, the cluster will use the public network. */
            privateNetworkId?: string;
            /** @description Kubernetes OpenStack region */
            region: string;
            /** @description Enum values for UpdatePolicy */
            updatePolicy?: components["schemas"]["cloud.kube.UpdatePolicyEnum"] | null;
            /** @description Kubernetes version to install */
            version?: components["schemas"]["cloud.kube.VersionEnum"];
        };
        /** @description Missing description */
        "cloud.ProjectKubeCreationNodePool": {
            /** @description Enable anti affinity groups for nodes in the pool */
            antiAffinity?: boolean | null;
            /** @description Enable the auto-scaling on the pool */
            autoscale?: boolean | null;
            /** @description Number of nodes to instantiate (1 by default) */
            desiredNodes?: number;
            /** @description Nodes flavor */
            flavorName?: string;
            /** @description Higher limit you accept for the desiredNodes value (100 by default) */
            maxNodes?: number;
            /** @description Lower limit you accept for the desiredNodes value (0 by default) */
            minNodes?: number;
            /** @description Enable monthly billing for nodes in the pool */
            monthlyBilled?: boolean | null;
            /** @description NodePool name */
            name?: string;
            /** @description NodePool template to apply to each children nodes */
            template?: components["schemas"]["cloud.kube.NodePoolTemplate"];
        };
        /** @description Cluster customization */
        "cloud.ProjectKubeCustomization": {
            /** @description Kubernetes cluster api server customization */
            apiServer?: components["schemas"]["cloud.ProjectKubeCustomizationAPIServer"] | null;
            /** @description Kubernetes cluster kube-proxy customization */
            kubeProxy?: components["schemas"]["cloud.ProjectKubeCustomizationKubeProxy"] | null;
        };
        /** @description Cluster API server customization */
        "cloud.ProjectKubeCustomizationAPIServer": {
            /** @description Kubernetes cluster api server admission plugins customization */
            admissionPlugins?: components["schemas"]["cloud.ProjectKubeCustomizationAPIServerAdmissionPlugins"] | null;
        };
        /** @description Cluster API server admission plugins customization */
        "cloud.ProjectKubeCustomizationAPIServerAdmissionPlugins": {
            /** @description Array of disabled admission plugins */
            disabled?: components["schemas"]["cloud.ProjectKubeCustomizationAPIServerAdmissionPluginsEnum"][] | null;
            /** @description Array of enabled admission plugins */
            enabled?: components["schemas"]["cloud.ProjectKubeCustomizationAPIServerAdmissionPluginsEnum"][] | null;
        };
        /**
         * @description Enum admission plugins
         * @enum {string}
         */
        "cloud.ProjectKubeCustomizationAPIServerAdmissionPluginsEnum": "AlwaysPullImages" | "NodeRestriction";
        /** @description Cluster kube-proxy customization: iptables and ipvs configurations can both be set at the same time, kube-proxy will use the one according to the cluster's kubeProxyMode value */
        "cloud.ProjectKubeCustomizationKubeProxy": {
            /** @description Kubernetes cluster kube-proxy customization of iptables specific config (durations format is RFC3339 duration, e.g. 'PT60S') */
            iptables?: components["schemas"]["cloud.ProjectKubeCustomizationKubeProxyIptables"] | null;
            /** @description Kubernetes cluster kube-proxy customization of ipvs specific config (durations format is RFC3339 duration, e.g. 'PT60S') */
            ipvs?: components["schemas"]["cloud.ProjectKubeCustomizationKubeProxyIpvs"] | null;
        };
        /** @description Configuration used when kube-proxy is configured with iptables mode (durations format is RFC3339 duration, e.g. 'PT60S') */
        "cloud.ProjectKubeCustomizationKubeProxyIptables": {
            /**
             * Format: duration
             * @description minSyncPeriod is the minimum period that iptables rules are refreshed, in RFC3339 duration format (e.g. 'PT60S')
             */
            minSyncPeriod?: string | null;
            /**
             * Format: duration
             * @description syncPeriod is the period that iptables rules are refreshed, in RFC3339 duration format (e.g. 'PT60S'). Must be greater than 0
             */
            syncPeriod?: string | null;
        };
        /** @description Configuration used when kube-proxy is configured with ipvs mode (durations format is RFC3339 duration, e.g. 'PT60S') */
        "cloud.ProjectKubeCustomizationKubeProxyIpvs": {
            /**
             * Format: duration
             * @description minSyncPeriod is the minimum period that ipvs rules are refreshed in RFC3339 duration format (e.g. 'PT60S')
             */
            minSyncPeriod?: string | null;
            /** @description ipvs scheduler */
            scheduler?: components["schemas"]["cloud.kube.KubeProxyIpvsSchedulerEnum"] | null;
            /**
             * Format: duration
             * @description syncPeriod is the period that ipvs rules are refreshed in RFC3339 duration format (e.g. 'PT60S'). Must be greater than 0
             */
            syncPeriod?: string | null;
            /**
             * Format: duration
             * @description tcpFinTimeout is the timeout value used for IPVS TCP sessions after receiving a FIN in RFC3339 duration format (e.g. 'PT60S'). The default value is 'PT0S', which preserves the current timeout value on the system
             */
            tcpFinTimeout?: string | null;
            /**
             * Format: duration
             * @description tcpTimeout is the timeout value used for idle IPVS TCP sessions in RFC3339 duration format (e.g. 'PT60S'). The default value is 'PT0S', which preserves the current timeout value on the system. Cannot be set between 'PT0S' and 'PT5S', in order to prevent in-cluster networking issues.
             */
            tcpTimeout?: string | null;
            /**
             * Format: duration
             * @description udpTimeout is the timeout value used for IPVS UDP packets in RFC3339 duration format (e.g. 'PT60S'). The default value is 'PT0S', which preserves the current timeout value on the system
             */
            udpTimeout?: string | null;
        };
        /** @description Missing description */
        "cloud.ProjectKubeIpRestrictionUpsert": {
            /** @description List of ips to add to the cluster api-server restrictions (format with /subnet available) */
            ips?: components["schemas"]["ipBlock"][];
        };
        /** @description Missing description */
        "cloud.ProjectKubeNodePoolAutoscalingParams": {
            /** @description How long a node should be unneeded before it is eligible for scale down */
            scaleDownUnneededTimeSeconds?: number;
            /** @description How long an unready node should be unneeded before it is eligible for scale down */
            scaleDownUnreadyTimeSeconds?: number;
            /** @description Sum of cpu or memory of all pods running on the node divided by node's corresponding allocatable resource, below which a node can be considered for scale down */
            scaleDownUtilizationThreshold?: number;
        };
        /** @description Missing description */
        "cloud.ProjectKubeNodePoolCreation": {
            /** @description Enable anti affinity groups for nodes in the pool */
            antiAffinity?: boolean | null;
            /** @description Enable the auto-scaling on the pool */
            autoscale?: boolean | null;
            /** @description Autoscaling customization parameters */
            autoscaling?: components["schemas"]["cloud.ProjectKubeNodePoolAutoscalingParams"];
            /** @description Number of nodes to instantiate (1 by default) */
            desiredNodes?: number;
            /** @description Nodes flavor */
            flavorName: string;
            /** @description Higher limit you accept for the desiredNodes value (100 by default) */
            maxNodes?: number;
            /** @description Lower limit you accept for the desiredNodes value (0 by default) */
            minNodes?: number;
            /** @description Enable monthly billing for nodes in the pool */
            monthlyBilled?: boolean | null;
            /** @description NodePool name */
            name?: string;
            /** @description NodePool template to apply to each children nodes */
            template?: components["schemas"]["cloud.kube.NodePoolTemplate"];
        };
        /** @description Missing description */
        "cloud.ProjectKubeNodePoolUpdate": {
            /** @description Enable the auto-scaling on the pool */
            autoscale?: boolean | null;
            /** @description Autoscaling customization parameters */
            autoscaling?: components["schemas"]["cloud.ProjectKubeNodePoolAutoscalingParams"];
            /** @description New number of nodes wanted in the nodepool */
            desiredNodes?: number;
            /** @description New maximal number of nodes wanted in the nodepool */
            maxNodes?: number;
            /** @description New minimal number of nodes wanted in the nodepool */
            minNodes?: number;
            /** @description List of specific node IDs, openstack instance IDs or Node.Spec.providerIDs to delete during downscale */
            nodesToRemove?: string[];
            /** @description NodePool template to apply to each children nodes */
            template?: components["schemas"]["cloud.kube.NodePoolTemplate"];
        };
        /** @description Creation model for OIDC */
        "cloud.ProjectKubeOpenIdConnectCreation": {
            /** @description Content of the certificate for the CA, in base64 format, that signed your identity provider's web certificate. Defaults to the host's root CAs. */
            caContent?: string | null;
            /** @description Client ID */
            clientId: string;
            /** @description JWT claim to use as the user's group. If the claim is present it must be an array of strings. */
            groupsClaim?: string[] | null;
            /** @description Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra. */
            groupsPrefix?: string | null;
            /** @description Issuer URL */
            issuerUrl: string;
            /** @description key=value pairs that describe required claims in the ID Token. If set, the claims are verified to be present in the ID Token with a matching value. */
            requiredClaim?: string[] | null;
            /** @description The signing algorithms accepted. Default is "RS256". */
            signingAlgorithms?: components["schemas"]["cloud.kube.OpenIdConnectSigningAlgorithmsEnum"][] | null;
            /** @description JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end user. Admins can choose other claims, such as email or name, depending on their provider. However, claims other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins. */
            usernameClaim?: string | null;
            /** @description Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the value oidc: will create usernames like oidc:jane.doe. If this field isn't set and oidcUsernameClaim is a value other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of oidcIssuerUrl. The value - can be used to disable all prefixing. */
            usernamePrefix?: string | null;
        };
        /** @description Update model for OIDC */
        "cloud.ProjectKubeOpenIdConnectUpdate": {
            /** @description Content of the certificate for the CA, in base64 format, that signed your identity provider's web certificate. Defaults to the host's root CAs. */
            caContent?: string | null;
            /** @description Client ID */
            clientId?: string;
            /** @description JWT claim to use as the user's group. If the claim is present it must be an array of strings. */
            groupsClaim?: string[] | null;
            /** @description Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra. */
            groupsPrefix?: string | null;
            /** @description Issuer URL */
            issuerUrl?: string;
            /** @description key=value pairs that describe required claims in the ID Token. If set, the claims are verified to be present in the ID Token with a matching value. */
            requiredClaim?: string[] | null;
            /** @description The signing algorithms accepted. Default is "RS256". */
            signingAlgorithms?: components["schemas"]["cloud.kube.OpenIdConnectSigningAlgorithmsEnum"][] | null;
            /** @description JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end user. Admins can choose other claims, such as email or name, depending on their provider. However, claims other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins. */
            usernameClaim?: string | null;
            /** @description Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the value oidc: will create usernames like oidc:jane.doe. If this field isn't set and oidcUsernameClaim is a value other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of oidcIssuerUrl. The value - can be used to disable all prefixing. */
            usernamePrefix?: string | null;
        };
        /** @description Model object to reset kube cluster */
        "cloud.ProjectKubeResetCreation": {
            /** @description Kubernetes cluster customization */
            customization?: components["schemas"]["cloud.ProjectKubeCustomization"];
            /** @description Selected mode for kube-proxy */
            kubeProxyMode?: components["schemas"]["cloud.kube.KubeProxyModeEnum"];
            /**
             * Format: uuid
             * @description OpenStack subnet ID that the load balancers will use. Optional, can only be set on cluster creation or reset, can only be set if privateNetworkId and nodesSubnetId are also set
             */
            loadBalancersSubnetId?: string;
            /** @description New cluster name */
            name?: string;
            /** @description OpenStack subnet ID that the cluster nodes will use. Optional, can only be set on cluster creation or reset, can only be set if privateNetworkId is also set. If unspecified, it will be selected automatically when the first node is created. */
            nodesSubnetId?: string;
            /** @description The private network configuration. */
            privateNetworkConfiguration?: components["schemas"]["cloud.kube.PrivateNetworkConfiguration"];
            /** @description OpenStack private network ID that the cluster will use. Optional, can only be set on cluster creation or reset. If unspecified, the cluster will use the public network. */
            privateNetworkId?: string;
            /** @description Enum values for UpdatePolicy */
            updatePolicy?: components["schemas"]["cloud.kube.UpdatePolicyEnum"];
            /** @description Kubernetes version to use after reset, by default it keeps the current version */
            version?: components["schemas"]["cloud.kube.VersionEnum"];
            /** @description Worker nodes reset policy, default is delete */
            workerNodesPolicy?: components["schemas"]["cloud.kube.ResetWorkerNodesPolicyEnum"];
        };
        /** @description Missing description */
        "cloud.ProjectKubeRestart": {
            /** @description Force restarting control plane apiserver (will create a slight downtime) */
            force?: boolean | null;
        };
        /** @description Missing description */
        "cloud.ProjectKubeUpdate": {
            /** @description Cluster new name */
            name?: string;
            /** @description Enum values for UpdatePolicy */
            updatePolicy?: components["schemas"]["cloud.kube.UpdatePolicyEnum"];
        };
        /** @description Missing description */
        "cloud.ProjectKubeUpdateCreation": {
            /** @description Force redeploying the control plane / reinstalling the nodes regardless of their current version */
            force?: boolean | null;
            /** @description The update strategy to apply on your service (next patch or minor version) */
            strategy?: components["schemas"]["cloud.kube.UpdateStrategyEnum"];
        };
        /** @description Model object to update loadBalancersSubnetId property of a kube cluster */
        "cloud.ProjectKubeUpdateLoadBalancersSubnetId": {
            /**
             * Format: uuid
             * @description OpenStack subnet ID that the load balancers will use
             */
            loadBalancersSubnetId: string;
        };
        /** @description Missing description */
        "cloud.ProjectKubeUpdatePolicyUpdate": {
            /** @description Update policy */
            updatePolicy: components["schemas"]["cloud.kube.UpdatePolicyEnum"];
        };
        /** @description Missing description */
        "cloud.ProjectMigrationUpdate": {
            /**
             * Format: date-time
             * @description Migration date (RFC3339)
             */
            date: string;
        };
        /** @description Missing description */
        "cloud.ProjectNetworkPrivateCreation": {
            /** @description Network name */
            name: string;
            /** @description Region where to activate private network. No parameters means all region */
            regions?: string[] | null;
            /** @description Vland id, between 0 and 4000. 0 value means no vlan. */
            vlanId?: number | null;
        };
        /** @description Missing description */
        "cloud.ProjectNetworkPrivateRegionCreation": {
            /** @description Region to active on your network */
            region: string;
        };
        /** @description Missing description */
        "cloud.ProjectNetworkPrivateSubnetCreation": {
            /** @description Enable DHCP */
            dhcp: boolean;
            /** @description Last IP for this region (eg: 192.168.1.24) */
            end: components["schemas"]["ip"];
            /** @description Global network with cidr (eg: 192.168.1.0/24) */
            network: components["schemas"]["ipBlock"];
            /** @description Set to true if you don't want to set a default gateway IP */
            noGateway: boolean;
            /** @description Region where this subnet will be created */
            region: string;
            /** @description First IP for this region (eg: 192.168.1.12) */
            start: components["schemas"]["ip"];
        };
        /** @description Missing description */
        "cloud.ProjectNetworkPrivateSubnetUpdate": {
            /** @description Set to true if you don't want to set a default gateway IP */
            dhcp: boolean;
            /** @description Set to true if you want to disable the default gateway */
            disableGateway: boolean;
            /** @description Gateway IP (this field is used if noGateway = false) */
            gatewayIp?: string | null;
        };
        /** @description Missing description */
        "cloud.ProjectNetworkPrivateUpdate": {
            /** @description name */
            name: string;
        };
        /** @description Missing description */
        "cloud.ProjectRegionCreation": {
            /** @description Region to add on your project */
            region: string;
        };
        /** @description Missing description */
        "cloud.ProjectRegionQuotaCreation": {
            /** @description Name of the new quota */
            name: string;
        };
        /** @description Missing description */
        "cloud.ProjectRegionWorkflowBackupCreation": {
            /** @description Unix Cron pattern (eg: '* * * * *') */
            cron: string;
            /** @description Instance ID to backup */
            instanceId: string;
            /** @description Number of execution to process before ending the job. Null value means that the job will never end. */
            maxExecutionCount?: number | null;
            /** @description Name of your backup job */
            name: string;
            /** @description Number of backup to keep */
            rotation: number;
        };
        /** @description Missing description */
        "cloud.ProjectSshkeyCreation": {
            /** @description SSH key name */
            name: string;
            /** @description SSH public key */
            publicKey: string;
            /** @description Region to create SSH key */
            region?: string | null;
        };
        /** @description Missing description */
        "cloud.ProjectStorageCorsCreation": {
            /** @description Allow this origin */
            origin: string;
        };
        /** @description Missing description */
        "cloud.ProjectStorageCreation": {
            /** @description Archive container flag */
            archive: boolean;
            /** @description Container name */
            containerName: string;
            /** @description Region */
            region: string;
        };
        /** @description Missing description */
        "cloud.ProjectStoragePublicUrlCreation": {
            /**
             * Format: date-time
             * @description Temporary URL expiration
             */
            expirationDate: string;
            /** @description Object name */
            objectName: string;
        };
        /** @description Missing description */
        "cloud.ProjectStorageUpdate": {
            /** @description Container type */
            containerType?: components["schemas"]["cloud.storage.TypeEnum"] | null;
        };
        /** @description Missing description */
        "cloud.ProjectStorageUserCreation": {
            /** @description User description */
            description?: string | null;
            /** @description User right (all, read, write) */
            right: components["schemas"]["cloud.storage.RightEnum"];
        };
        /** @description Missing description */
        "cloud.ProjectUserCreation": {
            /** @description User description */
            description?: string | null;
            /** @description Openstack keystone role name */
            role?: components["schemas"]["cloud.user.RoleEnum"] | null;
            /** @description Openstack keystone roles names */
            roles?: components["schemas"]["cloud.user.RoleEnum"][] | null;
        };
        /** @description Missing description */
        "cloud.ProjectUserRoleCreation": {
            /** @description Role id */
            roleId: string;
        };
        /** @description Missing description */
        "cloud.ProjectUserRoleUpdate": {
            /** @description Roles ids */
            rolesIds: string[];
        };
        /** @description Missing description */
        "cloud.ProjectUserTokenCreation": {
            /**
             * Format: password
             * @description User password
             */
            password: string;
        };
        /** @description Missing description */
        "cloud.ProjectVolumeAttachCreation": {
            /** @description Instance id */
            instanceId: string;
        };
        /** @description Missing description */
        "cloud.ProjectVolumeCreation": {
            /** @description Volume description */
            description?: string | null;
            /** @description Id of image to create a bootable volume */
            imageId?: string | null;
            /** @description Volume name */
            name?: string | null;
            /** @description Volume region */
            region: string;
            /** @description Volume size (in GiB) */
            size: number;
            /** @description Source snapshot id */
            snapshotId?: string | null;
            /** @description Volume type */
            type: components["schemas"]["cloud.volume.VolumeTypeEnum"];
        };
        /** @description Missing description */
        "cloud.ProjectVolumeDetachCreation": {
            /** @description Instance id */
            instanceId: string;
        };
        /** @description Missing description */
        "cloud.ProjectVolumeSnapshotCreation": {
            /** @description Snapshot description */
            description?: string | null;
            /** @description Snapshot name */
            name?: string | null;
        };
        /** @description Missing description */
        "cloud.ProjectVolumeUpdate": {
            /** @description Volume description */
            description?: string | null;
            /** @description Volume name */
            name?: string | null;
        };
        /** @description Missing description */
        "cloud.ProjectVolumeUpsizeCreation": {
            /** @description New volume size (in GiB) (must be greater than current one) */
            size: number;
        };
        /** @description Project */
        "cloud.ProjectWithIAM": {
            /** @description Project access */
            readonly access?: components["schemas"]["cloud.AccessTypeEnum"];
            /**
             * Format: date-time
             * @description Project creation date
             */
            readonly creationDate?: string;
            /** @description Description of your project */
            description?: string | null;
            /**
             * Format: date-time
             * @description Expiration date of your project. After this date, your project will be deleted
             */
            readonly expiration?: string | null;
            /** @description IAM resource metadata */
            readonly iam?: components["schemas"]["iam.ResourceMetadata"] | null;
            /** @description Manual quota prevent automatic quota upgrade */
            manualQuota?: boolean;
            /** @description Project order id */
            readonly orderId?: number | null;
            /** @description Order plan code */
            readonly planCode?: string;
            /** @description Project name */
            readonly projectName?: string | null;
            /** @description Project id */
            readonly project_id?: string;
            /** @description Current status */
            readonly status?: components["schemas"]["cloud.project.ProjectStatusEnum"];
            /** @description Project unleashed */
            readonly unleash?: boolean;
        };
        /** @description Details about your region */
        "cloud.Region": {
            /** @description Region continent code */
            readonly continentCode?: components["schemas"]["cloud.RegionContinentEnum"];
            /** @description Location of the datacenter where the region is */
            readonly datacenterLocation?: string;
            /** @description Allowed countries for failover ip */
            readonly ipCountries?: components["schemas"]["cloud.IpCountryEnum"][];
            /** @description Region name */
            readonly name?: string;
            /** @description Details about components status */
            readonly services?: components["schemas"]["cloud.Component"][];
            /** @description Openstack region status */
            readonly status?: components["schemas"]["cloud.RegionStatusEnum"];
            /** @description Region type */
            readonly type?: components["schemas"]["cloud.RegionTypeEnum"];
        };
        /**
         * @description Enum values for ContinentCode
         * @enum {string}
         */
        "cloud.RegionContinentEnum": "ASIA" | "EU" | "NA" | "US";
        /**
         * @description Enum values for Status
         * @enum {string}
         */
        "cloud.RegionStatusEnum": "DOWN" | "MAINTENANCE" | "UP";
        /**
         * @description Enum values for region type
         * @enum {string}
         */
        "cloud.RegionTypeEnum": "localzone" | "region";
        /**
         * @description Enum values for Status
         * @enum {string}
         */
        "cloud.ServiceStatusEnum": "DOWN" | "UP";
        /** @description Container */
        "cloud.StorageContainer": {
            /**
             * Format: date-time
             * @description The date and timestamp when the resource was created
             */
            readonly createdAt?: string;
            /** @description Encryption configuration */
            encryption?: components["schemas"]["cloud.StorageEncryptionObject"] | null;
            /** @description Container name */
            readonly name?: string;
            /** @description Container objects */
            readonly objects?: components["schemas"]["cloud.StorageObject"][];
            /** @description Container total objects count */
            readonly objectsCount?: number;
            /** @description Container total objects size (bytes) */
            readonly objectsSize?: number;
            /** @description Container owner user ID */
            readonly ownerId?: number;
            /** @description Container region */
            readonly region?: string;
            /** @description Versioning configuration */
            versioning?: components["schemas"]["cloud.StorageVersioningObject"] | null;
            /** @description Container virtual host */
            readonly virtualHost?: string;
        };
        /** @description Create a container */
        "cloud.StorageContainerCreation": {
            /** @description Encryption configuration */
            encryption?: components["schemas"]["cloud.StorageEncryptionObject"] | null;
            /** @description Container name */
            name: string;
            /** @description Container owner user ID */
            ownerId?: number | null;
            /** @description Versioning configuration */
            versioning?: components["schemas"]["cloud.StorageVersioningObject"] | null;
        };
        /** @description Object */
        "cloud.StorageEncryptionObject": {
            /** @description Encryption algorithm */
            sseAlgorithm?: components["schemas"]["cloud.storage.EncryptionAlgorithmEnum"] | null;
        };
        /** @description Object */
        "cloud.StorageObject": {
            /** @description ETag */
            readonly etag?: string;
            /** @description Key */
            readonly key?: string;
            /**
             * Format: date-time
             * @description Last modification date
             */
            readonly lastModified?: string;
            /** @description Size (bytes) */
            readonly size?: number;
            /** @description Storage class */
            readonly storageClass?: components["schemas"]["cloud.storage.StorageClassEnum"];
        };
        /** @description Object */
        "cloud.StorageVersioningObject": {
            /** @description Versioning status */
            status?: components["schemas"]["cloud.storage.VersioningStatusEnum"] | null;
        };
        /** @description A sub-operation is a child of an operation on your Project */
        "cloud.SubOperation": {
            /** @description The action of the sub-operation */
            readonly action?: string;
            /**
             * Format: date-time
             * @description The completed date of the sub-operation
             */
            readonly completedAt?: string | null;
            /** @description Unique ID to describe the sub-operation */
            readonly id?: string;
            /** @description The progression in percentage of the sub-operation */
            readonly progress?: number;
            /** @description Affected regions of the sub-operation */
            readonly regions?: string[] | null;
            /** @description Affected resource of the sub-operation */
            readonly resourceId?: string | null;
            /**
             * Format: date-time
             * @description The started date of the sub-operation
             */
            readonly startedAt?: string | null;
            /** @description Sub-operation status */
            readonly status?: components["schemas"]["cloud.OperationStatusEnum"];
        };
        /** @description A vRack allows to connect your OVH infrastructures accross products and datacenters */
        "cloud.Vrack": {
            /** @description Description of your vRack */
            readonly description?: string;
            /** @description Vrack ID */
            readonly id?: string;
            /** @description Name of your vRack */
            readonly name?: string;
        };
        /** @description Catalog */
        "cloud.authentication.Catalog": {
            readonly endpoints?: components["schemas"]["cloud.authentication.Endpoint"][];
            readonly id?: string;
            readonly type?: string;
        };
        /** @description Domain */
        "cloud.authentication.Domain": {
            readonly name?: string;
        };
        /** @description Endpoint */
        "cloud.authentication.Endpoint": {
            readonly id?: string;
            readonly interface?: string;
            readonly legacy_endpoint_id?: string;
            readonly region_id?: string;
            readonly service_id?: string;
            readonly url?: string;
        };
        /** @description OpenstackToken */
        "cloud.authentication.OpenstackToken": {
            readonly catalog?: components["schemas"]["cloud.authentication.Catalog"][];
            /** Format: date-time */
            readonly expires_at?: string;
            /** Format: date-time */
            readonly issued_at?: string;
            readonly methods?: string[];
            readonly project?: components["schemas"]["cloud.authentication.TokenProject"];
            readonly roles?: components["schemas"]["cloud.authentication.Role"][];
            readonly user?: components["schemas"]["cloud.authentication.UserToken"];
        };
        /** @description Role */
        "cloud.authentication.Role": {
            readonly id?: string;
            readonly name?: string;
        };
        /** @description Token */
        "cloud.authentication.Token": {
            readonly "X-Auth-Token"?: string;
            readonly token?: components["schemas"]["cloud.authentication.OpenstackToken"];
        };
        /** @description TokenProject */
        "cloud.authentication.TokenProject": {
            readonly domain?: components["schemas"]["cloud.authentication.Domain"];
            readonly id?: string;
            readonly name?: string;
        };
        /** @description UserToken */
        "cloud.authentication.UserToken": {
            readonly domain?: components["schemas"]["cloud.authentication.Domain"];
            readonly id?: string;
            readonly name?: string;
        };
        /** @description BandwidthInstance */
        "cloud.billingView.BandwidthInstance": {
            /** @description Total bandwidth in GiB */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description BandwidthStorage */
        "cloud.billingView.BandwidthStorage": {
            /** @description Total bandwidth in GiB */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description Component */
        "cloud.billingView.Component": {
            /** @description Name of the component */
            readonly name?: string;
            /** @description Total quantity for the component */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Total price for this component */
            readonly totalPrice?: number;
        };
        /** @description HourlyInstance */
        "cloud.billingView.HourlyInstance": {
            /** @description Details about hourly instances */
            readonly details?: components["schemas"]["cloud.billingView.HourlyInstanceDetail"][];
            /** @description Hours of run instances */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Instance reference */
            readonly reference?: string;
            /** @description Instance region */
            readonly region?: string;
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description HourlyInstanceBandwidth */
        "cloud.billingView.HourlyInstanceBandwidth": {
            /** @description Instance incoming bandwidth details */
            readonly incomingBandwidth?: components["schemas"]["cloud.billingView.BandwidthInstance"] | null;
            /** @description Instance outgoing bandwidth details */
            readonly outgoingBandwidth?: components["schemas"]["cloud.billingView.BandwidthInstance"] | null;
            /** @description Region */
            readonly region?: string;
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description HourlyInstanceDetail */
        "cloud.billingView.HourlyInstanceDetail": {
            /** @description Instance ID */
            readonly instanceId?: string;
            /** @description Hours of run instances */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description HourlyInstanceOption */
        "cloud.billingView.HourlyInstanceOption": {
            /** @description Details about hourly instances option */
            readonly details?: components["schemas"]["cloud.billingView.HourlyInstanceOptionDetail"][];
            /** @description Quantity of instance hours running with this option */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Instance reference */
            readonly reference?: string;
            /** @description Instance region */
            readonly region?: string;
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description HourlyInstanceOptionDetail */
        "cloud.billingView.HourlyInstanceOptionDetail": {
            /** @description Instance ID */
            readonly instanceId?: string;
            /** @description Quantity of instance hours running with this option */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description HourlyResources */
        "cloud.billingView.HourlyResources": {
            /** @description Details about hourly instances */
            readonly instance?: components["schemas"]["cloud.billingView.HourlyInstance"][];
            /** @description Details about instances bandwidth consumption */
            readonly instanceBandwidth?: components["schemas"]["cloud.billingView.HourlyInstanceBandwidth"][];
            /** @description Details about hourly instances options */
            readonly instanceOption?: components["schemas"]["cloud.billingView.HourlyInstanceOption"][];
            /** @description Details about hourly snapshots */
            readonly snapshot?: components["schemas"]["cloud.billingView.HourlySnapshot"][];
            /** @description Details about hourly storage */
            readonly storage?: components["schemas"]["cloud.billingView.HourlyStorage"][];
            /** @description Details about hourly volumes */
            readonly volume?: components["schemas"]["cloud.billingView.HourlyVolume"][];
        };
        /** @description HourlySnapshot */
        "cloud.billingView.HourlySnapshot": {
            /** @description Instance snapshot details */
            readonly instance?: components["schemas"]["cloud.billingView.InstanceSnapshot"] | null;
            /** @description Region */
            readonly region?: string;
            /** @description Total price */
            readonly totalPrice?: number;
            /** @description Volume snapshot details */
            readonly volume?: components["schemas"]["cloud.billingView.VolumeSnapshot"] | null;
        };
        /** @description HourlyStorage */
        "cloud.billingView.HourlyStorage": {
            /** @description Bucket Name */
            readonly bucketName?: string | null;
            /** @description Storage incoming bandwidth details */
            readonly incomingBandwidth?: components["schemas"]["cloud.billingView.BandwidthStorage"] | null;
            /** @description Storage incoming internal bandwidth details */
            readonly incomingInternalBandwidth?: components["schemas"]["cloud.billingView.BandwidthStorage"] | null;
            /** @description Storage outgoing bandwidth details */
            readonly outgoingBandwidth?: components["schemas"]["cloud.billingView.BandwidthStorage"] | null;
            /** @description Storage outgoing internal bandwidth details */
            readonly outgoingInternalBandwidth?: components["schemas"]["cloud.billingView.BandwidthStorage"] | null;
            /** @description Region */
            readonly region?: string;
            /** @description Information about stored data */
            readonly stored?: components["schemas"]["cloud.billingView.StoredStorage"] | null;
            /** @description Total price */
            readonly totalPrice?: number;
            /** @description Storage type */
            readonly type?: components["schemas"]["cloud.billingView.StorageTypeEnum"];
        };
        /** @description HourlyVolume */
        "cloud.billingView.HourlyVolume": {
            /** @description Detail about volume consumption */
            readonly details?: components["schemas"]["cloud.billingView.HourlyVolumeDetail"][];
            /** @description Total GiBh of volume */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Region */
            readonly region?: string;
            /** @description Total price */
            readonly totalPrice?: number;
            /** @description Volume type */
            readonly type?: string;
        };
        /** @description HourlyVolumeDetail */
        "cloud.billingView.HourlyVolumeDetail": {
            /** @description GiBh of volume */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Total price */
            readonly totalPrice?: number;
            /** @description Volume ID */
            readonly volumeId?: string;
        };
        /** @description InstanceSnapshot */
        "cloud.billingView.InstanceSnapshot": {
            /** @description GiBh stored */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description MonthlyCertification */
        "cloud.billingView.MonthlyCertification": {
            /** @description Details about certifications */
            readonly details?: components["schemas"]["cloud.billingView.MonthlyCertificationDetail"][];
            /** @description Certification reference */
            readonly reference?: string;
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description MonthlyCertificationDetail */
        "cloud.billingView.MonthlyCertificationDetail": {
            /**
             * Format: date-time
             * @description Certification activation
             */
            readonly activation?: string;
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description MonthlyInstance */
        "cloud.billingView.MonthlyInstance": {
            /** @description Details about monthly instances */
            readonly details?: components["schemas"]["cloud.billingView.MonthlyInstanceDetail"][];
            /** @description Instance reference */
            readonly reference?: string;
            /** @description Instance region */
            readonly region?: string;
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description MonthlyInstanceDetail */
        "cloud.billingView.MonthlyInstanceDetail": {
            /**
             * Format: date-time
             * @description Monthly instance activation
             */
            readonly activation?: string;
            /** @description Instance ID */
            readonly instanceId?: string;
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description MonthlyInstanceOption */
        "cloud.billingView.MonthlyInstanceOption": {
            /** @description Details about monthly instances */
            readonly details?: components["schemas"]["cloud.billingView.MonthlyInstanceOptionDetail"][];
            /** @description Instance reference */
            readonly reference?: string;
            /** @description Instance region */
            readonly region?: string;
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description MonthlyInstanceOptionDetail */
        "cloud.billingView.MonthlyInstanceOptionDetail": {
            /** @description Instance ID */
            readonly instanceId?: string;
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description MonthlyResources */
        "cloud.billingView.MonthlyResources": {
            /** @description Details about certifications */
            readonly certification?: components["schemas"]["cloud.billingView.MonthlyCertification"][] | null;
            /** @description Details about monthly instances */
            readonly instance?: components["schemas"]["cloud.billingView.MonthlyInstance"][];
            /** @description Details about monthly instances options */
            readonly instanceOption?: components["schemas"]["cloud.billingView.MonthlyInstanceOption"][];
        };
        /** @description Quantity */
        "cloud.billingView.Quantity": {
            /** @description Quantity unit */
            readonly unit?: components["schemas"]["cloud.billingView.UnitQuantityEnum"];
            /** @description Quantity value */
            readonly value?: number;
        };
        /** @description RegionalizedResource */
        "cloud.billingView.RegionalizedResource": {
            /** @description List of components */
            readonly components?: components["schemas"]["cloud.billingView.Component"][];
            /** @description Region of the resource */
            readonly region?: string;
        };
        /**
         * @description StorageTypeEnum
         * @enum {string}
         */
        "cloud.billingView.StorageTypeEnum": "pca" | "pcs" | "storage-coldarchive" | "storage-high-perf" | "storage-standard";
        /** @description StoredStorage */
        "cloud.billingView.StoredStorage": {
            /** @description GiBh stored */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description TypedResources */
        "cloud.billingView.TypedResources": {
            /** @description Resources per region */
            readonly resources?: components["schemas"]["cloud.billingView.RegionalizedResource"][];
            /** @description Total price */
            readonly totalPrice?: number;
            /** @description Type of the resources */
            readonly type?: string;
        };
        /**
         * @description UnitQuantity
         * @enum {string}
         */
        "cloud.billingView.UnitQuantityEnum": "GiB" | "GiBh" | "Hour" | "Minute" | "Second" | "Unit";
        /** @description UsedCredit */
        "cloud.billingView.UsedCredit": {
            /** @description Credit description */
            readonly description?: string;
            /** @description Credit ID */
            readonly id?: number;
            /** @description Total credit used */
            readonly usedAmount?: number;
        };
        /** @description UsedCredits */
        "cloud.billingView.UsedCredits": {
            /** @description Details about credits that will be used */
            readonly details?: components["schemas"]["cloud.billingView.UsedCredit"][];
            /** @description Total credit that will be used to pay the bill */
            readonly totalCredit?: number;
        };
        /** @description VolumeSnapshot */
        "cloud.billingView.VolumeSnapshot": {
            /** @description GiBh stored */
            readonly quantity?: components["schemas"]["cloud.billingView.Quantity"];
            /** @description Total price */
            readonly totalPrice?: number;
        };
        /** @description Public Cloud products availability */
        "cloud.capabilities.Availability": {
            /** @description Plan availability */
            readonly plans?: components["schemas"]["cloud.capabilities.AvailabilityPlan"][];
            /** @description Product availability */
            readonly products?: components["schemas"]["cloud.capabilities.AvailabilityProduct"][];
        };
        /** @description Public Cloud plan availability */
        "cloud.capabilities.AvailabilityPlan": {
            /** @description Plan code */
            readonly code?: string;
            /** @description Plan is available on those regions */
            readonly regions?: components["schemas"]["cloud.capabilities.AvailabilityRegion"][];
        };
        /** @description Public Cloud product availability */
        "cloud.capabilities.AvailabilityProduct": {
            /** @description Product name */
            readonly name?: string;
            /** @description Product is available on those regions */
            readonly regions?: components["schemas"]["cloud.capabilities.AvailabilityRegion"][];
        };
        /** @description Details about a region */
        "cloud.capabilities.AvailabilityRegion": {
            /** @description Region continent code */
            readonly continentCode?: components["schemas"]["cloud.RegionContinentEnum"];
            /** @description Location of the datacenter where the region is */
            readonly datacenter?: string;
            /** @description Region is enabled */
            readonly enabled?: boolean;
            /** @description Region name */
            readonly name?: string;
            /** @description Region type */
            readonly type?: components["schemas"]["cloud.RegionTypeEnum"];
        };
        /** @description Voucher validity range */
        "cloud.common.VoucherValidity": {
            /**
             * Format: date-time
             * @description Valid from
             */
            from?: string | null;
            /**
             * Format: date-time
             * @description Valid to
             */
            to?: string | null;
        };
        /** @description The container registry capability for a single region */
        "cloud.containerRegistry.Capability": {
            /** @description Available plans in the region */
            readonly plans?: components["schemas"]["cloud.containerRegistry.Plan"][];
            /** @description The region name */
            readonly regionName?: string;
        };
        /** @description Features list, enabled or not */
        "cloud.containerRegistry.Features": {
            /** @description Vulnerability scanning */
            readonly vulnerability?: boolean;
        };
        /** @description Container registry Get IP Restrictions */
        "cloud.containerRegistry.IPRestrictions": {
            /**
             * Format: date-time
             * @description IP Restrictions creation date
             */
            readonly createdAt?: string;
            /** @description The Description of Whitelisted IpBlock */
            description?: string;
            /** @description Whitelisted IpBlock */
            ipBlock?: components["schemas"]["ipBlock"];
            /**
             * Format: date-time
             * @description IP Restrictions update date
             */
            readonly updatedAt?: string;
        };
        /** @description Limitation of a docker registry */
        "cloud.containerRegistry.Limits": {
            /** @description Docker image storage limits in bytes */
            readonly imageStorage?: number;
            /** @description Parallel requests on Docker image API (/v2 Docker registry API) */
            readonly parallelRequest?: number;
        };
        /** @description Docker registry OIDC Configuration */
        "cloud.containerRegistry.OIDCConfiguration": {
            /** @description The OIDC Configuration AdminGroup */
            adminGroup?: string | null;
            /** @description The OIDC Configuration AutoOnboard */
            autoOnboard?: boolean | null;
            /** @description The OIDC Configuration ClientID */
            clientId: string;
            /**
             * Format: password
             * @description The OIDC Configuration Client Secret
             */
            clientSecret: string | null;
            /**
             * Format: date-time
             * @description The OIDC Configuration creation date
             */
            readonly createdAt?: string;
            /** @description The OIDC Configuration Endpoint */
            endpoint: string;
            /** @description The OIDC Configuration GroupsClaim */
            groupsClaim?: string | null;
            /** @description The OIDC Configuration ID */
            readonly id?: string;
            /** @description The OIDC Configuration Name */
            name: string;
            /** @description The OIDC Configuration comma-separated list of Scopes */
            scope: string;
            /** @description The OIDC Configuration status */
            readonly status?: components["schemas"]["cloud.containerRegistry.OIDCStatusEnum"];
            /**
             * Format: date-time
             * @description The OIDC Configuration last update date
             */
            readonly updatedAt?: string | null;
            /** @description The OIDC Configuration UserClaim */
            userClaim?: string | null;
            /** @description The OIDC Configuration VerifyCert */
            verifyCert?: boolean | null;
        };
        /** @description Docker registry Post OIDC configuration */
        "cloud.containerRegistry.OIDCPost": {
            /** @description Delete all previously created users to allow OIDC configuration */
            deleteUsers?: boolean | null;
            /** @description The OIDC provider configuration */
            provider: components["schemas"]["cloud.containerRegistry.OIDCConfiguration"];
        };
        /** @description Docker registry Put OIDC Configuration */
        "cloud.containerRegistry.OIDCPut": {
            /** @description The OIDC Configuration AdminGroup */
            adminGroup?: string | null;
            /** @description The OIDC Configuration AutoOnboard */
            autoOnboard?: boolean | null;
            /** @description The OIDC Configuration ClientID */
            clientId?: string | null;
            /**
             * Format: password
             * @description The OIDC Configuration Client Secret
             */
            clientSecret?: string | null;
            /** @description The OIDC Configuration Endpoint */
            endpoint?: string | null;
            /** @description The OIDC Configuration GroupsClaim */
            groupsClaim?: string | null;
            /** @description The OIDC Configuration Name */
            name?: string | null;
            /** @description The OIDC Configuration comma-separated list of Scopes */
            scope?: string | null;
            /** @description The OIDC Configuration UserClaim */
            userClaim?: string | null;
            /** @description The OIDC Configuration VerifyCert */
            verifyCert?: boolean | null;
        };
        /**
         * @description Status of the registry's oidc configuration
         * @enum {string}
         */
        "cloud.containerRegistry.OIDCStatusEnum": "DELETING" | "ERROR" | "INSTALLING" | "PATCHING" | "READY" | "UPDATING";
        /** @description Plan of the registry */
        "cloud.containerRegistry.Plan": {
            /** @description Plan code from catalog */
            readonly code?: string;
            /**
             * Format: date-time
             * @description Plan creation date
             */
            readonly createdAt?: string;
            /** @description Features of the plan */
            readonly features?: components["schemas"]["cloud.containerRegistry.Features"];
            /** @description Plan ID */
            readonly id?: string;
            /** @description Plan name */
            readonly name?: string;
            /** @description Container registry limits */
            readonly registryLimits?: components["schemas"]["cloud.containerRegistry.Limits"];
            /**
             * Format: date-time
             * @description Plan last update date
             */
            readonly updatedAt?: string;
        };
        /** @description Missing description */
        "cloud.containerRegistry.PlanUpdate": {
            /** @description Plan ID to apply to the registry */
            planID: string;
        };
        /** @description Managed docker registry */
        "cloud.containerRegistry.Registry": {
            /**
             * Format: date-time
             * @description Registry creation date
             */
            readonly createdAt?: string;
            /** @description Registry ID */
            readonly id?: string;
            /** @description Registry name */
            readonly name?: string;
            /** @description Project ID of your registry */
            readonly projectID?: string;
            /** @description Region of the registry. */
            readonly region?: string;
            /** @description Current size of the registry (bytes) */
            readonly size?: number;
            /** @description Registry status */
            readonly status?: components["schemas"]["cloud.containerRegistry.StatusEnum"];
            /**
             * Format: date-time
             * @description Registry last update date
             */
            readonly updatedAt?: string;
            /** @description Access url of the registry */
            readonly url?: string;
            /** @description Version of your registry */
            readonly version?: string;
        };
        /**
         * @description Status of the registry
         * @enum {string}
         */
        "cloud.containerRegistry.StatusEnum": "DELETED" | "DELETING" | "ERROR" | "INSTALLING" | "READY" | "RESTORING" | "SUSPENDED" | "SUSPENDING" | "UPDATING";
        /** @description Docker registry user */
        "cloud.containerRegistry.User": {
            /** @description User email */
            readonly email?: string;
            /** @description User ID */
            readonly id?: string;
            /**
             * Format: password
             * @description User password
             */
            readonly password?: string | null;
            /** @description User name */
            readonly user?: string;
        };
        /** @description Flavor capability */
        "cloud.flavor.Capability": {
            /** @description Is the capability enabled */
            readonly enabled?: boolean;
            /** @description Name of the capability */
            readonly name?: components["schemas"]["cloud.flavor.CapabilityNameEnum"];
        };
        /**
         * @description Enum values for flavor capabilities names
         * @enum {string}
         */
        "cloud.flavor.CapabilityNameEnum": "failoverip" | "resize" | "snapshot" | "volume";
        /** @description Flavor */
        "cloud.flavor.Flavor": {
            /** @description Available in stock */
            readonly available?: boolean;
            /** @description Capabilities of the flavor */
            readonly capabilities?: components["schemas"]["cloud.flavor.Capability"][];
            /** @description Number of disks */
            readonly disk?: number;
            /** @description Flavor id */
            readonly id?: string;
            /** @description Max capacity of inbound traffic in Mbit/s */
            readonly inboundBandwidth?: number | null;
            /** @description Flavor name */
            readonly name?: string;
            /** @description OS to install on */
            readonly osType?: string;
            /** @description Max capacity of outbound traffic in Mbit/s */
            readonly outboundBandwidth?: number | null;
            /** @description Plan codes to order instances */
            readonly planCodes?: components["schemas"]["cloud.flavor.FlavorPlanCodes"];
            /** @description Number instance you can spawn with your actual quota */
            readonly quota?: number;
            /** @description Ram quantity (Gio) */
            readonly ram?: number;
            /** @description Flavor region */
            readonly region?: string;
            /** @description Flavor type */
            readonly type?: string;
            /** @description Number of VCPUs */
            readonly vcpus?: number;
        };
        /** @description FlavorPlanCodes */
        "cloud.flavor.FlavorPlanCodes": {
            /** @description Plan code to order hourly instance */
            readonly hourly?: string | null;
            /** @description Plan code to order monthly instance */
            readonly monthly?: string | null;
        };
        /** @description Image */
        "cloud.image.Image": {
            /**
             * Format: date-time
             * @description Image creation date
             */
            readonly creationDate?: string;
            /** @description Image usable only for this type of flavor if not null */
            readonly flavorType?: string | null;
            /** @description Image id */
            readonly id?: string;
            /** @description Minimum disks required to use image */
            readonly minDisk?: number;
            /** @description Minimum RAM required to use image */
            readonly minRam?: number;
            /** @description Image name */
            readonly name?: string;
            /** @description Order plan code */
            readonly planCode?: string | null;
            /** @description Image region */
            readonly region?: string;
            /** @description Image size (in GiB) */
            readonly size?: number;
            /** @description Image status */
            readonly status?: string;
            /** @description Tags about the image */
            readonly tags?: string[] | null;
            /** @description Image type */
            readonly type?: string;
            /** @description User to connect with */
            readonly user?: string;
            /** @description Image visibility */
            readonly visibility?: string;
        };
        /**
         * @description OSTypeEnum
         * @enum {string}
         */
        "cloud.image.OSTypeEnum": "baremetal-linux" | "bsd" | "linux" | "windows";
        /** @description Access */
        "cloud.instance.Access": {
            /** @description Login */
            readonly login?: string;
            /**
             * Format: password
             * @description Password
             */
            readonly password?: string;
            /** @description Application access type */
            readonly type?: string;
            /** @description Url */
            readonly url?: string;
        };
        /** @description ApplicationAccess */
        "cloud.instance.ApplicationAccess": {
            /** @description List of credentials */
            readonly accesses?: components["schemas"]["cloud.instance.Access"][];
            /** @description Application status */
            readonly status?: components["schemas"]["cloud.instance.ApplicationAccessStateEnum"];
        };
        /**
         * @description ApplicationAccessStateEnum
         * @enum {string}
         */
        "cloud.instance.ApplicationAccessStateEnum": "installing" | "ok";
        /** @description Parameters to associate an existing floating IP to an instance */
        "cloud.instance.AssociateFloatingIp": {
            /**
             * Format: uuid
             * @description Floating IP ID
             */
            floatingIpId: string;
            /** @description Parameters to create a gateway if required */
            gateway?: components["schemas"]["cloud.network.CreateGatewaySummary"] | null;
            /** @description Private instance IP to associate the floating IP with */
            ip: components["schemas"]["ip"];
        };
        /** @description Autobackup params at instance creation */
        "cloud.instance.AutoBackup": {
            /** @description Unix Cron pattern (eg: '0 0 * * *') */
            cron?: string;
            /** @description Number of backup to keep */
            rotation?: number;
        };
        /** @description Parameters to create a floating IP for an instance */
        "cloud.instance.CreateFloatingIp": {
            /** @description Parameters to create a gateway if required */
            gateway?: components["schemas"]["cloud.network.CreateGatewaySummary"] | null;
            /** @description Private instance IP to associate the floating IP with */
            ip: components["schemas"]["ip"];
        };
        /** @description Instance creation input */
        "cloud.instance.CreateInput": {
            /** @description Create an autobackup workflow after instance start up */
            autobackup?: components["schemas"]["cloud.instance.CreateInput.Autobackup"] | null;
            /** @description Billing period */
            billingPeriod?: components["schemas"]["cloud.instance.CreateInput.BillingPeriodEnum"];
            /** @description Boot the instance from an image or a volume */
            bootFrom?: components["schemas"]["cloud.instance.CreateInput.BootFrom"];
            /** @description Create multiple instances */
            bulk?: number;
            /** @description Flavor information */
            flavor?: components["schemas"]["cloud.instance.CreateInput.Flavor"];
            /** @description Start instance in group */
            group?: components["schemas"]["cloud.instance.CreateInput.Group"] | null;
            /** @description Instance name */
            name?: string;
            /** @description Networks information */
            network?: components["schemas"]["cloud.instance.CreateInput.Network"];
            /** @description Existing SSH Keypair */
            sshKey?: components["schemas"]["cloud.instance.CreateInput.SshKey"] | null;
            /** @description Information to create a new SSH Keypair */
            sshKeyCreate?: components["schemas"]["cloud.instance.CreateInput.SshKeyCreate"] | null;
            /** @description Configuration information or scripts to use upon launch */
            userData?: string | null;
        };
        /** @description Create an autobackup workflow after instance start up */
        "cloud.instance.CreateInput.Autobackup": {
            /** @description Unix Cron pattern (eg: '0 0 * * *') */
            cron?: string;
            /** @description Number of backup to keep */
            rotation?: number;
        };
        /**
         * @description Billing period
         * @enum {string}
         */
        "cloud.instance.CreateInput.BillingPeriodEnum": "hourly" | "monthly";
        /** @description Boot the instance from an image or a volume */
        "cloud.instance.CreateInput.BootFrom": {
            /**
             * Format: uuid
             * @description Instance image id
             */
            imageId?: string | null;
            /**
             * Format: uuid
             * @description Specify a volume id to boot from it
             */
            volumeId?: string | null;
        };
        /** @description Flavor information */
        "cloud.instance.CreateInput.Flavor": {
            /**
             * Format: uuid
             * @description Instance flavor id
             */
            id?: string;
        };
        /** @description Start instance in group */
        "cloud.instance.CreateInput.Group": {
            /** @description Group id */
            id?: string;
        };
        /** @description Networks information */
        "cloud.instance.CreateInput.Network": {
            /** @description Private network information */
            private?: components["schemas"]["cloud.instance.CreateInput.Network.Private"] | null;
            /** @description Set the new instance as public */
            public?: boolean;
        };
        /** @description Private network information */
        "cloud.instance.CreateInput.Network.Private": {
            /** @description Existing floating IP */
            floatingIp?: components["schemas"]["cloud.instance.CreateInput.Network.Private.FloatingIp"] | null;
            /** @description Information to create a new floating IP */
            floatingIpCreate?: components["schemas"]["cloud.instance.CreateInput.Network.Private.FloatingIpCreate"] | null;
            /** @description Existing gateway */
            gateway?: components["schemas"]["cloud.instance.CreateInput.Network.Private.Gateway"] | null;
            /** @description Information to create a new gateway */
            gatewayCreate?: components["schemas"]["cloud.instance.CreateInput.Network.Private.GatewayCreate"] | null;
            /** @description Instance IP in the private network */
            ip?: components["schemas"]["ipv4"] | null;
            /** @description Existing private network */
            network?: components["schemas"]["cloud.instance.CreateInput.Network.Private.Network"] | null;
            /** @description Information to create a new private network */
            networkCreate?: components["schemas"]["cloud.instance.CreateInput.Network.Private.NetworkCreate"] | null;
        };
        /** @description Existing floating IP */
        "cloud.instance.CreateInput.Network.Private.FloatingIp": {
            /**
             * Format: uuid
             * @description Floating IP ID
             */
            id?: string;
        };
        /** @description Information to create a new floating IP */
        "cloud.instance.CreateInput.Network.Private.FloatingIpCreate": {
            /** @description Floating IP description */
            description?: string;
        };
        /** @description Existing gateway */
        "cloud.instance.CreateInput.Network.Private.Gateway": {
            /**
             * Format: uuid
             * @description Gateway ID
             */
            id?: string;
        };
        /** @description Information to create a new gateway */
        "cloud.instance.CreateInput.Network.Private.GatewayCreate": {
            /** @description Gateway model */
            model?: components["schemas"]["cloud.instance.CreateInput.Network.Private.GatewayCreate.ModelEnum"];
            /** @description Gateway name */
            name?: string;
        };
        /**
         * @description Gateway model
         * @enum {string}
         */
        "cloud.instance.CreateInput.Network.Private.GatewayCreate.ModelEnum": "l" | "m" | "s";
        /** @description Existing private network */
        "cloud.instance.CreateInput.Network.Private.Network": {
            /**
             * Format: uuid
             * @description Network ID
             */
            id?: string;
            /**
             * Format: uuid
             * @description Existing Subnet ID
             */
            subnetId?: string;
        };
        /** @description Information to create a new private network */
        "cloud.instance.CreateInput.Network.Private.NetworkCreate": {
            /** @description Network name */
            name?: string;
            /** @description New subnet information */
            subnet?: components["schemas"]["cloud.instance.CreateInput.Network.Private.NetworkCreate.Subnet"];
            /** @description Network vlan ID */
            vlanId?: number | null;
        };
        /** @description New subnet information */
        "cloud.instance.CreateInput.Network.Private.NetworkCreate.Subnet": {
            /** @description Subnet range in CIDR notation */
            cidr?: components["schemas"]["ipv4Block"];
            enableDhcp?: boolean;
            /** @description IP version */
            ipVersion?: number;
        };
        /** @description Existing SSH Keypair */
        "cloud.instance.CreateInput.SshKey": {
            /** @description SSH Keypair name */
            name?: string;
        };
        /** @description Information to create a new SSH Keypair */
        "cloud.instance.CreateInput.SshKeyCreate": {
            /** @description SSH key name */
            name?: string;
            /** @description SSH public key */
            publicKey?: string;
        };
        /** @description Instance */
        "cloud.instance.Instance": {
            /**
             * Format: date-time
             * @description Instance creation date
             */
            readonly created?: string;
            /** @description Instance outgoing network traffic for the current month (in bytes) */
            readonly currentMonthOutgoingTraffic?: number | null;
            /** @description Instance flavor id */
            readonly flavorId?: string;
            /** @description Instance id */
            readonly id?: string;
            /** @description Instance image id */
            readonly imageId?: string;
            /** @description Instance IP addresses */
            readonly ipAddresses?: components["schemas"]["cloud.instance.IpAddress"][];
            /** @description Instance monthly billing status */
            readonly monthlyBilling?: components["schemas"]["cloud.instance.MonthlyBilling"] | null;
            /** @description Instance name */
            readonly name?: string;
            /** @description Ids of pending public cloud operations */
            readonly operationIds?: string[];
            /** @description Order plan code */
            readonly planCode?: string | null;
            /** @description Instance id */
            readonly region?: string;
            /** @description Instance ssh key id */
            readonly sshKeyId?: string | null;
            /** @description Instance status */
            readonly status?: components["schemas"]["cloud.instance.InstanceStatusEnum"];
        };
        /** @description IP address */
        "cloud.instance.InstanceAddress": {
            /** @description IP address */
            readonly ip?: components["schemas"]["ip"];
            /** @description IP version */
            readonly version?: number;
        };
        /** @description InstanceDetail */
        "cloud.instance.InstanceDetail": {
            /**
             * Format: date-time
             * @description Instance creation date
             */
            readonly created?: string;
            /** @description Instance outgoing network traffic for the current month (in bytes) */
            readonly currentMonthOutgoingTraffic?: number | null;
            /** @description Instance flavor */
            readonly flavor?: components["schemas"]["cloud.flavor.Flavor"];
            /** @description Instance id */
            readonly id?: string;
            /** @description Instance image */
            readonly image?: components["schemas"]["cloud.image.Image"];
            /** @description Instance IP addresses */
            readonly ipAddresses?: components["schemas"]["cloud.instance.IpAddress"][];
            /** @description Instance monthly billing status */
            readonly monthlyBilling?: components["schemas"]["cloud.instance.MonthlyBilling"] | null;
            /** @description Instance name */
            readonly name?: string;
            /** @description Ids of pending public cloud operations */
            readonly operationIds?: string[];
            /** @description Order plan code */
            readonly planCode?: string | null;
            /** @description Instance id */
            readonly region?: string;
            /**
             * Format: password
             * @description Rescue password if instance is in RESCUE status
             */
            readonly rescuePassword?: string | null;
            /** @description Instance SSH key */
            readonly sshKey?: components["schemas"]["cloud.sshkey.SshKeyDetail"] | null;
            /** @description Instance status */
            readonly status?: components["schemas"]["cloud.instance.InstanceStatusEnum"];
        };
        /** @description InstanceMetrics */
        "cloud.instance.InstanceMetrics": {
            readonly unit?: string;
            readonly values?: components["schemas"]["cloud.instance.InstanceMetricsValue"][];
        };
        /** @description InstanceMetricsValue */
        "cloud.instance.InstanceMetricsValue": {
            readonly timestamp?: number;
            readonly value?: number;
        };
        /**
         * @description InstanceStatusEnum
         * @enum {string}
         */
        "cloud.instance.InstanceStatusEnum": "ACTIVE" | "BUILD" | "BUILDING" | "DELETED" | "DELETING" | "ERROR" | "HARD_REBOOT" | "MIGRATING" | "PASSWORD" | "PAUSED" | "REBOOT" | "REBUILD" | "RESCUE" | "RESCUED" | "RESCUING" | "RESIZE" | "RESIZED" | "RESUMING" | "REVERT_RESIZE" | "SHELVED" | "SHELVED_OFFLOADED" | "SHELVING" | "SHUTOFF" | "SNAPSHOTTING" | "SOFT_DELETED" | "STOPPED" | "SUSPENDED" | "UNKNOWN" | "UNRESCUING" | "UNSHELVING" | "VERIFY_RESIZE";
        /** @description Instance */
        "cloud.instance.InstanceSummary": {
            /** @description Instance IP addresses */
            readonly addresses?: components["schemas"]["cloud.instance.InstanceAddress"][];
            /** @description Volumes attached to the instance */
            readonly attachedVolumes?: components["schemas"]["cloud.instance.InstanceSummaryVolumeValue"][];
            /**
             * Format: uuid
             * @description Flavor id
             */
            readonly flavorId?: string;
            /** @description Flavor name */
            readonly flavorName?: string;
            /**
             * Format: uuid
             * @description Instance id
             */
            readonly id?: string;
            /**
             * Format: uuid
             * @description Image id
             */
            readonly imageId?: string;
            /** @description Instance name */
            readonly name?: string;
            /** @description Instance region */
            readonly region?: string;
            /** @description Instance SSH key name */
            readonly sshKey?: string;
            /** @description Instance task state */
            readonly taskState?: components["schemas"]["cloud.instance.InstanceSummaryTaskStateEnum"];
        };
        /**
         * @description Enum values for taskState of an instance
         * @enum {string}
         */
        "cloud.instance.InstanceSummaryTaskStateEnum": "" | "BlockDeviceMapping" | "Deleting" | "ImagePendingUpload" | "ImageSnapshot" | "ImageUpload" | "Migrating" | "Networking" | "Pausing" | "PoweringOff" | "PoweringOn" | "Rebooting" | "RebootingHard" | "RebuildBlockDeviceMapping" | "RebuildSpawning" | "Rebuilding" | "Rescuing" | "ResizeConfirming" | "ResizeFinish" | "ResizeMigrated" | "ResizeMigrating" | "ResizePrep" | "ResizeReverting" | "Resuming" | "Scheduling" | "Spawning" | "Starting" | "Stopping" | "Suspending" | "Unknown" | "Unpausing" | "Unrescuing" | "UpdatingPassword";
        /** @description Volumes attached to your instance */
        "cloud.instance.InstanceSummaryVolumeValue": {
            /**
             * Format: uuid
             * @description Volume Id
             */
            readonly id?: string;
        };
        /** @description InstanceVnc */
        "cloud.instance.InstanceVnc": {
            /** @description VNC type */
            readonly type?: string;
            /** @description VNC url */
            readonly url?: string;
        };
        /** @description IpAddress */
        "cloud.instance.IpAddress": {
            /** @description Gateway IP */
            readonly gatewayIp?: components["schemas"]["ip"] | null;
            /** @description Instance IP address */
            readonly ip?: string;
            /** @description Network ID */
            readonly networkId?: string;
            /** @description Instance IP address type */
            readonly type?: string;
            /** @description IP version */
            readonly version?: number;
        };
        /**
         * @description MetricsPeriod
         * @enum {string}
         */
        "cloud.instance.MetricsPeriodEnum": "lastday" | "lastmonth" | "lastweek" | "lastyear" | "today";
        /**
         * @description MetricsType
         * @enum {string}
         */
        "cloud.instance.MetricsTypeEnum": "cpu:max" | "cpu:used" | "mem:max" | "mem:used" | "net:rx" | "net:tx";
        /** @description MonthlyBilling */
        "cloud.instance.MonthlyBilling": {
            /**
             * Format: date-time
             * @description Monthly billing activated since
             */
            readonly since?: string;
            /** @description Monthly billing status */
            readonly status?: components["schemas"]["cloud.instance.MonthlyBillingStatusEnum"];
        };
        /**
         * @description MonthlyBillingStatusEnum
         * @enum {string}
         */
        "cloud.instance.MonthlyBillingStatusEnum": "activationPending" | "ok";
        /** @description Instance with region to set as monthly billing */
        "cloud.instance.MonthlyInstanceBulkParams": {
            /**
             * Format: uuid
             * @description Instance id
             */
            instanceId?: string;
            /** @description Region name */
            region?: string;
        };
        /** @description NetworkBulkParams */
        "cloud.instance.NetworkBulkParams": {
            /** @description Private or public network Id */
            networkId?: string;
        };
        /** @description NetworkParams */
        "cloud.instance.NetworkParams": {
            /** @description Static ip (Can only be defined for private networks) */
            ip?: components["schemas"]["ip"] | null;
            /** @description Private or public network Id */
            networkId?: string;
        };
        /**
         * @description RebootTypeEnum
         * @enum {string}
         */
        "cloud.instance.RebootTypeEnum": "hard" | "soft";
        /** @description RescueAdminPassword */
        "cloud.instance.RescueAdminPassword": {
            /**
             * Format: password
             * @description Admin password to connect to your rescue server with
             */
            readonly adminPassword?: string | null;
        };
        /** @description FixedIp */
        "cloud.instanceInterface.FixedIp": {
            /** @description Ip */
            readonly ip?: string;
            /** @description Subnetwork Id */
            readonly subnetId?: string;
        };
        /** @description Interface */
        "cloud.instanceInterface.Interface": {
            /** @description List of ips of the interface */
            readonly fixedIps?: components["schemas"]["cloud.instanceInterface.FixedIp"][];
            /** @description Interface unique identifier */
            readonly id?: string;
            /** @description Mac address */
            readonly macAddress?: string;
            /** @description Network id */
            readonly networkId?: string;
            /** @description Openstack state */
            readonly state?: string;
            /** @description Network type */
            readonly type?: string;
        };
        /** @description InstanceGroup */
        "cloud.instancegroup.InstanceGroup": {
            /** @description Instance group id */
            readonly id?: string;
            /** @description Instances ids */
            readonly instance_ids?: string[];
            /** @description Instance group name */
            readonly name?: string;
            /** @description region */
            readonly region?: string;
            /** @description Instance group type */
            readonly type?: components["schemas"]["cloud.instancegroup.InstanceGroupTypeEnum"];
        };
        /**
         * @description InstanceGroupTypeEnum
         * @enum {string}
         */
        "cloud.instancegroup.InstanceGroupTypeEnum": "affinity" | "anti-affinity";
        /** @description CloudIp */
        "cloud.ip.CloudIp": {
            /** @description Ip id */
            readonly id?: string;
            /** @description Ip */
            readonly ip?: components["schemas"]["ipBlock"] | null;
            /** @description Ip status */
            readonly status?: components["schemas"]["cloud.ip.IpStatusEnum"];
            /** @description Ip type */
            readonly type?: string;
        };
        /** @description FailoverIp */
        "cloud.ip.FailoverIp": {
            /** @description IP block */
            readonly block?: components["schemas"]["ip"] | null;
            /** @description Ip continent */
            readonly continentCode?: string | null;
            /** @description Ip location */
            readonly geoloc?: string | null;
            /** @description Ip id */
            readonly id?: string;
            /** @description Ip */
            readonly ip?: components["schemas"]["ip"] | null;
            /** @description Current operation progress in percent */
            readonly progress?: number;
            /** @description Instance where ip is routed to */
            readonly routedTo?: string;
            /** @description Ip status */
            readonly status?: components["schemas"]["cloud.ip.IpStatusEnum"];
            /** @description IP sub type */
            readonly subType?: components["schemas"]["cloud.ip.IpSubTypeEnum"];
        };
        /**
         * @description IpStatusEnum
         * @enum {string}
         */
        "cloud.ip.IpStatusEnum": "ok" | "operationPending";
        /**
         * @description IpSubTypeEnum
         * @enum {string}
         */
        "cloud.ip.IpSubTypeEnum": "cloud" | "ovh";
        /** @description Key-manager certificate secret container */
        "cloud.keymanager.Certificate": {
            /**
             * Format: uuid
             * @description ID of the certificate
             */
            readonly id?: string;
            /** @description Name of the certificate */
            readonly name?: string;
            /** @description Certificate region */
            readonly region?: string;
            /** @description List of secrets in certificate container */
            readonly secrets?: components["schemas"]["cloud.keymanager.SecretRef"][];
        };
        /** @description Input to create a certificate */
        "cloud.keymanager.CertificateCreate": {
            /**
             * Format: password
             * @description Content of the certificate
             */
            certificate: string;
            /**
             * Format: password
             * @description Content of the intermediates certificates if any
             */
            intermediates?: string;
            /** @description Name of the certificate */
            name: string;
            /**
             * Format: password
             * @description Private key
             */
            privateKey: string;
            /**
             * Format: password
             * @description Private key passphrase if any
             */
            privateKeyPassphrase?: string;
        };
        /** @description secret */
        "cloud.keymanager.Secret": {
            /**
             * Format: uuid
             * @description ID of the secret
             */
            readonly id?: string;
            /** @description Name of the secret */
            readonly name?: string;
            /** @description Secret region */
            readonly region?: string;
        };
        /** @description Secret reference */
        "cloud.keymanager.SecretRef": {
            /**
             * Format: uuid
             * @description ID of the secret
             */
            readonly id?: string;
            /** @description Name of the secret */
            readonly name?: string;
        };
        /** @description Managed Kubernetes cluster description */
        "cloud.kube.Cluster": {
            /** @description True if cluster auditlogs forward has been subscribed */
            readonly auditLogsSubscribed?: boolean;
            /** @description True if control-plane is up to date */
            readonly controlPlaneIsUpToDate?: boolean;
            /**
             * Format: date-time
             * @description Cluster creation date
             */
            readonly createdAt?: string;
            /** @description Kubernetes cluster customization */
            readonly customization?: components["schemas"]["cloud.ProjectKubeCustomization"] | null;
            /** @description Cluster ID */
            readonly id?: string;
            /** @description True if all nodes and control-plane are up to date */
            readonly isUpToDate?: boolean;
            /** @description Selected mode for kube-proxy */
            readonly kubeProxyMode?: components["schemas"]["cloud.kube.KubeProxyModeEnum"];
            /**
             * Format: uuid
             * @description OpenStack subnet ID that the load balancers will use. Optional, can only be set on cluster creation or reset, can only be set if privateNetworkId and nodesSubnetId are also set
             */
            readonly loadBalancersSubnetId?: string | null;
            /** @description Cluster name */
            readonly name?: string;
            /** @description Kubernetes versions available for upgrade */
            readonly nextUpgradeVersions?: string[] | null;
            /** @description OpenStack subnet ID that the cluster nodes will use. Optional, can only be set on cluster creation or reset, can only be set if privateNetworkId is also set. If unspecified, it will be selected automatically when the first node is created. */
            readonly nodesSubnetId?: string | null;
            /** @description Cluster nodes URL */
            readonly nodesUrl?: string;
            /** @description The private network configuration. This field is optional. */
            readonly privateNetworkConfiguration?: components["schemas"]["cloud.kube.PrivateNetworkConfiguration"] | null;
            /** @description OpenStack private network ID that the cluster will use. Optional, can only be set on cluster creation or reset. If unspecified, the cluster will use the public network. */
            readonly privateNetworkId?: string | null;
            /** @description Cluster region. Example: GRA11. */
            readonly region?: string;
            /** @description Cluster status */
            readonly status?: components["schemas"]["cloud.kube.ClusterStatusEnum"];
            /** @description Cluster update policy */
            readonly updatePolicy?: string;
            /**
             * Format: date-time
             * @description Cluster last update date
             */
            readonly updatedAt?: string;
            /** @description Management URL of your cluster */
            readonly url?: string;
            /** @description Kubernetes version of your cluster */
            readonly version?: string;
        };
        /**
         * @description Enum values for Status
         * @enum {string}
         */
        "cloud.kube.ClusterStatusEnum": "DELETED" | "DELETING" | "ERROR" | "INSTALLING" | "MAINTENANCE" | "READY" | "REDEPLOYING" | "REOPENING" | "RESETTING" | "SUSPENDED" | "SUSPENDING" | "UPDATING" | "USER_ERROR" | "USER_QUOTA_ERROR" | "USER_WEBHOOK_PREVENTING_OPERATIONS_ERROR";
        /** @description Etcd usage and quota for a given cluster */
        "cloud.kube.EtcdUsage": {
            /** @description Maximum allowed size of etcd data for the cluster (bytes) */
            readonly quota?: number;
            /** @description Size of etcd data used by the cluster (bytes) */
            readonly usage?: number;
        };
        /** @description a flavor kind */
        "cloud.kube.Flavor": {
            /** @description Flavor family */
            readonly category?: components["schemas"]["cloud.kube.FlavorCategoryEnum"];
            /** @description Number of GPUs */
            readonly gpus?: number;
            /** @description Flavor name */
            readonly name?: string;
            /** @description Ram quantity (GB) */
            readonly ram?: number;
            /** @description Flavor state */
            readonly state?: components["schemas"]["cloud.kube.FlavorStateEnum"];
            /** @description Number of VCPUs */
            readonly vCPUs?: number;
        };
        /**
         * @description Enum values for category
         * @enum {string}
         */
        "cloud.kube.FlavorCategoryEnum": "a" | "b" | "c" | "d" | "g" | "h" | "i" | "l" | "r" | "t";
        /**
         * @description Enum values for State
         * @enum {string}
         */
        "cloud.kube.FlavorStateEnum": "available" | "unavailable";
        /**
         * @description Enum values for scheduler parameter of cluster kubeProxy custom ipvs config
         * @enum {string}
         */
        "cloud.kube.KubeProxyIpvsSchedulerEnum": "dh" | "lc" | "nq" | "rr" | "sed" | "sh";
        /**
         * @description Enum values for cluster kubeProxyMode
         * @enum {string}
         */
        "cloud.kube.KubeProxyModeEnum": "iptables" | "ipvs";
        /** @description Kubeconfig description */
        "cloud.kube.Kubeconfig": {
            /**
             * Format: password
             * @description kubeconfig file
             */
            readonly content?: string;
        };
        /** @description Node installed on your cluster */
        "cloud.kube.Node": {
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly createdAt?: string;
            /**
             * Format: date-time
             * @description Node deployment date
             */
            readonly deployedAt?: string | null;
            /** @description Flavor name */
            readonly flavor?: string;
            /** @description Node ID */
            readonly id?: string;
            /** @description Public Cloud instance id */
            readonly instanceId?: string | null;
            /** @description True if the node is up to date */
            readonly isUpToDate?: boolean;
            /** @description Node name */
            readonly name?: string;
            /** @description NodePool parent id */
            readonly nodePoolId?: string;
            /** @description Project id */
            readonly projectId?: string;
            /** @description Status */
            readonly status?: components["schemas"]["cloud.kube.NodeStatusEnum"];
            /**
             * Format: date-time
             * @description Node last update date
             */
            readonly updatedAt?: string;
            /** @description Node version */
            readonly version?: string;
        };
        /** @description NodePool created on your cluster to manage your nodes */
        "cloud.kube.NodePool": {
            /** @description Enable anti affinity groups for nodes in the pool */
            readonly antiAffinity?: boolean;
            /** @description Enable auto-scaling for the pool */
            readonly autoscale?: boolean;
            /** @description Autoscaling customization parameters */
            readonly autoscaling?: components["schemas"]["cloud.kube.NodePoolAutoscaling"];
            /** @description Number of nodes which are actually ready in the pool */
            readonly availableNodes?: number;
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly createdAt?: string;
            /** @description Number of nodes present in the pool */
            readonly currentNodes?: number;
            /** @description Number of nodes you desire in the pool */
            readonly desiredNodes?: number;
            /** @description Flavor name */
            readonly flavor?: string;
            /** @description NodePool ID */
            readonly id?: string;
            /** @description Number of nodes you desire in the pool */
            readonly maxNodes?: number;
            /** @description Number of nodes you desire in the pool */
            readonly minNodes?: number;
            /** @description Enable monthly billing on all nodes in the pool */
            readonly monthlyBilled?: boolean;
            /** @description NodePool resource name */
            readonly name?: string;
            /** @description Project id */
            readonly projectId?: string;
            /** @description Status describing the state between number of nodes wanted and available ones */
            readonly sizeStatus?: components["schemas"]["cloud.kube.NodePoolSizeStatusEnum"];
            /** @description Current status */
            readonly status?: components["schemas"]["cloud.kube.NodePoolStatusEnum"];
            /** @description Template of nodes metadata and spec to create in the pool */
            readonly template?: components["schemas"]["cloud.kube.NodePoolTemplate"];
            /** @description Number of nodes with latest version installed in the pool */
            readonly upToDateNodes?: number;
            /**
             * Format: date-time
             * @description Last update date
             */
            readonly updatedAt?: string;
        };
        /** @description Autoscaling customization parameters */
        "cloud.kube.NodePoolAutoscaling": {
            /** @description How long a node should be unneeded before it is eligible for scale down */
            readonly scaleDownUnneededTimeSeconds?: number;
            /** @description How long an unready node should be unneeded before it is eligible for scale down */
            readonly scaleDownUnreadyTimeSeconds?: number;
            /** @description Sum of cpu or memory of all pods running on the node divided by node's corresponding allocatable resource, below which a node can be considered for scale down */
            readonly scaleDownUtilizationThreshold?: number;
        };
        /**
         * @description Enum values for NodePool size Status
         * @enum {string}
         */
        "cloud.kube.NodePoolSizeStatusEnum": "CAPACITY_OK" | "OVER_CAPACITY" | "UNDER_CAPACITY";
        /**
         * @description Enum values for NodePool Status
         * @enum {string}
         */
        "cloud.kube.NodePoolStatusEnum": "DELETED" | "DELETING" | "DOWNSCALING" | "ERROR" | "INSTALLING" | "MAINTENANCE" | "READY" | "REDEPLOYING" | "REOPENING" | "RESETTING" | "SUSPENDED" | "SUSPENDING" | "UPDATING" | "UPSCALING" | "USER_ERROR" | "USER_NODE_NOT_FOUND_ERROR" | "USER_NODE_SUSPENDED_SERVICE" | "USER_QUOTA_ERROR" | "USER_WEBHOOK_PREVENTING_OPERATIONS_ERROR";
        /** @description Managed Kubernetes nodepool template */
        "cloud.kube.NodePoolTemplate": {
            /** @description Metadata of each nodes in the pool */
            metadata: components["schemas"]["cloud.kube.NodePoolTemplateMetadata"];
            /** @description Spec of each nodes in the pool */
            spec: components["schemas"]["cloud.kube.NodePoolTemplateSpec"];
        };
        /** @description Metadata of each nodes in the pool */
        "cloud.kube.NodePoolTemplateMetadata": {
            /** @description Annotations to apply to each nodes */
            annotations: {
                [key: string]: string | undefined;
            };
            /** @description Finalizers to apply to each nodes */
            finalizers: string[];
            /** @description Labels to apply to each nodes */
            labels: {
                [key: string]: string | undefined;
            };
        };
        /** @description Spec of each nodes in the pool */
        "cloud.kube.NodePoolTemplateSpec": {
            /** @description Taints to apply to each nodes */
            taints: components["schemas"]["cloud.kube.Taint"][];
            /** @description If true, set nodes as un-schedulable */
            unschedulable: boolean;
        };
        /**
         * @description Enum values for Status
         * @enum {string}
         */
        "cloud.kube.NodeStatusEnum": "DELETED" | "DELETING" | "ERROR" | "FLAVOR_OUT_OF_STOCK_ERROR" | "INSTALLING" | "MAINTENANCE" | "READY" | "REDEPLOYING" | "REOPENING" | "RESETTING" | "SUSPENDED" | "SUSPENDING" | "UPDATING" | "USER_ERROR" | "USER_NODE_NOT_FOUND_ERROR" | "USER_NODE_SUSPENDED_SERVICE" | "USER_QUOTA_ERROR" | "USER_WEBHOOK_PREVENTING_OPERATIONS_ERROR";
        /** @description Managed Kubernetes oidc integration */
        "cloud.kube.OpenIdConnect": {
            /** @description Content of the certificate for the CA, in base64 format, that signed your identity provider's web certificate. Defaults to the host's root CAs. */
            readonly caContent?: string | null;
            /** @description Client ID */
            readonly clientId?: string;
            /** @description JWT claim to use as the user's group. If the claim is present it must be an array of strings. */
            readonly groupsClaim?: string[] | null;
            /** @description Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra. */
            readonly groupsPrefix?: string | null;
            /** @description Issuer URL */
            readonly issuerUrl?: string;
            /** @description key=value pairs that describe required claims in the ID Token. If set, the claims are verified to be present in the ID Token with a matching value. */
            readonly requiredClaim?: string[] | null;
            /** @description The signing algorithms accepted. Default is "RS256". */
            readonly signingAlgorithms?: components["schemas"]["cloud.kube.OpenIdConnectSigningAlgorithmsEnum"][] | null;
            /** @description JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end user. Admins can choose other claims, such as email or name, depending on their provider. However, claims other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins. */
            readonly usernameClaim?: string | null;
            /** @description Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the value oidc: will create usernames like oidc:jane.doe. If this field isn't set and oidcUsernameClaim is a value other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of oidcIssuerUrl. The value - can be used to disable all prefixing. */
            readonly usernamePrefix?: string | null;
        };
        /**
         * @description Enum values for OpenIdConnect signing algorithms
         * @enum {string}
         */
        "cloud.kube.OpenIdConnectSigningAlgorithmsEnum": "ES256" | "ES384" | "ES512" | "PS256" | "PS384" | "PS512" | "RS256" | "RS384" | "RS512";
        /** @description Managed Kubernetes cluster private networking configuration */
        "cloud.kube.PrivateNetworkConfiguration": {
            /** @description If defined, all egress traffic will be routed towards this IP address, which should belong to the private network. Empty string means disabled. */
            defaultVrackGateway?: string;
            /** @description Defines whether routing should default to using the nodes' private interface, instead of their public interface. Default is false. */
            privateNetworkRoutingAsDefault?: boolean | null;
        };
        /**
         * @description Enum values for worker nodes reset policy
         * @enum {string}
         */
        "cloud.kube.ResetWorkerNodesPolicyEnum": "delete" | "reinstall";
        /** @description A generic object for response message */
        "cloud.kube.ResponseMessage": {
            /** @description The response message. */
            readonly message?: string;
        };
        /** @description Kubernetes taint object */
        "cloud.kube.Taint": {
            /** @description The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute */
            effect: components["schemas"]["cloud.kube.TaintEffectEnum"];
            /** @description The taint key to be applied to a node */
            key: string;
            /** @description The taint value corresponding to the taint key */
            value: string;
        };
        /**
         * @description Enum values for taint effects
         * @enum {string}
         */
        "cloud.kube.TaintEffectEnum": "NoExecute" | "NoSchedule" | "PreferNoSchedule";
        /**
         * @description Enum values for UpdatePolicy
         * @enum {string}
         */
        "cloud.kube.UpdatePolicyEnum": "ALWAYS_UPDATE" | "MINIMAL_DOWNTIME" | "NEVER_UPDATE";
        /**
         * @description Enum values for UpdateStrategy
         * @enum {string}
         */
        "cloud.kube.UpdateStrategyEnum": "LATEST_PATCH" | "NEXT_MINOR";
        /**
         * @description List of available versions for installation
         * @enum {string}
         */
        "cloud.kube.VersionEnum": "1.26" | "1.27" | "1.28" | "1.29";
        /** @description Parameters to associate an existing floating IP to a loadbalancer */
        "cloud.loadbalancing.AssociateFloatingIp": {
            /**
             * Format: uuid
             * @description Floating IP ID
             */
            floatingIpId: string;
            /** @description Parameters to create a gateway if required */
            gateway?: components["schemas"]["cloud.network.CreateGatewaySummary"] | null;
            /** @description Private loadbalancer IP to associate the floating IP with */
            ip: components["schemas"]["ip"];
        };
        /** @description Parameters to create a floating IP for a loadbalancer */
        "cloud.loadbalancing.CreateFloatingIp": {
            /** @description Parameters to create a gateway if required */
            gateway?: components["schemas"]["cloud.network.CreateGatewaySummary"] | null;
            /** @description Private loadbalancer IP to associate the floating IP with */
            ip: components["schemas"]["ip"];
        };
        /** @description Input to create a loadbalancer listener */
        "cloud.loadbalancing.CreateListener": {
            /** @description The allowed CIDRs */
            allowedCidrs?: components["schemas"]["ipv4Block"][];
            /**
             * Format: uuid
             * @description The ID of the secret containing the certificate
             */
            certificateId?: string;
            /**
             * Format: uuid
             * @description The ID of the default pool
             */
            defaultPoolId?: string;
            /** @description The description of the listener */
            description?: string;
            /**
             * Format: uuid
             * @description The ID of the loadbalancer
             */
            loadbalancerId: string;
            /** @description The name of the listener */
            name: string;
            /** @description Port to listen on */
            port: number;
            /** @description Protocol of the listener */
            protocol: components["schemas"]["cloud.loadbalancing.ListenerProtocolEnum"];
            /** @description Timeout client data of the listener */
            timeoutClientData?: number;
            /** @description Timeout member data of the listener */
            timeoutMemberData?: number;
            /** @description TLS versions of the listener */
            tlsVersions?: components["schemas"]["cloud.loadbalancing.ListenerTlsVersionEnum"][];
        };
        /** @description Edit a loadbalancer listener */
        "cloud.loadbalancing.EditListener": {
            /** @description The allowed CIDRs */
            allowedCidrs?: components["schemas"]["ipv4Block"][];
            /** @description ID of the secret containing the certificate */
            certificateId?: string;
            /**
             * Format: uuid
             * @description ID of the default pool
             */
            defaultPoolId?: string;
            /** @description Description of the listener */
            description?: string;
            /** @description Name of the listener */
            name?: string;
        };
        /** @description Flavor */
        "cloud.loadbalancing.Flavor": {
            /**
             * Format: uuid
             * @description Flavor id
             */
            readonly id?: string;
            /** @description Flavor name */
            readonly name?: string;
            /** @description Region name */
            readonly region?: string;
        };
        /** @description HealthMonitor */
        "cloud.loadbalancing.HealthMonitor": {
            /** @description Duration between sending probes to members, in seconds */
            delay: number;
            /** @description Monitor HTTP configuration */
            httpConfiguration?: components["schemas"]["cloud.loadbalancing.HealthMonitorHTTPConfiguration"] | null;
            /**
             * Format: uuid
             * @description The ID of the pool
             */
            readonly id?: string;
            /** @description Number of successful checks before changing the operating status of the member to ONLINE */
            maxRetries: number;
            /** @description Number of allowed check failures before changing the operating status of the member to ERROR */
            maxRetriesDown?: number | null;
            /** @description Type of the monitor */
            monitorType: components["schemas"]["cloud.loadbalancing.LoadBalancerHealthMonitorTypeEnum"];
            /** @description The name of the resource */
            name: string;
            /** @description The operating status of the resource */
            readonly operatingStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerOperatingStatusEnum"];
            /**
             * Format: uuid
             * @description The ID of the pool
             */
            poolId: string;
            /** @description The provisioning status of the resource */
            readonly provisioningStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerProvisioningStatusEnum"];
            /** @description Maximum time, in seconds, that a monitor waits to connect before it times out. This value must be less than the delay value */
            timeout: number;
        };
        /** @description Create a health monitor on loadbalancer creation */
        "cloud.loadbalancing.HealthMonitorCreate": {
            /** @description Duration between sending probes to members, in seconds */
            delay: number;
            /** @description Monitor HTTP configuration */
            httpConfiguration?: components["schemas"]["cloud.loadbalancing.HealthMonitorHTTPConfiguration"] | null;
            /** @description Number of successful checks before changing the operating status of the member to ONLINE */
            maxRetries: number;
            /** @description Number of allowed check failures before changing the operating status of the member to ERROR */
            maxRetriesDown?: number | null;
            /** @description Type of the monitor */
            monitorType: components["schemas"]["cloud.loadbalancing.LoadBalancerHealthMonitorTypeEnum"];
            /** @description The name of the resource */
            name: string;
            /** @description The operating status of the resource */
            readonly operatingStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerOperatingStatusEnum"];
            /** @description The provisioning status of the resource */
            readonly provisioningStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerProvisioningStatusEnum"];
            /** @description Maximum time, in seconds, that a monitor waits to connect before it times out. This value must be less than the delay value */
            timeout: number;
        };
        /** @description HTTP configuration for loadbalancer health monitor */
        "cloud.loadbalancing.HealthMonitorHTTPConfiguration": {
            /** @description Domain name, which be injected into the HTTP Host Header to the backend server for HTTP health check */
            domainName?: string;
            /** @description Status codes expected in response from the member to declare it healthy; The list of HTTP status codes expected in response from the member to declare it healthy. Specify one of the following values: * A single value, such as 200; * A list, such as 200, 202; * A range, such as 200-204 */
            expectedCodes?: string;
            /** @description HTTP method that the health monitor uses for requests */
            httpMethod: components["schemas"]["cloud.loadbalancing.LoadBalancerHealthMonitorHTTPMethodEnum"];
            /** @description HTTP version that the health monitor uses for requests */
            httpVersion?: components["schemas"]["cloud.loadbalancing.LoadBalancerHealthMonitorHTTPVersionEnum"] | null;
            /** @description HTTP URL path of the request sent by the monitor to test the health of a backend member */
            urlPath?: string;
        };
        /** @description L7 policy */
        "cloud.loadbalancing.L7Policy": {
            /** @description The L7 policy action */
            action: components["schemas"]["cloud.loadbalancing.L7PolicyActionEnum"];
            /** @description A human-readable description for the resource */
            description?: string;
            /** Format: uuid */
            readonly id?: string;
            /**
             * Format: uuid
             * @description The ID of the listener.
             */
            listenerId: string;
            /** @description Human-readable name of the resource */
            name?: string;
            /** @description Operating status of the resource */
            readonly operatingStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerOperatingStatusEnum"];
            /** @description The position of this policy on the listener. Positions start at 1 */
            position?: number;
            /** @description provisioning status of the resource */
            readonly provisioningStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerProvisioningStatusEnum"];
            /** @description Requests matching this policy will be redirected to the specified URL or Prefix URL with the HTTP response code. Valid if action is "redirect_to" or "redirect_prefix" */
            redirectHttpCode?: components["schemas"]["cloud.loadbalancing.L7PolicyRedirectHTTPCodeEnum"] | null;
            /**
             * Format: uuid
             * @description Requests matching this policy will be redirected to the pool with this ID. Only valid if action is "redirect_to_pool"
             */
            redirectPoolId?: string | null;
            /** @description Requests matching this policy will be redirected to this Prefix URL. Only valid if action is "redirect_prefix" */
            redirectPrefix?: string | null;
            /** @description Requests matching this policy will be redirected to this URL. Only valid if action is "redirect_to_url" */
            redirectUrl?: string | null;
        };
        /**
         * @description Loadbalancer L7 policy
         * @enum {string}
         */
        "cloud.loadbalancing.L7PolicyActionEnum": "redirectPrefix" | "redirectToPool" | "redirectToURL" | "reject";
        /**
         * @description Loadbalancer L7 policy redirect HTTP code
         * @enum {integer}
         */
        "cloud.loadbalancing.L7PolicyRedirectHTTPCodeEnum": 301 | 302 | 303 | 307 | 308;
        /** @description L7 policy */
        "cloud.loadbalancing.L7PolicyUpdate": {
            /** @description The L7 policy action */
            action: components["schemas"]["cloud.loadbalancing.L7PolicyActionEnum"];
            /** @description A human-readable description for the resource */
            description?: string;
            /**
             * Format: uuid
             * @description The ID of the listener.
             */
            listenerId?: string;
            /** @description Human-readable name of the resource */
            name?: string;
            /** @description The position of this policy on the listener. Positions start at 1 */
            position?: number;
            /** @description Requests matching this policy will be redirected to the specified URL or Prefix URL with the HTTP response code. Valid if action is "redirect_to" or "redirect_prefix" */
            redirectHttpCode?: number | null;
            /**
             * Format: uuid
             * @description Requests matching this policy will be redirected to the pool with this ID. Only valid if action is "redirect_to_pool"
             */
            redirectPoolId?: string | null;
            /** @description Requests matching this policy will be redirected to this Prefix URL. Only valid if action is "redirect_prefix" */
            redirectPrefix?: string | null;
            /** @description Requests matching this policy will be redirected to this URL. Only valid if action is "redirect_to_url" */
            redirectUrl?: string | null;
        };
        /** @description L7 rule */
        "cloud.loadbalancing.L7Rule": {
            /** @description The comparison type for the L7 rule */
            compareType: components["schemas"]["cloud.loadbalancing.L7RuleCompareTypeEnum"];
            /**
             * Format: uuid
             * @description The ID of the L7 rule
             */
            readonly id?: string;
            /** @description When true the logic of the rule is inverted. For example, with invert set to true, equal to would become not equal to */
            invert?: boolean;
            /** @description The key to use for the comparison. For example, the name of the cookie to evaluate */
            key?: string;
            /** @description Operating status of the resource */
            readonly operatingStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerOperatingStatusEnum"];
            /** @description provisioning status of the resource */
            readonly provisioningStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerProvisioningStatusEnum"];
            /** @description The L7 rule type */
            ruleType: components["schemas"]["cloud.loadbalancing.L7RuleTypeEnum"];
            /** @description The value to use for the comparison. For example, the file type to compare */
            value: string;
        };
        /**
         * @description Loadbalancer L7 rule compare type
         * @enum {string}
         */
        "cloud.loadbalancing.L7RuleCompareTypeEnum": "contains" | "endsWith" | "equalTo" | "regex" | "startsWith";
        /**
         * @description Loadbalancer L7 rule type
         * @enum {string}
         */
        "cloud.loadbalancing.L7RuleTypeEnum": "cookie" | "fileType" | "header" | "hostName" | "path" | "sslConnHasCert" | "sslDNField" | "sslVerifyResult";
        /** @description Listener */
        "cloud.loadbalancing.Listener": {
            /** @description The allowed CIDRs */
            readonly allowedCidrs?: components["schemas"]["ipv4Block"][] | null;
            /**
             * Format: uuid
             * @description The ID of the secret containing the certificate
             */
            readonly certificateId?: string | null;
            /**
             * Format: uuid
             * @description The ID of the default pool
             */
            readonly defaultPoolId?: string | null;
            /** @description Description of the listener */
            readonly description?: string | null;
            /**
             * Format: uuid
             * @description ID of the resource
             */
            readonly id?: string;
            /** @description A list of load balancer IDs */
            readonly loadBalancerIds?: string[];
            /** @description Name of the resource */
            readonly name?: string;
            /** @description Operating status of the listener */
            readonly operatingStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerOperatingStatusEnum"];
            /** @description Port to listen on */
            readonly port?: number;
            /** @description Protocol of the listener */
            readonly protocol?: components["schemas"]["cloud.loadbalancing.ListenerProtocolEnum"];
            /** @description Provisioning status of the listener */
            readonly provisioningStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerProvisioningStatusEnum"];
            /** @description Timeout client data of the listener */
            readonly timeoutClientData?: number | null;
            /** @description Timeout member data of the listener */
            readonly timeoutMemberData?: number | null;
            /** @description TLS versions of the listener */
            readonly tlsVersions?: components["schemas"]["cloud.loadbalancing.ListenerTlsVersionEnum"][] | null;
        };
        /**
         * @description Loadbalancer listener protocol
         * @enum {string}
         */
        "cloud.loadbalancing.ListenerProtocolEnum": "http" | "https" | "prometheus" | "sctp" | "tcp" | "terminatedHTTPS" | "udp";
        /**
         * @description Loadbalancer listener TLS versions
         * @enum {string}
         */
        "cloud.loadbalancing.ListenerTlsVersionEnum": "SSLv3" | "TLSv1" | "TLSv1.1" | "TLSv1.2" | "TLSv1.3";
        /** @description LoadBalancer */
        "cloud.loadbalancing.LoadBalancer": {
            /**
             * Format: date-time
             * @description The UTC date and timestamp when the resource was created
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description ID of the flavor
             */
            readonly flavorId?: string;
            /** @description Information about floating IP */
            readonly floatingIp?: components["schemas"]["cloud.loadbalancing.LoadBalancer.FloatingIp"] | null;
            /**
             * Format: uuid
             * @description ID of the resource
             */
            readonly id?: string;
            /** @description Name of the resource */
            readonly name?: string;
            /** @description Operating status of the resource */
            readonly operatingStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerOperatingStatusEnum"];
            /** @description Provisioning status of the resource */
            readonly provisioningStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerProvisioningStatusEnum"];
            /** @description Region of the resource */
            readonly region?: string;
            /**
             * Format: date-time
             * @description UTC date and timestamp when the resource was created
             */
            readonly updatedAt?: string;
            /** @description IP address of the Virtual IP */
            readonly vipAddress?: components["schemas"]["ip"];
            /**
             * Format: uuid
             * @description Openstack ID of the network for the Virtual IP
             */
            readonly vipNetworkId?: string;
            /**
             * Format: uuid
             * @description ID of the subnet for the Virtual IP
             */
            readonly vipSubnetId?: string;
        };
        /** @description LoadBalancerFloatingIp */
        "cloud.loadbalancing.LoadBalancer.FloatingIp": {
            /**
             * Format: uuid
             * @description ID of the resource
             */
            readonly id?: string;
            /** @description IP Address of the resource */
            readonly ip?: components["schemas"]["ip"];
        };
        /**
         * @description Load balancer Healthmonitor HTTP Method
         * @enum {string}
         */
        "cloud.loadbalancing.LoadBalancerHealthMonitorHTTPMethodEnum": "CONNECT" | "DELETE" | "GET" | "HEAD" | "OPTIONS" | "PATCH" | "POST" | "PUT" | "TRACE";
        /**
         * @description Load balancer Healthmonitor HTTP Version
         * @enum {string}
         */
        "cloud.loadbalancing.LoadBalancerHealthMonitorHTTPVersionEnum": "1.0" | "1.1";
        /**
         * @description Load balancer Healthmonitor type
         * @enum {string}
         */
        "cloud.loadbalancing.LoadBalancerHealthMonitorTypeEnum": "http" | "https" | "ping" | "sctp" | "tcp" | "tls-hello" | "udp-connect";
        /**
         * @description Load balancer operating status
         * @enum {string}
         */
        "cloud.loadbalancing.LoadBalancerOperatingStatusEnum": "degraded" | "draining" | "error" | "noMonitor" | "offline" | "online";
        /**
         * @description Load balancer provisioning status
         * @enum {string}
         */
        "cloud.loadbalancing.LoadBalancerProvisioningStatusEnum": "active" | "creating" | "deleted" | "deleting" | "error" | "updating";
        /** @description Create a loadbalancer */
        "cloud.loadbalancing.Loadbalancer.CreateInput": {
            /**
             * Format: uuid
             * @description Loadbalancer flavor id
             */
            flavorId: string;
            /** @description Listeners to create with the loadbalancer */
            listeners?: components["schemas"]["cloud.loadbalancing.loadbalancer.ListenerCreate"][];
            /** @description Name of the member */
            name?: string;
            /** @description Network information to create the loadbalancer */
            network: components["schemas"]["cloud.loadbalancing.loadbalancer.CreateInput.Network"];
        };
        /** @description Edit a loadbalancer */
        "cloud.loadbalancing.LoadbalancerEdit": {
            /** @description Description of the loadbalancer */
            description?: string;
            /** @description Name of the member */
            name?: string;
        };
        /** @description Pool */
        "cloud.loadbalancing.Pool": {
            /** @description Algorithm of the pool */
            readonly algorithm?: components["schemas"]["cloud.loadbalancing.PoolAlgorithmEnum"];
            /**
             * Format: uuid
             * @description ID of the resource
             */
            readonly id?: string;
            /**
             * Format: uuid
             * @description ID of the listener
             */
            readonly listenerId?: string | null;
            /**
             * Format: uuid
             * @description ID of the loadbalancer
             */
            readonly loadbalancerId?: string;
            /** @description Name of the resource */
            readonly name?: string;
            /** @description Operating status of the resource */
            readonly operatingStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerOperatingStatusEnum"];
            /** @description Protocol of the pool */
            readonly protocol?: components["schemas"]["cloud.loadbalancing.PoolProtocolEnum"];
            /** @description Provisioning status of the resource */
            readonly provisioningStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerProvisioningStatusEnum"];
            /** @description Information about session persistence */
            readonly sessionPersistence?: components["schemas"]["cloud.loadbalancing.PoolSessionPersistence"] | null;
        };
        /**
         * @description Pool algorithm
         * @enum {string}
         */
        "cloud.loadbalancing.PoolAlgorithmEnum": "leastConnections" | "roundRobin" | "sourceIP";
        /** @description Pool */
        "cloud.loadbalancing.PoolCreate": {
            /** @description Algorithm of the pool */
            algorithm: components["schemas"]["cloud.loadbalancing.PoolAlgorithmEnum"];
            /**
             * Format: uuid
             * @description ID of the listener
             */
            listenerId?: string;
            /**
             * Format: uuid
             * @description ID of the loadbalancer
             */
            loadbalancerId?: string;
            /** @description Name of the resource */
            name?: string;
            /** @description Protocol of the pool */
            protocol: components["schemas"]["cloud.loadbalancing.PoolProtocolEnum"];
            /** @description Information about session persistence */
            sessionPersistence?: components["schemas"]["cloud.loadbalancing.PoolSessionPersistence"] | null;
        };
        /**
         * @description Pool protocol
         * @enum {string}
         */
        "cloud.loadbalancing.PoolProtocolEnum": "http" | "https" | "proxy" | "proxyV2" | "sctp" | "tcp" | "udp";
        /** @description PoolSessionPersistence */
        "cloud.loadbalancing.PoolSessionPersistence": {
            /** @description Cookie name, only applicable to session persistence through cookie */
            cookieName?: string;
            /** @description Type of session persistence */
            type?: components["schemas"]["cloud.loadbalancing.PoolSessionPersistenceTypeEnum"];
        };
        /**
         * @description Pool session persistence type
         * @enum {string}
         */
        "cloud.loadbalancing.PoolSessionPersistenceTypeEnum": "appCookie" | "disabled" | "httpCookie" | "sourceIP";
        /** @description Parameters to update a load balancer pool */
        "cloud.loadbalancing.PoolUpdate": {
            /** @description Algorithm of the pool */
            algorithm?: components["schemas"]["cloud.loadbalancing.PoolAlgorithmEnum"] | null;
            /** @description Name of the resource */
            name?: string | null;
            sessionPersistence?: components["schemas"]["cloud.loadbalancing.PoolSessionPersistence"] | null;
        };
        /** @description Health monitor for LoadBalancer */
        "cloud.loadbalancing.UpdateHealthMonitor": {
            /** @description Duration between sending probes to members, in seconds */
            delay?: number;
            /** @description Monitor HTTP configuration */
            httpConfiguration?: components["schemas"]["cloud.loadbalancing.HealthMonitorHTTPConfiguration"];
            /** @description Number of successful checks before changing the operating status of the member to ONLINE */
            maxRetries?: number;
            /** @description Number of allowed check failures before changing the operating status of the member to ERROR */
            maxRetriesDown?: number;
            /** @description The name of the resource */
            name?: string;
            /** @description Maximum time, in seconds, that a monitor waits to connect before it times out. This value must be less than the delay value */
            timeout?: number;
        };
        /** @description Network information to create a loadbalancer */
        "cloud.loadbalancing.loadbalancer.CreateInput.Network": {
            /** @description Information to private network */
            private: components["schemas"]["cloud.loadbalancing.loadbalancer.CreateInput.Network.Private"];
        };
        /** @description Network information to create a loadbalancer */
        "cloud.loadbalancing.loadbalancer.CreateInput.Network.Private": {
            /** @description Floating IP to associate */
            floatingIp?: components["schemas"]["cloud.loadbalancing.loadbalancer.CreateInput.Network.Private.FloatingIp"];
            /** @description Floating IP to create */
            floatingIpCreate?: components["schemas"]["cloud.loadbalancing.loadbalancer.CreateInput.Network.Private.FloatingIpCreate"];
            /** @description Gateway to associate */
            gateway?: components["schemas"]["cloud.loadbalancing.loadbalancer.CreateInput.Network.Private.Gateway"];
            /** @description Gateway to create */
            gatewayCreate?: components["schemas"]["cloud.loadbalancing.loadbalancer.CreateInput.Network.Private.GatewayCreate"];
            /** @description Network to associate */
            network: components["schemas"]["cloud.loadbalancing.loadbalancer.CreateInput.Network.Private.Network"];
        };
        /** @description Information to attach floatingIp */
        "cloud.loadbalancing.loadbalancer.CreateInput.Network.Private.FloatingIp": {
            /**
             * Format: uuid
             * @description ID of the floatingIp
             */
            id: string;
        };
        /** @description Information to create floatingIp */
        "cloud.loadbalancing.loadbalancer.CreateInput.Network.Private.FloatingIpCreate": {
            /** @description Description for the floatingIp */
            description: string;
        };
        /** @description Information to attach Gateway */
        "cloud.loadbalancing.loadbalancer.CreateInput.Network.Private.Gateway": {
            /**
             * Format: uuid
             * @description ID of the gateway
             */
            id: string;
        };
        /** @description Information to create a Gateway */
        "cloud.loadbalancing.loadbalancer.CreateInput.Network.Private.GatewayCreate": {
            /** @description Model of the gateway */
            model: components["schemas"]["cloud.network.GatewayModelEnum"];
            /** @description Name of the gateway */
            name: string;
        };
        /** @description Network information to associate a network */
        "cloud.loadbalancing.loadbalancer.CreateInput.Network.Private.Network": {
            /**
             * Format: uuid
             * @description Private network ID
             */
            id: string;
            /**
             * Format: uuid
             * @description Subnet ID
             */
            subnetId: string;
        };
        /** @description Create a listener on loadbalancer creation */
        "cloud.loadbalancing.loadbalancer.ListenerCreate": {
            /** @description The allowed CIDRs */
            allowedCidrs?: components["schemas"]["ipv4Block"][];
            /** @description The description of the listener */
            description?: string;
            /** @description Name of the listener */
            name?: string;
            /** @description Listener pool */
            pool?: components["schemas"]["cloud.loadbalancing.loadbalancer.PoolCreate"];
            /** @description Listener port */
            port: number;
            /** @description Protocol for the listener */
            protocol: components["schemas"]["cloud.loadbalancing.ListenerProtocolEnum"];
            /**
             * Format: uuid
             * @description Secret ID to get certificate for SSL listener creation
             */
            secretId?: string;
            /** @description Timeout client data of the listener */
            timeoutClientData?: number;
            /** @description Timeout member data of the listener */
            timeoutMemberData?: number;
            /** @description TLS versions of the listener */
            tlsVersions?: components["schemas"]["cloud.loadbalancing.ListenerTlsVersionEnum"][];
        };
        /** @description Create a member on loadbalancer creation */
        "cloud.loadbalancing.loadbalancer.MemberCreate": {
            /** @description IP address of the resource */
            address: components["schemas"]["ip"];
            /** @description Name of the member */
            name?: string;
            /** @description Protocol port number for the resource */
            protocolPort: number;
            /** @description Weight of a member determines the portion of requests or connections it services compared to the other members of the pool. Between 1 and 256. */
            weight?: number | null;
        };
        /** @description Create a pool on loadbalancer creation */
        "cloud.loadbalancing.loadbalancer.PoolCreate": {
            /** @description Pool algorithm to split traffic between members */
            algorithm: components["schemas"]["cloud.loadbalancing.PoolAlgorithmEnum"];
            /** @description Pool health monitor */
            healthMonitor?: components["schemas"]["cloud.loadbalancing.HealthMonitorCreate"] | null;
            /** @description Pool members */
            members?: components["schemas"]["cloud.loadbalancing.loadbalancer.MemberCreate"][];
            /** @description Name of the pool */
            name?: string;
            /** @description Protocol for the pool */
            protocol: components["schemas"]["cloud.loadbalancing.PoolProtocolEnum"];
            /** @description Pool session persistence */
            sessionPersistence?: components["schemas"]["cloud.loadbalancing.PoolSessionPersistence"];
        };
        /** @description Loadbalancer statistics */
        "cloud.loadbalancing.loadbalancer.Stats": {
            /** @description Number of currently active connections */
            readonly activeConnections?: number;
            /** @description Total bytes received */
            readonly bytesIn?: number;
            /** @description Total bytes sent */
            readonly bytesOut?: number;
            /** @description Total requests that were unable to be fulfilled */
            readonly requestErrors?: number;
            /** @description Total connections handled */
            readonly totalConnections?: number;
        };
        /** @description Pool Members */
        "cloud.loadbalancing.pool.CreateMembers": {
            /** @description Members of a pool */
            members: components["schemas"]["cloud.loadbalancing.pool.Member"][];
        };
        /** @description Member */
        "cloud.loadbalancing.pool.Member": {
            /** @description IP address of the resource */
            address: components["schemas"]["ip"];
            /**
             * Format: uuid
             * @description ID of the resource
             */
            readonly id?: string;
            /** @description Name of the resource */
            name?: string;
            /** @description Operating status of the resource */
            readonly operatingStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerOperatingStatusEnum"];
            /** @description Protocol port number for the resource */
            protocolPort: number;
            /** @description Provisioning status of the resource */
            readonly provisioningStatus?: components["schemas"]["cloud.loadbalancing.LoadBalancerProvisioningStatusEnum"];
            /** @description Weight of a member determines the portion of requests or connections it services compared to the other members of the pool */
            weight?: number | null;
        };
        /** @description Parameters to update a pool member */
        "cloud.loadbalancing.pool.MemberUpdate": {
            /** @description Name of the resource */
            name?: string | null;
            /** @description Weight of a member determines the portion of requests or connections it services compared to the other members of the pool */
            weight?: number | null;
        };
        /** @description Migration */
        "cloud.migration.Migration": {
            /**
             * Format: date-time
             * @description The planned date of the migration
             */
            readonly date?: string;
            /** @description Migration Id */
            readonly migrationId?: string;
            /** @description The id of the resource to migrate */
            readonly resourceId?: string;
            /** @description The type of the resource to migrate */
            readonly resourceType?: components["schemas"]["cloud.migration.ResourceTypeEnum"];
        };
        /**
         * @description ResourceTypeEnum
         * @enum {string}
         */
        "cloud.migration.ResourceTypeEnum": "instance";
        /** @description Input to create a gateway */
        "cloud.network.CreateGateway": {
            /** @description Model of the gateway */
            model: components["schemas"]["cloud.network.GatewayModelEnum"];
            /** @description Name of the gateway */
            name: string;
            /** @description Information to create the network for the gateway */
            network: components["schemas"]["cloud.network.CreateNetworkForGatewaySummary"];
        };
        /** @description Parameters to create a gateway from another resource creation */
        "cloud.network.CreateGatewaySummary": {
            /** @description Model of the gateway */
            model: components["schemas"]["cloud.network.GatewayModelEnum"];
            /** @description Gateway name */
            name: string;
        };
        /** @description Parameters to create a network with a gateway */
        "cloud.network.CreateNetwork": {
            gateway?: components["schemas"]["cloud.network.CreateGatewaySummary"] | null;
            /** @description Network name */
            name: string;
            subnet: components["schemas"]["cloud.network.CreateSubnetSummary"];
            /** @description VLAN id, between 1 and 4000 */
            vlanId?: number;
        };
        /** @description Parameters to create a network from another resource creation */
        "cloud.network.CreateNetworkForGatewaySummary": {
            /** @description Name of the network */
            name: string;
            /** @description Subnet of the network */
            subnet: components["schemas"]["cloud.network.CreateSubnetForGatewaySummary"];
            /** @description VLAN id, between 1 and 4000 */
            vlanId?: number;
        };
        /** @description Parameters to create a subnet from another resource creation */
        "cloud.network.CreateSubnetForGatewaySummary": {
            /** @description Subnet range in CIDR notation */
            cidr: components["schemas"]["ipBlock"];
            /** @description Enable DHCP for the subnet */
            enableDhcp: boolean;
            /** @description IP version */
            ipVersion: number;
        };
        /** @description Parameters to create a subnet from another resource creation */
        "cloud.network.CreateSubnetSummary": {
            /** @description Subnet range in CIDR notation */
            cidr: components["schemas"]["ipBlock"];
            /** @description Enable DHCP for the subnet */
            enableDhcp: boolean;
            /** @description Set a gateway ip for the subnet */
            enableGatewayIp: boolean;
            /** @description IP version */
            ipVersion: number;
        };
        /** @description Gateway */
        "cloud.network.Gateway": {
            /** @description External information */
            readonly externalInformation?: components["schemas"]["cloud.network.gateway.ExternalInformation"] | null;
            /**
             * Format: uuid
             * @description ID of the gateway
             */
            readonly id?: string;
            /** @description Interfaces list of the gateway */
            readonly interfaces?: components["schemas"]["cloud.network.gateway.Interface"][];
            /** @description Model of the gateway */
            readonly model?: components["schemas"]["cloud.network.GatewayModelEnum"];
            /** @description Name of the gateway */
            readonly name?: string;
            /** @description Gateway region */
            readonly region?: string;
            /** @description Status of the gateway */
            readonly status?: components["schemas"]["cloud.network.GatewayStatusEnum"];
        };
        /**
         * @description GatewayModelEnum
         * @enum {string}
         */
        "cloud.network.GatewayModelEnum": "2xl" | "3xl" | "l" | "m" | "s" | "xl";
        /**
         * @description GatewayStatusEnum
         * @enum {string}
         */
        "cloud.network.GatewayStatusEnum": "active" | "building" | "down" | "error";
        /** @description IPPool */
        "cloud.network.IPPool": {
            /** @description Enable DHCP */
            readonly dhcp?: boolean;
            /** @description Last IP for this region (eg: 192.168.1.24) */
            readonly end?: components["schemas"]["ip"];
            /** @description Global network with cidr (eg: 192.168.1.0/24) */
            readonly network?: components["schemas"]["ipBlock"];
            /** @description Region where this subnet will be created */
            readonly region?: string;
            /** @description First IP for this region (eg: 192.168.1.12) */
            readonly start?: components["schemas"]["ip"];
        };
        /** @description Network */
        "cloud.network.Network": {
            /** @description Network id */
            readonly id?: string;
            /** @description Network name */
            readonly name?: string;
            /** @description Details about private network in region */
            readonly regions?: components["schemas"]["cloud.network.NetworkRegion"][];
            /** @description Network status */
            readonly status?: components["schemas"]["cloud.network.NetworkStatusEnum"];
            /** @description Network type */
            readonly type?: components["schemas"]["cloud.network.NetworkTypeEnum"] | null;
            /** @description Network VLAN id */
            readonly vlanId?: number;
        };
        /** @description NetworkRegion */
        "cloud.network.NetworkRegion": {
            /** @description Network id on openstack region */
            readonly openstackId?: string | null;
            /** @description Network region */
            readonly region?: string;
            /** @description Network region status */
            readonly status?: components["schemas"]["cloud.network.NetworkRegionStatusEnum"];
        };
        /**
         * @description NetworkRegionStatusEnum
         * @enum {string}
         */
        "cloud.network.NetworkRegionStatusEnum": "ACTIVE" | "BUILDING";
        /**
         * @description NetworkStatusEnum
         * @enum {string}
         */
        "cloud.network.NetworkStatusEnum": "ACTIVE" | "BUILDING" | "DELETING";
        /**
         * @description NetworkTypeEnum
         * @enum {string}
         */
        "cloud.network.NetworkTypeEnum": "private" | "public";
        /**
         * @description NetworkVisibilityEnum
         * @enum {string}
         */
        "cloud.network.NetworkVisibilityEnum": "private" | "public";
        /** @description Subnet */
        "cloud.network.Subnet": {
            /** @description Subnet CIDR */
            readonly cidr?: components["schemas"]["ipBlock"];
            /** @description Is DHCP enabled for the subnet */
            readonly dhcpEnabled?: boolean;
            /** @description Gateway IP in the subnet */
            readonly gatewayIp?: components["schemas"]["ip"] | null;
            /** @description Subnet id */
            readonly id?: string;
            /** @description List of ip pools allocated in subnet */
            readonly ipPools?: components["schemas"]["cloud.network.IPPool"][];
        };
        /** @description Input to update a gateway */
        "cloud.network.UpdateGateway": {
            /** @description Model of the gateway */
            model: components["schemas"]["cloud.network.GatewayModelEnum"];
            /** @description Name of the gateway */
            name: string;
        };
        /** @description Input to create a new interface for a gateway */
        "cloud.network.gateway.CreateInterface": {
            /**
             * Format: uuid
             * @description Subnet id to add
             */
            subnetId: string;
        };
        /** @description External information of the gateway */
        "cloud.network.gateway.ExternalInformation": {
            /** @description External ips of the gateway */
            readonly ips?: components["schemas"]["cloud.network.gateway.IpSubnet"][];
            /**
             * Format: uuid
             * @description External network ID of the gateway
             */
            readonly networkId?: string;
        };
        /** @description Interface of the gateway */
        "cloud.network.gateway.Interface": {
            /**
             * Format: uuid
             * @description ID of the interface
             */
            readonly id?: string;
            /** @description IP of the interface */
            readonly ip?: components["schemas"]["ip"];
            /**
             * Format: uuid
             * @description Network ID of the interface
             */
            readonly networkId?: string;
            /**
             * Format: uuid
             * @description Subnet ID of the interface
             */
            readonly subnetId?: string;
        };
        /** @description IP and subnet information */
        "cloud.network.gateway.IpSubnet": {
            /** @description External IP of the gateway */
            readonly ip?: components["schemas"]["ip"];
            /**
             * Format: uuid
             * @description Subnet ID of the ip
             */
            readonly subnetId?: string;
        };
        /** @description Cloud Order */
        "cloud.order.Order": {
            /**
             * Format: date-time
             * @description Order creation date
             */
            readonly date?: string;
            /** @description Order id */
            readonly orderId?: number;
            /** @description Order plan code */
            readonly planCode?: string;
            /** @description Service created */
            readonly serviceName?: string | null;
            readonly status?: components["schemas"]["cloud.order.StatusEnum"];
        };
        /**
         * @description Order status
         * @enum {string}
         */
        "cloud.order.StatusEnum": "delivered" | "delivering" | "unknown" | "unpaid";
        /** @description Public Cloud products availability */
        "cloud.order.rule.Availability": {
            /** @description Plan availability */
            readonly plans?: components["schemas"]["cloud.order.rule.AvailabilityPlan"][];
            /** @description Product availability */
            readonly products?: components["schemas"]["cloud.order.rule.AvailabilityProduct"][];
        };
        /** @description Public Cloud plan availability */
        "cloud.order.rule.AvailabilityPlan": {
            /** @description Plan code */
            readonly code?: string;
            /** @description Plan is available on those regions */
            readonly regions?: string[];
        };
        /** @description Public Cloud product availability */
        "cloud.order.rule.AvailabilityProduct": {
            /** @description Product name */
            readonly name?: string;
            /** @description Product is available on those regions */
            readonly regions?: string[];
        };
        /** @description Public Cloud instance categories */
        "cloud.order.rule.InstanceCategories": {
            /** @description Instance categories */
            readonly categories?: components["schemas"]["cloud.order.rule.InstanceCategory"][];
            /** @description Default instance category name */
            readonly defaultCategory?: string;
        };
        /** @description Public Cloud instance category */
        "cloud.order.rule.InstanceCategory": {
            /** @description Instance category name */
            readonly category?: components["schemas"]["cloud.order.rule.InstanceCategoryTypeEnum"];
            /** @description Instance category is new */
            readonly isNew?: boolean | null;
            /** @description Instance flavor matching patterns */
            readonly kinds?: string[];
            /** @description Instance category title */
            readonly title?: string;
        };
        /**
         * @description InstanceCategoryTypeEnum
         * @enum {string}
         */
        "cloud.order.rule.InstanceCategoryTypeEnum": "accelerated" | "balanced" | "baremetal" | "discovery" | "iops" | "ram" | "vps";
        /** @description AllocationPool */
        "cloud.project.AllocationPool": {
            /** @description Last IP for the pool (eg: 192.168.1.24) */
            readonly end?: components["schemas"]["ip"];
            /** @description First IP for the pool (eg: 192.168.1.12) */
            readonly start?: components["schemas"]["ip"];
        };
        /** @description A load balancer to handle application workload */
        "cloud.project.ApplicationLoadBalancer": {
            /** @description Address to reach the load balancer */
            readonly address?: components["schemas"]["cloud.project.loadbalancer.Address"];
            /** @description Information about version of the configuration */
            readonly configuration?: components["schemas"]["cloud.project.loadbalancer.ConfigurationVersion"];
            /**
             * Format: date-time
             * @description Creation date and time of the load balancer
             */
            readonly createdAt?: string;
            /** @description Description of the load balancer */
            description?: string | null;
            /** @description IPs used by the load balancer to contact backend's servers */
            readonly egressAddress?: components["schemas"]["cloud.project.loadbalancer.Addresses"];
            /**
             * Format: uuid
             * @description ID of the load balancer
             */
            readonly id?: string;
            /** @description Name of the load balancer */
            name?: string | null;
            /** @description Openstack region where the load balancer is hosted */
            readonly openstackRegion?: string;
            /** @description Region where the load balancer is hosted */
            readonly region?: string;
            /** @description Size of the load balancer */
            size?: components["schemas"]["cloud.project.loadbalancer.SizeEnum"];
            /** @description Status of a load balancer */
            readonly status?: components["schemas"]["cloud.project.loadbalancer.StatusEnum"];
        };
        /** @description A load balancer to handle application workload */
        "cloud.project.ApplicationLoadBalancerCreation": {
            /** @description Description of the load balancer */
            description?: string | null;
            /**
             * Format: uuid
             * @description ID of the load balancer
             */
            readonly id?: string;
            /** @description Name of the load balancer */
            name?: string | null;
            /** @description Networking definition */
            networking?: components["schemas"]["cloud.project.loadbalancer.networking.NetworkingCreation"] | null;
            /** @description Openstack Region where the load balancer is hosted */
            openstackRegion?: string;
            /** @description Region where the load balancer is hosted */
            region: string;
            /** @description Size of the load balancer */
            size?: components["schemas"]["cloud.project.loadbalancer.SizeEnum"] | null;
        };
        /** @description Usage information for current month on your project */
        "cloud.project.BandwidthStorageUsage": {
            /** @description Downloaded bytes from your containers */
            downloadedBytes?: number;
            /** @description Region */
            region?: string;
            /** @description Cost for your storage bandwidth */
            total?: components["schemas"]["order.Price"];
        };
        /** @description Project bill */
        "cloud.project.Bill": {
            /** @description Bill id */
            billId?: string;
            /** @description Bill type */
            type?: components["schemas"]["cloud.project.BillTypeEnum"];
        };
        /**
         * @description Possible values for bill type
         * @enum {string}
         */
        "cloud.project.BillTypeEnum": "creditPurchased" | "monthlyConsumption" | "monthlyInstanceActivation";
        /** @description A Certificate to use in your NFVs */
        "cloud.project.Certificate": {
            /**
             * Format: date-time
             * @description Date after when the certificate is not valid
             */
            readonly expireAt?: string;
            /** @description Fingerprint of the cert (prefixed by hashing algorithm used) */
            readonly fingerprint?: string;
            /**
             * Format: uuid
             * @description Unique ID of the certificate
             */
            readonly id?: string;
            /** @description Issue of the certificate (extract from certificate) */
            readonly issuer?: string;
            /** @description Kind of certificate */
            readonly kind?: components["schemas"]["cloud.project.CertificateKindEnum"];
            /** @description Name of the certificate */
            readonly name?: string;
            /** @description Serial number of the certificate (extract from certificate) */
            readonly serialNumber?: string;
            /** @description List of SANs (extract from certificate) */
            readonly serverAlternativeNames?: components["schemas"]["cloud.project.certificate.ServerAlternativeName"][];
            /** @description Certificate status, to quickly know it can safely be used */
            readonly status?: components["schemas"]["cloud.project.CertificateStatusEnum"];
            /** @description Subject of the certificate (extract from certificate) */
            readonly subject?: string;
            /**
             * Format: date-time
             * @description Date after when the certificate is valid
             */
            readonly validAt?: string;
            /** @description Version of certificate (incremented every time you push a new certificate with the same name) */
            readonly version?: number;
        };
        /** @description Add a new certificate */
        "cloud.project.CertificateAdd": {
            /** @description Import an existing certificate */
            import?: components["schemas"]["cloud.project.certificate.Import"] | null;
            /** @description Name of the certificate */
            name: string;
        };
        /**
         * @description Certificate kind
         * @enum {string}
         */
        "cloud.project.CertificateKindEnum": "IMPORTED";
        /**
         * @description Certificate status
         * @enum {string}
         */
        "cloud.project.CertificateStatusEnum": "EXPIRED" | "NOT_YET_VALID" | "OK" | "REVOKED";
        /** @description Usage information for current month on your project */
        "cloud.project.CurrentUsage": {
            /** @description Instances usage */
            instances?: components["schemas"]["cloud.project.InstancesUsage"];
            /** @description Snapshots usage */
            snapshots?: components["schemas"]["cloud.project.SnapshotsUsage"];
            /** @description Storage usage */
            storage?: components["schemas"]["cloud.project.StorageUsage"];
            /** @description Total cost for the project */
            total?: components["schemas"]["order.Price"];
            /** @description Snapshots usage */
            volumeSnapshots?: components["schemas"]["cloud.project.SnapshotsUsage"];
            /** @description Volumes usage */
            volumes?: components["schemas"]["cloud.project.VolumesUsage"];
        };
        /**
         * @description Possible eligibility actions
         * @enum {string}
         */
        "cloud.project.EligibilityAction": "addPaymentMethod" | "askIncreaseProjectsQuota" | "challengePaymentMethod" | "verifyPaypal";
        /** @description Eligibility information */
        "cloud.project.EligibilityInfo": {
            /** @description Actions to perform to be eligible */
            actionsRequired?: components["schemas"]["cloud.project.EligibilityAction"][] | null;
            /** @description Cloud project order */
            minimumCredit?: components["schemas"]["order.Price"] | null;
            /** @description Payment method accepted to order Public Cloud project */
            paymentMethodsAuthorized?: components["schemas"]["cloud.project.PaymentMethodAuthorized"][] | null;
            /** @description Information about voucher code */
            voucher?: components["schemas"]["cloud.project.NewProjectInfoVoucher"] | null;
        };
        /** @description A floating ip */
        "cloud.project.FloatingIp": {
            /** @description Associated entity with the floating ip */
            readonly associatedEntity?: components["schemas"]["cloud.project.floatingIp.AssociatedEntity"] | null;
            /**
             * Format: uuid
             * @description ID of the floating ip
             */
            readonly id?: string;
            /** @description Value of the floating ip */
            readonly ip?: components["schemas"]["ip"];
            /**
             * Format: uuid
             * @description ID of the network
             */
            readonly networkId?: string;
            /** @description Floating ip region */
            readonly region?: string | null;
            /** @description Status of the floating ip */
            readonly status?: components["schemas"]["cloud.project.floatingIp.StatusEnum"];
        };
        /** @description Instance monthly billing details */
        "cloud.project.InstanceMonthlyBilling": {
            /**
             * Format: date-time
             * @description Monthly billing activation date
             */
            activatedOn?: string;
            /** @description Cost */
            cost?: components["schemas"]["order.Price"];
        };
        /** @description Instance usage */
        "cloud.project.InstanceUsageDetail": {
            /** @description Hourly price */
            hourly?: components["schemas"]["order.Price"] | null;
            /** @description Instance id */
            instanceId?: string;
            /** @description Monthly price */
            monthly?: components["schemas"]["cloud.project.InstanceMonthlyBilling"] | null;
            /** @description Is monthly billing enabled */
            monthlyBilling?: boolean;
            /** @description Reference */
            reference?: string;
        };
        /** @description Instances usage for current month */
        "cloud.project.InstancesUsage": {
            /** @description Instance usage details */
            detail?: components["schemas"]["cloud.project.InstanceUsageDetail"][];
            /** @description Total cost for the instances */
            total?: components["schemas"]["order.Price"];
        };
        /** @description A load balancer to handle workload */
        "cloud.project.LoadBalancer": {
            /** @description Address to reach the load balancer */
            readonly address?: components["schemas"]["cloud.project.loadbalancer.Address"];
            /** @description Information about version of the configuration */
            readonly configuration?: components["schemas"]["cloud.project.loadbalancer.ConfigurationVersion"];
            /**
             * Format: date-time
             * @description Creation date and time of the load balancer
             */
            readonly createdAt?: string;
            /** @description Description of the load balancer */
            description?: string | null;
            /** @description IPs used by the load balancer to contact backend's servers */
            readonly egressAddress?: components["schemas"]["cloud.project.loadbalancer.Addresses"];
            /**
             * Format: uuid
             * @description ID of the load balancer
             */
            readonly id?: string;
            /** @description Name of the load balancer */
            name?: string | null;
            /** @description Networking definition */
            readonly networking?: components["schemas"]["cloud.project.loadbalancer.networking.Networking"];
            /** @description Openstack region where the load balancer is hosted */
            readonly openstackRegion?: string;
            /** @description Region where the load balancer is hosted */
            readonly region?: string;
            /** @description Size of the load balancer */
            size?: components["schemas"]["cloud.project.loadbalancer.SizeEnum"];
            /** @description Status of a load balancer */
            readonly status?: components["schemas"]["cloud.project.loadbalancer.StatusEnum"];
        };
        /** @description A load balancer to handle workload */
        "cloud.project.LoadBalancerCreation": {
            /** @description Description of the load balancer */
            description?: string | null;
            /**
             * Format: uuid
             * @description ID of the load balancer
             */
            readonly id?: string;
            /** @description Name of the load balancer */
            name?: string | null;
            /** @description Networking definition */
            networking?: components["schemas"]["cloud.project.loadbalancer.networking.NetworkingCreation"] | null;
            /** @description Openstack Region where the load balancer is hosted */
            openstackRegion?: string;
            /** @description Region where the load balancer is hosted */
            region: string;
            /** @description Size of the load balancer */
            size?: components["schemas"]["cloud.project.loadbalancer.SizeEnum"] | null;
        };
        /** @description Network */
        "cloud.project.Network": {
            /** @description Network id */
            readonly id?: string;
            /** @description Network name */
            readonly name?: string;
            /** @description Network region */
            readonly region?: string | null;
            /** @description Network visibility */
            readonly visibility?: components["schemas"]["cloud.network.NetworkVisibilityEnum"];
            /** @description Network VLAN id */
            readonly vlanId?: number | null;
        };
        /** @description A network load balancer for TCP/UDP workloads */
        "cloud.project.NetworkLoadBalancer": {
            /** @description Address to reach the load balancer */
            readonly address?: components["schemas"]["cloud.project.loadbalancer.Address"];
            /** @description Information about version of the configuration */
            readonly configuration?: components["schemas"]["cloud.project.loadbalancer.ConfigurationVersion"];
            /**
             * Format: date-time
             * @description Creation date and time of the load balancer
             */
            readonly createdAt?: string;
            /** @description Description of the load balancer */
            description?: string | null;
            /** @description IPs used by the load balancer to contact backend's servers */
            readonly egressAddress?: components["schemas"]["cloud.project.loadbalancer.Addresses"];
            /**
             * Format: uuid
             * @description ID of the load balancer
             */
            readonly id?: string;
            /** @description Name of the load balancer */
            name?: string | null;
            /** @description Openstack region where the load balancer is hosted */
            readonly openstackRegion?: string;
            /** @description Region where the load balancer is hosted */
            readonly region?: string;
            /** @description Size of the load balancer */
            size?: components["schemas"]["cloud.project.loadbalancer.SizeEnum"];
            /** @description Status of a load balancer */
            readonly status?: components["schemas"]["cloud.project.loadbalancer.StatusEnum"];
        };
        /** @description A network load balancer for TCP/UDP workloads */
        "cloud.project.NetworkLoadBalancerCreation": {
            /** @description Description of the load balancer */
            description?: string | null;
            /**
             * Format: uuid
             * @description ID of the load balancer
             */
            readonly id?: string;
            /** @description Name of the load balancer */
            name?: string | null;
            /** @description Networking definition */
            networking?: components["schemas"]["cloud.project.loadbalancer.networking.NetworkingCreation"] | null;
            /** @description Openstack Region where the load balancer is hosted */
            openstackRegion?: string;
            /** @description Region where the load balancer is hosted */
            region: string;
            /** @description Size of the load balancer */
            size?: components["schemas"]["cloud.project.loadbalancer.SizeEnum"] | null;
        };
        /** @description Information about voucher */
        "cloud.project.NewProjectInfoVoucher": {
            /** @description Credit added thanks to the voucher */
            credit?: components["schemas"]["order.Price"];
            /** @description A valid registered payment method is required to use the voucher */
            paymentMethodRequired?: boolean;
        };
        /**
         * @description List of accepted payment methods
         * @enum {string}
         */
        "cloud.project.PaymentMethodAuthorized": "bankAccount" | "credit" | "creditCard" | "paypal" | "rupay" | "sepaDirectDebit";
        /** @description Product agreements */
        "cloud.project.ProductAgreements": {
            /** @description Agreements to validate */
            agreementsToValidate?: number[] | null;
            /** @description Agreements already validated */
            agreementsValidated?: number[] | null;
        };
        /**
         * @description Possible values for cloud project product name
         * @enum {string}
         */
        "cloud.project.ProductNameEnum": "registry";
        /**
         * @description Possible values for project status
         * @enum {string}
         */
        "cloud.project.ProjectStatus": "creating" | "deleted" | "deleting" | "ok" | "suspended";
        /**
         * @description Possible values for project status
         * @enum {string}
         */
        "cloud.project.ProjectStatusEnum": "creating" | "deleted" | "deleting" | "ok" | "suspended";
        /** @description Usage information on your project */
        "cloud.project.ProjectUsage": {
            /** @description Current usage details */
            current?: components["schemas"]["cloud.project.CurrentUsage"];
        };
        /** @description Snapshot usage */
        "cloud.project.SnapshotUsageDetail": {
            /** @description Snapshot price */
            price?: components["schemas"]["order.Price"];
            /** @description Snapshot region */
            region?: string;
            /** @description Stored snapshot size in gigabytes */
            storedSize?: components["schemas"]["complexType.UnitAndValue_double"];
        };
        /** @description Snapshots usage for current month */
        "cloud.project.SnapshotsUsage": {
            /** @description Snapshots usage details */
            detail?: components["schemas"]["cloud.project.SnapshotUsageDetail"][];
            /** @description Total cost for the snapshots */
            total?: components["schemas"]["order.Price"];
        };
        /** @description Usage information for current month on your project */
        "cloud.project.StorageUsage": {
            /** @description Storage bandwidth usage */
            bandwidth?: components["schemas"]["cloud.project.BandwidthStorageUsage"][];
            /** @description Cost for your storage in all your containers */
            total?: components["schemas"]["order.Price"];
            /** @description Storage volume usage */
            volume?: components["schemas"]["cloud.project.StorageVolumeUsage"][];
        };
        /** @description Storage volume used on your project */
        "cloud.project.StorageVolumeUsage": {
            /** @description Region */
            region?: string;
            /** @description Bytes stored in your containers */
            storedBytes?: number;
            /** @description Cost for your storage bandwidth */
            total?: components["schemas"]["order.Price"];
        };
        /** @description Subnet */
        "cloud.project.Subnet": {
            /** @description List of ip pools allocated in subnet */
            readonly allocationPools?: components["schemas"]["cloud.project.AllocationPool"][];
            /** @description Subnet CIDR */
            readonly cidr?: components["schemas"]["ipBlock"];
            /** @description If DHCP is enabled on subnet */
            readonly dhcpEnabled?: boolean;
            /** @description Gateway IP */
            readonly gatewayIp?: components["schemas"]["ip"] | null;
            /** @description Subnet id */
            readonly id?: string;
            /** @description IP Version (4 or 6) */
            readonly ipVersion?: number;
            /** @description Subnet name */
            readonly name?: string;
        };
        /**
         * @description Possible values for volume type
         * @enum {string}
         */
        "cloud.project.VolumeType": "classic" | "high-speed";
        /** @description Volume usage */
        "cloud.project.VolumeUsageDetail": {
            /** @description Volume price */
            price?: components["schemas"]["order.Price"];
            /** @description Volume capacity in gigabytes */
            volumeCapacity?: components["schemas"]["complexType.UnitAndValue_long"];
            /** @description Volume id */
            volumeId?: string;
            /** @description Volume type */
            volumeType?: components["schemas"]["cloud.project.VolumeType"];
        };
        /** @description Volumes usage for current month */
        "cloud.project.VolumesUsage": {
            /** @description Volume usage details */
            detail?: components["schemas"]["cloud.project.VolumeUsageDetail"][];
            /** @description Total cost for the volumes */
            total?: components["schemas"]["order.Price"];
        };
        /** @description Authorization status */
        "cloud.project.ai.AuthorizationStatus": {
            /** @description True if project is authorized to use AI Solutions Platform */
            readonly authorized?: boolean;
        };
        /** @description AI Solutions basic auth credentials input */
        "cloud.project.ai.BasicAuthCredentialsInput": {
            /**
             * Format: password
             * @description Basic Auth Password
             */
            password: string;
            /** @description Basic Auth Username */
            username: string;
        };
        /** @description AI Solutions CLI command */
        "cloud.project.ai.Command": {
            /** @description AI Solutions CLI command */
            readonly command?: string;
        };
        /** @description AI Solutions data store container Volume Object */
        "cloud.project.ai.DataStore": {
            /** @description Data store alias */
            readonly alias?: string;
            /** @description Data store endpoint URL */
            readonly endpoint?: string | null;
            /** @description Owner type of the datastore */
            readonly owner?: components["schemas"]["cloud.project.ai.DataStoreOwnerEnum"];
            /** @description Type of the datastore */
            readonly type?: components["schemas"]["cloud.project.ai.DataStoreTypeEnum"];
        };
        /** @description AI Solutions data store auth */
        "cloud.project.ai.DataStoreAuth": {
            /** @description Access key to the datastore */
            readonly accessKey?: string | null;
            /** @description Region of the datastore */
            readonly region?: string | null;
            /** @description S3 Url of the datastore */
            readonly s3Url?: string | null;
            /**
             * Format: password
             * @description Secret key to the datastore
             */
            readonly secretKey?: string | null;
            /**
             * Format: password
             * @description Swift (or S3) Auth token
             */
            readonly token?: string | null;
            /** @description Swift storage URL */
            readonly url?: string | null;
        };
        /** @description AI Datastore containers list object */
        "cloud.project.ai.DataStoreContainersList": {
            /** @description Datastore containers names list */
            readonly containers?: string[] | null;
            /** @description Datastore containers list operation status message */
            readonly message?: string;
            /** @description Datastore containers list operation status */
            readonly status?: components["schemas"]["cloud.project.ai.DataStoreContainersListStatusTypeEnum"];
        };
        /**
         * @description Data Store Containers List Status
         * @enum {string}
         */
        "cloud.project.ai.DataStoreContainersListStatusTypeEnum": "FAILED" | "PARTIAL" | "SUCCESS";
        /** @description AI Solutions data store credentials Object */
        "cloud.project.ai.DataStoreCredentialsInput": {
            /** @description Git data store credentials */
            git?: components["schemas"]["cloud.project.ai.GitCredentialsInput"] | null;
            /** @description S3 data store credentials */
            s3?: components["schemas"]["cloud.project.ai.S3CredentialsInput"] | null;
        };
        /** @description AI Solutions data store container Volume Object */
        "cloud.project.ai.DataStoreInput": {
            /** @description Data store alias */
            alias: string;
            /** @description Data store credentials */
            credentials: components["schemas"]["cloud.project.ai.DataStoreCredentialsInput"];
            /** @description Datastore endpoint */
            endpoint: string;
            /** @description Data store owner */
            owner: components["schemas"]["cloud.project.ai.DataStoreOwnerEnum"];
            /** @description Data store prefix */
            prefix?: string | null;
            /** @description Data store type */
            type: components["schemas"]["cloud.project.ai.DataStoreTypeEnum"];
        };
        /**
         * @description Data Store Owner
         * @enum {string}
         */
        "cloud.project.ai.DataStoreOwnerEnum": "customer" | "ovhcloud";
        /**
         * @description Data Store Type
         * @enum {string}
         */
        "cloud.project.ai.DataStoreTypeEnum": "git" | "s3" | "swift";
        /** @description AI Solutions Instance Env Object */
        "cloud.project.ai.Env": {
            /** @description Name of the environment variable to set inside the AI Solutions instance */
            name: string;
            /** @description Value of the environment variable to set inside the AI Solutions instance */
            value?: string | null;
        };
        /** @description Basic model with a single message field */
        "cloud.project.ai.GenericResponse": {
            readonly message?: string;
        };
        /** @description AI Solutions data store git credentials input */
        "cloud.project.ai.GitCredentialsInput": {
            /** @description Basic Auth data store credentials */
            basicAuth?: components["schemas"]["cloud.project.ai.BasicAuthCredentialsInput"] | null;
            /** @description SSH data store credentials */
            sshKeypair?: components["schemas"]["cloud.project.ai.SshCredentialsInput"] | null;
        };
        /** @description Information about the state of this entity */
        "cloud.project.ai.Info": {
            /** @description Info code identifier */
            readonly code?: components["schemas"]["cloud.project.ai.InfoCodeEnum"];
            /** @description Formatted message */
            readonly message?: string;
        };
        /**
         * @description Code enum for Info object
         * @enum {string}
         */
        "cloud.project.ai.InfoCodeEnum": "APP_CREATE_ERROR" | "APP_ERROR" | "APP_FAILED" | "APP_INITIALIZING" | "APP_INTERRUPTED_BY_PLATFORM" | "APP_QUEUED" | "APP_RUNNING" | "APP_SCALING" | "APP_STOPPED" | "APP_STOPPING" | "COMPATIBILITY" | "DATASYNC_AUTHENTICATE_FAILED" | "DATASYNC_DATA_STORE_NOT_FOUND" | "DATASYNC_DONE" | "DATASYNC_ERROR" | "DATASYNC_FAILED" | "DATASYNC_INTERRUPTED" | "DATASYNC_INVALID_CONTAINER" | "DATASYNC_QUEUED" | "DATASYNC_RETRY_ERROR" | "DATASYNC_RUNNING" | "JOB_CREATE_CONTAINER_CONFIG_ERROR" | "JOB_CREATE_CONTAINER_ERROR" | "JOB_DONE" | "JOB_ERROR" | "JOB_EVICTED" | "JOB_FAILED" | "JOB_FAILED_WITH_MESSAGE" | "JOB_FINALIZING" | "JOB_IMAGE_INSPECT_ERROR" | "JOB_IMAGE_PULL" | "JOB_IMAGE_PULL_BACKOFF" | "JOB_INITIALIZING" | "JOB_INTERRUPTED" | "JOB_INTERRUPTED_BY_PLATFORM" | "JOB_INTERRUPTING" | "JOB_INVALID_IMAGE_NAME" | "JOB_PENDING" | "JOB_QUEUED" | "JOB_REGISTRY_UNAVAILABLE" | "JOB_RUNNING" | "JOB_SYNC_FAILED" | "JOB_TIMEOUT" | "NOTEBOOK_FAILED" | "NOTEBOOK_FAILED_WITH_MESSAGE" | "NOTEBOOK_FINALIZING" | "NOTEBOOK_INITIALIZING" | "NOTEBOOK_PENDING" | "NOTEBOOK_RUNNING" | "NOTEBOOK_STARTING" | "NOTEBOOK_STOPPED" | "NOTEBOOK_STOPPING" | "NOTEBOOK_SYNC_FAILED";
        /** @description AI Solutions Label Object */
        "cloud.project.ai.Label": {
            /** @description Name of the label to update/add */
            name: string;
            /** @description Value of the label to update/add, is there is no value the label is deleted */
            value?: string | null;
        };
        /** @description Log line */
        "cloud.project.ai.LogLine": {
            /** @description Content of the log */
            readonly content?: string | null;
            /**
             * Format: date-time
             * @description Datetime of the log
             */
            readonly timestamp?: string | null;
        };
        /** @description Instance Logs */
        "cloud.project.ai.Logs": {
            /**
             * Format: date-time
             * @description Last activity date
             */
            readonly lastActivity?: string | null;
            /** @description Logs lines */
            readonly logs?: components["schemas"]["cloud.project.ai.LogLine"][];
        };
        /**
         * @description Possible value to order result
         * @enum {string}
         */
        "cloud.project.ai.OrderEnum": "asc" | "desc";
        /** @description AI Solutions Resource Object */
        "cloud.project.ai.Resources": {
            /** @description Number of vCPU resources requested */
            readonly cpu?: number;
            /** @description The amount of ephemeral storage in bytes */
            readonly ephemeralStorage?: number;
            /** @description Current instance flavor */
            readonly flavor?: string;
            /** @description Number of GPU resources requested */
            readonly gpu?: number;
            /** @description The GPU Brand */
            readonly gpuBrand?: string | null;
            /** @description The GPU Memory in bits */
            readonly gpuMemory?: number | null;
            /** @description The GPU Model */
            readonly gpuModel?: string | null;
            /** @description The amount of memory in bytes */
            readonly memory?: number;
            /** @description The guarantee private bandwidth in bytes per seconds */
            readonly privateNetwork?: number;
            /** @description The guarantee public bandwidth in bytes per seconds */
            readonly publicNetwork?: number;
        };
        /** @description AI Solutions Resource Object */
        "cloud.project.ai.ResourcesInput": {
            /** @description Number of vCPU resources requested */
            cpu?: number | null;
            /** @description The amount of ephemeral storage in bytes */
            ephemeralStorage?: number | null;
            /** @description Instance flavor */
            flavor?: string | null;
            /** @description Number of GPU resources requested */
            gpu?: number | null;
            /** @description The GPU Brand */
            gpuBrand?: string | null;
            /** @description The GPU Memory in bytes */
            gpuMemory?: number | null;
            /** @description The GPU Model */
            gpuModel?: string | null;
            /** @description The amount of memory in bytes */
            memory?: number | null;
            /** @description The private network bandwidth in bits per seconds */
            privateNetwork?: number | null;
            /** @description The public network bandwidth in bits per seconds */
            publicNetwork?: number | null;
        };
        /** @description AI Solutions S3 credentials */
        "cloud.project.ai.S3CredentialsInput": {
            /** @description S3 Access Key */
            accessKey: string;
            /** @description S3 Region */
            region: string;
            /**
             * Format: password
             * @description S3 Private Key
             */
            secretKey: string;
        };
        /**
         * @description Shutdown strategy of an instance
         * @enum {string}
         */
        "cloud.project.ai.ShutdownStrategyEnum": "Stop";
        /** @description AI Solutions SSH credentials input */
        "cloud.project.ai.SshCredentialsInput": {
            /**
             * Format: password
             * @description SSH private key
             */
            privateKey: string;
            /** @description SSH public key */
            publicKey?: string;
        };
        /**
         * @description Role granted with an application token
         * @enum {string}
         */
        "cloud.project.ai.TokenRoleEnum": "ai_training_operator" | "ai_training_read";
        /**
         * @description Permissions to apply on a volume
         * @enum {string}
         */
        "cloud.project.ai.VolumePermissionEnum": "RO" | "RW" | "RWD";
        /** @description AI Solutions Platform App Object */
        "cloud.project.ai.app.App": {
            /**
             * Format: date-time
             * @description App creation date
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description App Id
             */
            readonly id?: string;
            /** @description App spec */
            readonly spec?: components["schemas"]["cloud.project.ai.app.AppSpec"];
            /** @description App Container Status */
            readonly status?: components["schemas"]["cloud.project.ai.app.AppStatus"];
            /**
             * Format: date-time
             * @description App last update date
             */
            readonly updatedAt?: string;
            /** @description App user owner */
            readonly user?: string;
        };
        /** @description AI App Image object */
        "cloud.project.ai.app.AppImageInput": {
            /** @description URL of the Docker image */
            url: string;
        };
        /** @description AI Solutions App Spec Object to create an app */
        "cloud.project.ai.app.AppSpec": {
            /** @description App command */
            readonly command?: string[] | null;
            /** @description Default port to access the http service inside the app */
            readonly defaultHttpPort?: number | null;
            /** @description AI App deployment strategy */
            readonly deploymentStrategy?: components["schemas"]["cloud.project.ai.app.DeploymentStrategy"] | null;
            /** @description List of environment variable to be set inside the app */
            readonly envVars?: components["schemas"]["cloud.project.ai.job.JobEnv"][] | null;
            /** @description GRPC Port that we want to expose in case workload HTTP & gRPC servers cannot be multiplexed to listen on the same port */
            readonly grpcPort?: number | null;
            /** @description App image */
            readonly image?: string;
            /** @description Labels for the app */
            readonly labels?: {
                [key: string]: string | undefined;
            } | null;
            /** @description App name */
            readonly name?: string;
            /** @description Partner ID */
            readonly partnerId?: string | null;
            /** @description App readiness probe */
            readonly probe?: components["schemas"]["cloud.project.ai.app.Probe"] | null;
            /** @description Host region of the app */
            readonly region?: string;
            /** @description App resources */
            readonly resources?: components["schemas"]["cloud.project.ai.Resources"];
            /** @description App scaling strategy */
            readonly scalingStrategy?: components["schemas"]["cloud.project.ai.app.ScalingStrategy"] | null;
            /** @description True if app api port can be accessed without any authentication token, false otherwise */
            readonly unsecureHttp?: boolean | null;
            /** @description App Data linked */
            readonly volumes?: components["schemas"]["cloud.project.ai.volume.Volume"][] | null;
        };
        /** @description AI Solutions App Spec Object to create a app */
        "cloud.project.ai.app.AppSpecInput": {
            /** @description App command */
            command?: string[] | null;
            /** @description Default port to access http service inside the app */
            defaultHttpPort?: number | null;
            /** @description AI App deployment strategy */
            deploymentStrategy?: components["schemas"]["cloud.project.ai.app.DeploymentStrategy"] | null;
            /** @description List of environment variable to be set inside the app */
            envVars?: components["schemas"]["cloud.project.ai.job.JobEnv"][] | null;
            /** @description GRPC Port that we want to expose in case workload HTTP & gRPC servers cannot be multiplexed to listen on the same port */
            grpcPort?: number | null;
            /** @description Docker or capability image to use in the app. App capability images must comply with the pattern 'image-id:version' */
            image: string;
            /** @description Labels are used to scope tokens, labels prefixed by 'ovh/' are owned by the platform and overridden */
            labels?: {
                [key: string]: string | undefined;
            } | null;
            /** @description App name */
            name?: string;
            /** @description Partner ID */
            partnerId?: string | null;
            /** @description App readiness probe */
            probe?: components["schemas"]["cloud.project.ai.app.ProbeInput"] | null;
            /** @description Host region of the app */
            region: string;
            /** @description App resources */
            resources: components["schemas"]["cloud.project.ai.ResourcesInput"];
            /** @description App scaling strategy */
            scalingStrategy?: components["schemas"]["cloud.project.ai.app.ScalingStrategyInput"] | null;
            /** @description Whether if app api port can be accessed without any authentication token */
            unsecureHttp?: boolean | null;
            /** @description App Data linked */
            volumes?: components["schemas"]["cloud.project.ai.volume.Volume"][] | null;
        };
        /**
         * @description State of the application
         * @enum {string}
         */
        "cloud.project.ai.app.AppStateEnum": "DELETED" | "DELETING" | "ERROR" | "FAILED" | "INITIALIZING" | "QUEUED" | "RUNNING" | "SCALING" | "STOPPED" | "STOPPING";
        /** @description AI Solutions App State History Object */
        "cloud.project.ai.app.AppStateHistory": {
            /**
             * Format: date-time
             * @description Date when the status occurred
             */
            readonly date?: string;
            /** @description State of the app */
            readonly state?: components["schemas"]["cloud.project.ai.app.AppStateEnum"];
        };
        /** @description AI Solutions App Status Object */
        "cloud.project.ai.app.AppStatus": {
            /** @description Number of available replicas */
            readonly availableReplicas?: number;
            /** @description Status about the datasync linked to the app */
            readonly dataSync?: components["schemas"]["cloud.project.ai.volume.DataSync"][];
            /** @description Address to reach when you want to access the App's gRPC services */
            readonly grpcAddress?: string | null;
            /** @description Job state history */
            readonly history?: components["schemas"]["cloud.project.ai.app.AppStateHistory"][];
            /** @description Information about the app */
            readonly info?: components["schemas"]["cloud.project.ai.Info"];
            /** @description App info url */
            readonly infoUrl?: string | null;
            /** @description Internal IP address of the app service */
            readonly internalServiceIp?: components["schemas"]["ip"] | null;
            /**
             * Format: date-time
             * @description Date of the last app state change
             */
            readonly lastTransitionDate?: string | null;
            /** @description App resource usage url */
            readonly monitoringUrl?: string | null;
            /** @description State of the app */
            readonly state?: components["schemas"]["cloud.project.ai.app.AppStateEnum"] | null;
            /** @description App access url */
            readonly url?: string | null;
            /** @description App Data linked */
            readonly volumes?: components["schemas"]["cloud.project.ai.volume.VolumeStatus"][] | null;
        };
        /** @description AI Solutions AI App deployment strategy object */
        "cloud.project.ai.app.DeploymentStrategy": {
            /** @description Maximum number of replicas that can be created over the desired number of Pods (can be expressed as a percentage of the desired pods, suffixed with '%') */
            maxSurge?: string | null;
            /** @description Maximum number of replicas that can be unavailable during the update process (can be expressed as a percentage of the desired pods, suffixed with '%') */
            maxUnavailable?: string | null;
            /** @description Number of seconds you want to wait for your Deployment to progress before the system reports back that the Deployment has failed progressing */
            progressDeadlineSeconds?: number | null;
        };
        /** @description AI Solutions App Probe Object */
        "cloud.project.ai.app.Probe": {
            /** @description Path to access to check for readiness */
            readonly path?: string | null;
            /** @description Port to access to check for readiness */
            readonly port?: number | null;
        };
        /** @description AI Solutions App Probe Object */
        "cloud.project.ai.app.ProbeInput": {
            /** @description Path to access to check for readiness */
            path?: string | null;
            /** @description Port to access to check for readiness */
            port?: number | null;
        };
        /** @description AI Solutions App automatic scaling strategy object */
        "cloud.project.ai.app.ScalingAutomaticStrategy": {
            /** @description The average resource usage threshold that the app upscale or downscale will be triggered from, in percent */
            readonly averageUsageTarget?: number;
            /** @description Maximum number of replicas */
            readonly replicasMax?: number;
            /** @description Minimum number of replicas */
            readonly replicasMin?: number;
            /** @description Type of the resource to base the automatic scaling on */
            readonly resourceType?: components["schemas"]["cloud.project.ai.app.ScalingAutomaticStrategyResourceTypeEnum"];
        };
        /** @description AI Solutions App automatic scaling strategy object */
        "cloud.project.ai.app.ScalingAutomaticStrategyInput": {
            /** @description The average resource usage threshold that the app upscale or downscale will be triggered from, in percent */
            averageUsageTarget?: number;
            /** @description Maximum number of replicas */
            replicasMax?: number;
            /** @description Minimum number of replicas */
            replicasMin?: number;
            /** @description Type of the resource to base the automatic scaling on */
            resourceType?: components["schemas"]["cloud.project.ai.app.ScalingAutomaticStrategyResourceTypeEnum"];
        };
        /**
         * @description Resource type for App automatic scaling strategy
         * @enum {string}
         */
        "cloud.project.ai.app.ScalingAutomaticStrategyResourceTypeEnum": "CPU" | "RAM";
        /** @description AI Solutions App Status Object */
        "cloud.project.ai.app.ScalingFixedStrategy": {
            /** @description Number of wanted replicas */
            readonly replicas?: number;
        };
        /** @description AI Solutions App Status Object */
        "cloud.project.ai.app.ScalingFixedStrategyInput": {
            /** @description Number of wanted replicas */
            replicas?: number;
        };
        /** @description AI Solutions App Status Object */
        "cloud.project.ai.app.ScalingStrategy": {
            /** @description Strategy setting a variable number of replicas, based on an average resource usage threshold */
            readonly automatic?: components["schemas"]["cloud.project.ai.app.ScalingAutomaticStrategy"] | null;
            /** @description Strategy setting a fix number of replicas */
            readonly fixed?: components["schemas"]["cloud.project.ai.app.ScalingFixedStrategy"] | null;
        };
        /** @description AI Solutions App Status Object */
        "cloud.project.ai.app.ScalingStrategyInput": {
            /** @description Strategy setting a variable number of replicas, based on an average resource usage threshold (conflicts with 'fixed' property when both are not null) */
            automatic?: components["schemas"]["cloud.project.ai.app.ScalingAutomaticStrategyInput"] | null;
            /** @description Strategy setting a fix number of replicas (conflicts with 'automatic' property when both are not null) */
            fixed?: components["schemas"]["cloud.project.ai.app.ScalingFixedStrategyInput"] | null;
        };
        /** @description AI Solutions AI App update object */
        "cloud.project.ai.app.UpdateInput": {
            /** @description App command and arguments */
            command?: string[] | null;
            /** @description Number of CPU resources requested (applies to CPU flavors) */
            cpu?: number | null;
            /** @description Default port to access http service inside the app */
            defaultHttpPort?: number | null;
            /** @description Deployment strategy to use when updating this AI App */
            deploymentStrategy?: components["schemas"]["cloud.project.ai.app.DeploymentStrategy"] | null;
            /** @description Environment variables to be patched (empty/null value to remove) */
            envVars?: components["schemas"]["cloud.project.ai.Env"][] | null;
            /** @description App instance flavor */
            flavor?: string | null;
            /** @description Number of GPU resources requested (applies to GPU flavors) */
            gpu?: number | null;
            /** @description GRPC Port that we want to expose in case workload HTTP & gRPC servers cannot be multiplexed to listen on the same port */
            grpcPort?: number | null;
            /** @description URL of the Docker image for this AI deployment */
            url?: string | null;
        };
        /** @description AI Solutions Features */
        "cloud.project.ai.capabilities.Features": {
            /** @description Inform if the AI Solutions is in Lab mode or not */
            readonly lab?: boolean;
            /** @description Capability to add registry */
            readonly registry?: boolean;
        };
        /** @description AI Solutions Flavor */
        "cloud.project.ai.capabilities.Flavor": {
            /** @description Is the flavor the default one for a flavor type */
            readonly default?: boolean;
            /** @description Flavor description */
            readonly description?: string;
            /** @description Describe gpu information */
            readonly gpuInformation?: components["schemas"]["cloud.project.ai.capabilities.flavor.GpuInformation"] | null;
            /** @description Flavor id */
            readonly id?: string;
            /** @description Maximum amount available for a job / notebook */
            readonly max?: number;
            /** @description Describe the amount of resources given per unit of the flavor */
            readonly resourcesPerUnit?: components["schemas"]["cloud.project.ai.capabilities.flavor.ResourcesPerUnit"];
            /** @description Flavor type */
            readonly type?: components["schemas"]["cloud.project.ai.capabilities.FlavorTypeEnum"];
        };
        /**
         * @description Flavor Type
         * @enum {string}
         */
        "cloud.project.ai.capabilities.FlavorTypeEnum": "cpu" | "gpu";
        /**
         * @description Licensing Type
         * @enum {string}
         */
        "cloud.project.ai.capabilities.LicensingTypeEnum": "per-app" | "per-replica" | "per-resource" | "per-second-bracket";
        /** @description AI Solutions Preset image */
        "cloud.project.ai.capabilities.Preset": {
            /** @description Preset capabilities */
            readonly capabilities?: components["schemas"]["cloud.project.ai.capabilities.PresetCapabilities"];
            /** @description Preset description */
            readonly descriptions?: string[];
            /** @description URL toward the preset image documentation */
            readonly docUrl?: components["schemas"]["cloud.project.ai.capabilities.PresetDocumentationUrl"][];
            /** @description Preset id */
            readonly id?: string;
            /** @description URL toward the logo to illustrate the preset */
            readonly logoUrl?: string;
            /** @description Preset name */
            readonly name?: string;
            /** @description Partner name */
            readonly partner?: components["schemas"]["cloud.project.ai.job.Partner"];
            /** @description Snippet example of the doc */
            readonly snippet?: string;
            /** @description Preset type */
            readonly type?: components["schemas"]["cloud.project.ai.capabilities.PresetTypeEnum"];
        };
        /** @description AI Solutions Preset image enabled features */
        "cloud.project.ai.capabilities.PresetCapabilities": {
            /** @description Exec enabled */
            readonly exec?: boolean;
            /** @description Flavor types */
            readonly flavorTypes?: components["schemas"]["cloud.project.ai.capabilities.FlavorTypeEnum"][];
            /** @description Log enabled */
            readonly log?: boolean;
            /** @description Resources requirements */
            readonly resources?: components["schemas"]["cloud.project.ai.capabilities.PresetResources"];
            /** @description SSH enabled */
            readonly ssh?: boolean;
            /** @description Volume enabled */
            readonly volume?: boolean;
        };
        /** @description AI Solutions Preset image */
        "cloud.project.ai.capabilities.PresetDocumentationUrl": {
            /** @description Documentation Name */
            readonly name?: string;
            /** @description Documentation URL */
            readonly url?: string;
        };
        /** @description AI Solutions Preset resources requirements */
        "cloud.project.ai.capabilities.PresetResources": {
            /** @description Maximum number of GPUs supported */
            readonly maxGpu?: number;
        };
        /**
         * @description Preset Type
         * @enum {string}
         */
        "cloud.project.ai.capabilities.PresetTypeEnum": "app" | "job" | "notebook";
        /** @description AI Solutions Project Quotas */
        "cloud.project.ai.capabilities.ProjectQuotas": {
            /** @description Project's quotas per compute-type resource (e.g CPU/GPU) */
            readonly resources?: {
                [key: string]: number | undefined;
            };
            /** @description Storage quota (in bits) that is allocated to the project */
            readonly storage?: number;
        };
        /** @description AI Solutions Region */
        "cloud.project.ai.capabilities.Region": {
            /** @description Client Install Url */
            readonly cliInstallUrl?: string;
            /** @description Documentation Url */
            readonly documentationUrl?: string;
            /** @description Region id */
            readonly id?: string;
            /** @description Region Registry Url */
            readonly registryUrl?: string;
            /** @description Region version */
            readonly version?: string;
        };
        /** @description AI Solutions App image object */
        "cloud.project.ai.capabilities.app.Image": {
            /** @description Short description of the image */
            readonly description?: string;
            /** @description URL of the image documentation */
            readonly docUrl?: string;
            /** @description Unique identifier of the image */
            readonly id?: string;
            /** @description Type of licensing */
            readonly licensing?: components["schemas"]["cloud.project.ai.capabilities.LicensingTypeEnum"];
            /** @description URL of the logo of the image */
            readonly logoUrl?: string;
            /** @description Name of the image */
            readonly name?: string;
            /** @description ID of the partner providing the image */
            readonly partnerId?: string;
            /** @description Name of the partner providing the image */
            readonly partnerName?: string;
            /** @description List of available versions of this image */
            readonly versions?: string[];
        };
        /** @description AI Solutions Global GPU information */
        "cloud.project.ai.capabilities.flavor.GpuInformation": {
            /** @description The GPU Brand */
            readonly gpuBrand?: string;
            /** @description The GPU Memory in bits */
            readonly gpuMemory?: number;
            /** @description The GPU Model */
            readonly gpuModel?: string;
        };
        /** @description AI Solutions Global Resource per flavor unit */
        "cloud.project.ai.capabilities.flavor.ResourcesPerUnit": {
            /** @description The amount of cpu for one unit of the flavor */
            readonly cpu?: number;
            /** @description The amount of ephemeral storage in bytes */
            readonly ephemeralStorage?: number;
            /** @description The amount of memory in bytes */
            readonly memory?: number;
            /** @description The guarantee private bandwidth in bytes per seconds */
            readonly privateNetwork?: number;
            /** @description The guarantee public bandwidth in bytes per seconds */
            readonly publicNetwork?: number;
        };
        /** @description AI Solutions Job image object */
        "cloud.project.ai.capabilities.job.Image": {
            /** @description Short description of the image */
            readonly description?: string;
            /** @description URL of the image documentation */
            readonly docUrl?: string;
            /** @description Unique identifier of the image */
            readonly id?: string;
            /** @description URL of the logo of the image */
            readonly logoUrl?: string;
            /** @description Name of the image */
            readonly name?: string;
            /** @description List of available versions of this image */
            readonly versions?: string[];
        };
        /** @description AI Solutions Notebook editor object */
        "cloud.project.ai.capabilities.notebook.Editor": {
            /** @description Short description of the editor */
            readonly description?: string;
            /** @description URL of the editor documentation */
            readonly docUrl?: string;
            /** @description Unique identifier of the editor */
            readonly id?: string;
            /** @description URL of the logo of the editor */
            readonly logoUrl?: string;
            /** @description Name of the editor */
            readonly name?: string;
            /** @description List of available versions of this editor */
            readonly versions?: string[];
        };
        /** @description AI Solutions Notebook framework object */
        "cloud.project.ai.capabilities.notebook.Framework": {
            /** @description Short description of the framework */
            readonly description?: string;
            /** @description URL of the framework documentation */
            readonly docUrl?: string;
            /** @description Unique identifier of the framework */
            readonly id?: string;
            /** @description URL of the logo of the framework */
            readonly logoUrl?: string;
            /** @description Name of the framework */
            readonly name?: string;
            /** @description List of paths that are automatically saved */
            readonly savedPaths?: string[] | null;
            /** @description List of available versions of this framework */
            readonly versions?: string[];
        };
        /** @description AI Solutions Job Object */
        "cloud.project.ai.job.Job": {
            /**
             * Format: date-time
             * @description Job creation date
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description Job Id
             */
            readonly id?: string;
            /** @description Job specifications */
            readonly spec?: components["schemas"]["cloud.project.ai.job.JobSpec"];
            /** @description Job status */
            readonly status?: components["schemas"]["cloud.project.ai.job.JobStatus"];
            /**
             * Format: date-time
             * @description Job update date
             */
            readonly updatedAt?: string;
            /** @description Job user owner */
            readonly user?: string;
        };
        /** @description AI Solutions Job Env Object */
        "cloud.project.ai.job.JobEnv": {
            /** @description Name of the environment variable to set inside the job */
            name: string;
            /** @description Value of the environment variable to set inside the job */
            value: string;
        };
        /** @description AI Solutions Job Spec Object to create a job */
        "cloud.project.ai.job.JobSpec": {
            /** @description Job command */
            readonly command?: string[] | null;
            /** @description Port use as the default one to access http service inside job */
            readonly defaultHttpPort?: number | null;
            /** @description List of environment variable to be set inside job */
            readonly envVars?: components["schemas"]["cloud.project.ai.job.JobEnv"][] | null;
            /** @description GRPC Port that we want to expose in case workload HTTP & gRPC servers cannot be multiplexed to listen on the same port */
            readonly grpcPort?: number | null;
            /** @description Job image */
            readonly image?: string;
            /** @description Labels for the job */
            readonly labels?: {
                [key: string]: string | undefined;
            } | null;
            /** @description Job name */
            readonly name?: string;
            /** @description Partner ID */
            readonly partnerId?: string | null;
            /** @description User ID to use to access the job */
            readonly readUser?: string | null;
            /** @description Host region of the job */
            readonly region?: string;
            /** @description Job resources */
            readonly resources?: components["schemas"]["cloud.project.ai.Resources"];
            /** @description Shutdown strategy (if any) */
            readonly shutdown?: components["schemas"]["cloud.project.ai.ShutdownStrategyEnum"] | null;
            /** @description SSH keys authorized to access to the job container */
            readonly sshPublicKeys?: string[] | null;
            /** @description Maximum time to spend before killing the job */
            readonly timeout?: number | null;
            /** @description Whether job should be restarted after timeout */
            readonly timeoutAutoRestart?: boolean | null;
            /** @description Whether job api port can be accessed without any authentication token */
            readonly unsecureHttp?: boolean | null;
            /** @description Job Data linked */
            readonly volumes?: components["schemas"]["cloud.project.ai.volume.Volume"][] | null;
        };
        /** @description AI Solutions Job Spec Object to create a job */
        "cloud.project.ai.job.JobSpecInput": {
            /** @description Job command */
            command?: string[] | null;
            /** @description Port use as the default one to access http service inside job */
            defaultHttpPort?: number | null;
            /** @description List of environment variable to be set inside job */
            envVars?: components["schemas"]["cloud.project.ai.job.JobEnv"][] | null;
            /** @description GRPC Port that we want to expose in case workload HTTP & gRPC servers cannot be multiplexed to listen on the same port */
            grpcPort?: number | null;
            /** @description Job image */
            image: string;
            /** @description Labels are used to scope tokens, labels prefixed by 'ovh/' are owned by the platform and overridden */
            labels?: {
                [key: string]: string | undefined;
            } | null;
            /** @description Job name */
            name?: string;
            /** @description Partner ID */
            partnerId?: string | null;
            /** @description User ID to use to access the job */
            readUser?: string | null;
            /** @description Host region of the job */
            region: string;
            /** @description Job resources */
            resources: components["schemas"]["cloud.project.ai.ResourcesInput"];
            /** @description Shutdown strategy (if any) */
            readonly shutdown?: components["schemas"]["cloud.project.ai.ShutdownStrategyEnum"] | null;
            /** @description SSH keys authorized to access to the job container */
            sshPublicKeys?: string[] | null;
            /** @description Maximum time to spend before killing the job */
            timeout?: number | null;
            /** @description Whether job is set to be restarted after timeout */
            timeoutAutoRestart?: boolean | null;
            /** @description Whether job api port can be accessed without any authentication token */
            unsecureHttp?: boolean | null;
            /** @description Job Data linked */
            volumes?: components["schemas"]["cloud.project.ai.volume.Volume"][] | null;
        };
        /**
         * @description State of the job
         * @enum {string}
         */
        "cloud.project.ai.job.JobStateEnum": "DONE" | "ERROR" | "FAILED" | "FINALIZING" | "INITIALIZING" | "INTERRUPTED" | "INTERRUPTING" | "PENDING" | "QUEUED" | "RESTARTING" | "RUNNING" | "SYNC_FAILED" | "TIMEOUT";
        /** @description AI Solutions Job Status Object */
        "cloud.project.ai.job.JobStatus": {
            /** @description Status about the datasync linked to the job */
            readonly dataSync?: components["schemas"]["cloud.project.ai.volume.DataSync"][];
            /** @description Duration of the job */
            readonly duration?: number | null;
            /** @description Exit code of the job */
            readonly exitCode?: number | null;
            /** @description External IP of the job */
            readonly externalIp?: components["schemas"]["ip"] | null;
            /**
             * Format: date-time
             * @description Date when the job was finalized
             */
            readonly finalizedAt?: string | null;
            /** @description Address to reach when you want to access the Job's gRPC services */
            readonly grpcAddress?: string | null;
            /** @description Job state history */
            readonly history?: components["schemas"]["cloud.project.ai.job.JobStatusHistory"][];
            /** @description Information about the job */
            readonly info?: components["schemas"]["cloud.project.ai.Info"];
            /** @description Job info url */
            readonly infoUrl?: string | null;
            /**
             * Format: date-time
             * @description Date when the job was initialized
             */
            readonly initializingAt?: string | null;
            /** @description IP of the job */
            readonly ip?: components["schemas"]["ip"] | null;
            /**
             * Format: date-time
             * @description Date of the last transition
             */
            readonly lastTransitionDate?: string | null;
            /** @description Job resource usage url */
            readonly monitoringUrl?: string | null;
            /**
             * Format: date-time
             * @description Date when the job was queued
             */
            readonly queuedAt?: string | null;
            /** @description SSH Url fot the job */
            readonly sshUrl?: string | null;
            /**
             * Format: date-time
             * @description Date when the job was started
             */
            readonly startedAt?: string | null;
            /** @description State of the job */
            readonly state?: components["schemas"]["cloud.project.ai.job.JobStateEnum"] | null;
            /**
             * Format: date-time
             * @description Date when the job was stop
             */
            readonly stoppedAt?: string | null;
            /**
             * Format: date-time
             * @description Date when the job is planned to timeout
             */
            readonly timeoutAt?: string | null;
            /** @description Job access url */
            readonly url?: string | null;
            /** @description Job Data linked */
            readonly volumes?: components["schemas"]["cloud.project.ai.volume.VolumeStatus"][] | null;
        };
        /** @description AI Solutions Job Status History Object */
        "cloud.project.ai.job.JobStatusHistory": {
            /**
             * Format: date-time
             * @description Date when the status occurred
             */
            readonly date?: string;
            /** @description State of the job */
            readonly state?: components["schemas"]["cloud.project.ai.job.JobStateEnum"];
        };
        /** @description AI Solutions Partner Object */
        "cloud.project.ai.job.Partner": {
            /** @description Partner flavor */
            readonly flavor?: string;
            /** @description Partner ID */
            readonly id?: string;
            /** @description Partner name */
            readonly name?: string;
        };
        /** @description A Image of a preset data science image */
        "cloud.project.ai.job.PresetImage": {
            /** @description Model Image Description */
            readonly description?: string;
            /** @description Image id */
            readonly id?: string;
            /** @description Link to the Opensource Model */
            readonly link?: string | null;
            /** @description Framework logo */
            readonly logo?: string | null;
            /** @description Model Image Name */
            readonly name?: string;
        };
        /** @description AI Solutions Platform Notebook Backup Object */
        "cloud.project.ai.notebook.Backup": {
            /**
             * Format: date-time
             * @description Backup creation date
             */
            readonly createdAt?: string;
            /** @description Backup Id */
            readonly id?: string;
            /**
             * Format: date-time
             * @description Backup last update date
             */
            readonly updatedAt?: string;
        };
        /** @description AI Solutions Data Object */
        "cloud.project.ai.notebook.Editor": {
            /** @description Short description of the code editor */
            readonly description?: string;
            /** @description URL toward the code editor documentation */
            readonly docUrl?: string;
            /** @description Unique identifier of the code editor */
            readonly id?: string;
            /** @description URL toward the logo to illustrate the editor */
            readonly logoUrl?: string;
            /** @description Name of the code editor */
            readonly name?: string;
            /** @description Version of the code editor */
            readonly version?: string;
        };
        /** @description AI Solutions Data Object */
        "cloud.project.ai.notebook.Framework": {
            /** @description Short description of the framework */
            readonly description?: string;
            /** @description URL toward the framework documentation */
            readonly docUrl?: string;
            /** @description Unique identifier of the framework */
            readonly id?: string;
            /** @description URL toward the logo to illustrate the framework */
            readonly logoUrl?: string;
            /** @description Name of the framework */
            readonly name?: string;
            /** @description Available versions for the framework (default is the first one) */
            readonly versions?: string[];
        };
        /** @description AI Solutions Platform Notebook Object */
        "cloud.project.ai.notebook.Notebook": {
            /**
             * Format: date-time
             * @description Notebook creation date
             */
            readonly createdAt?: string;
            /** @description Notebook Id */
            readonly id?: string;
            /** @description Notebook spec */
            readonly spec?: components["schemas"]["cloud.project.ai.notebook.NotebookSpec"];
            /** @description Notebook Container Status */
            readonly status?: components["schemas"]["cloud.project.ai.notebook.NotebookStatus"];
            /**
             * Format: date-time
             * @description Notebook last update date
             */
            readonly updatedAt?: string;
            /** @description Notebook user owner */
            readonly user?: string;
        };
        /** @description AI Solutions Framework Object to create a notebook */
        "cloud.project.ai.notebook.NotebookEnv": {
            /** @description Code editor to use */
            editorId: string;
            /** @description Framework name */
            frameworkId: string;
            /** @description Framework version to use */
            frameworkVersion?: string | null;
        };
        /** @description AI Solutions Notebook Spec Object to create a notebook */
        "cloud.project.ai.notebook.NotebookSpec": {
            /** @description Environment to deploy in this notebook */
            readonly env?: components["schemas"]["cloud.project.ai.notebook.NotebookEnv"];
            /** @description List of environment variables to be set inside the notebook */
            readonly envVars?: components["schemas"]["cloud.project.ai.job.JobEnv"][];
            /** @description Current notebook flavor */
            readonly flavor?: string | null;
            /** @description Labels for the notebook */
            readonly labels?: {
                [key: string]: string | undefined;
            } | null;
            /** @description Notebook name */
            readonly name?: string;
            /** @description Host region of the notebook */
            readonly region?: string;
            /** @description Notebook resources */
            readonly resources?: components["schemas"]["cloud.project.ai.Resources"];
            /** @description Shutdown strategy (if any) */
            readonly shutdown?: components["schemas"]["cloud.project.ai.ShutdownStrategyEnum"] | null;
            /** @description SSH keys authorized to access the notebook */
            readonly sshPublicKeys?: string[] | null;
            /** @description Whether notebook is set to be restarted after timeout */
            readonly timeoutAutoRestart?: boolean | null;
            /** @description Whether notebook api port can be accessed without any authentication token */
            readonly unsecureHttp?: boolean | null;
            /** @description Notebook Data linked */
            readonly volumes?: components["schemas"]["cloud.project.ai.volume.Volume"][] | null;
        };
        /** @description AI Solutions Notebook Spec Object to create a notebook */
        "cloud.project.ai.notebook.NotebookSpecInput": {
            /** @description Environment to deploy in this notebook */
            env: components["schemas"]["cloud.project.ai.notebook.NotebookEnv"];
            /** @description List of environment variables to be set inside the notebook */
            envVars?: components["schemas"]["cloud.project.ai.job.JobEnv"][] | null;
            /** @description Labels are used to scope tokens, labels prefixed by 'ovh/' are owned by the platform and overridden */
            labels?: {
                [key: string]: string | undefined;
            } | null;
            /** @description Notebook name */
            name?: string;
            /** @description Host region of the notebook */
            region: string;
            /** @description Notebook resources */
            resources: components["schemas"]["cloud.project.ai.ResourcesInput"];
            /** @description Shutdown strategy (if any) */
            readonly shutdown?: components["schemas"]["cloud.project.ai.ShutdownStrategyEnum"] | null;
            /** @description SSH keys authorized to access the notebook */
            sshPublicKeys?: string[] | null;
            /** @description Whether notebook is set to be restarted after timeout */
            timeoutAutoRestart?: boolean | null;
            /** @description Whether notebook api port can be accessed without any authentication token */
            unsecureHttp?: boolean | null;
            /** @description Notebook Data linked */
            volumes?: components["schemas"]["cloud.project.ai.volume.Volume"][] | null;
        };
        /**
         * @description State of the notebook
         * @enum {string}
         */
        "cloud.project.ai.notebook.NotebookStateEnum": "DELETING" | "FAILED" | "RESTARTING" | "RUNNING" | "STARTING" | "STOPPED" | "STOPPING" | "SYNC_FAILED";
        /** @description AI Solutions Notebook Status Object */
        "cloud.project.ai.notebook.NotebookStatus": {
            /** @description Status about the datasync linked to the job */
            readonly dataSync?: components["schemas"]["cloud.project.ai.volume.DataSync"][];
            /** @description Duration of the notebook in seconds */
            readonly duration?: number | null;
            /** @description Address to reach when you want to access the Notebook's gRPC services */
            readonly grpcAddress?: string | null;
            /** @description Information about the notebook */
            readonly info?: components["schemas"]["cloud.project.ai.Info"];
            /** @description Notebook info url */
            readonly infoUrl?: string | null;
            /** @description Status for the last job run */
            readonly lastJobStatus?: components["schemas"]["cloud.project.ai.job.JobStatus"];
            /**
             * Format: date-time
             * @description Date when the notebook was last started
             */
            readonly lastStartedAt?: string | null;
            /**
             * Format: date-time
             * @description Date when the notebook was last stopped
             */
            readonly lastStoppedAt?: string | null;
            /** @description Notebook resource usage url */
            readonly monitoringUrl?: string | null;
            /** @description SSH Url for the notebook */
            readonly sshUrl?: string | null;
            /** @description State of the notebook */
            readonly state?: components["schemas"]["cloud.project.ai.notebook.NotebookStateEnum"] | null;
            /** @description Notebook access url */
            readonly url?: string | null;
            /** @description Notebook Data linked */
            readonly volumes?: components["schemas"]["cloud.project.ai.volume.VolumeStatus"][] | null;
            /** @description State of the notebook workspace */
            readonly workspace?: components["schemas"]["cloud.project.ai.notebook.NotebookWorkspace"] | null;
        };
        /** @description AI Solutions Notebook Spec Object to update a notebook */
        "cloud.project.ai.notebook.NotebookUpdate": {
            /** @description Labels for the notebook */
            labels?: {
                [key: string]: string | undefined;
            } | null;
            /** @description Notebook resources */
            resources?: components["schemas"]["cloud.project.ai.ResourcesInput"] | null;
            /** @description SSH keys authorized to access the notebook */
            sshPublicKeys?: string[] | null;
            /** @description Whether notebook is set to be restarted after timeout */
            timeoutAutoRestart?: boolean | null;
            /** @description Whether notebook api port can be accessed without any authentication token */
            unsecureHttp?: boolean | null;
            /** @description Notebook Data linked */
            volumes?: components["schemas"]["cloud.project.ai.volume.Volume"][] | null;
        };
        /** @description AI Solutions Notebook Workspace Object */
        "cloud.project.ai.notebook.NotebookWorkspace": {
            /** @description The number of storage bytes free of charges for notebook workspace */
            readonly storageFree?: number;
            /** @description The number of storage bytes currently used to persist notebook workspace */
            readonly storageUsed?: number;
        };
        /** @description Representation of a partner's contract with logged in user's tenant */
        "cloud.project.ai.partner.Contract": {
            /**
             * Format: date-time
             * @description Contract signature date for the logged in user's tenant
             */
            readonly signedAt?: string | null;
            /** @description Map of terms of service details per locale */
            readonly termsOfService?: {
                [key: string]: components["schemas"]["cloud.project.ai.partner.ContractTermsLocale"] | undefined;
            };
        };
        /** @description Representation of a partner's contract on a given language */
        "cloud.project.ai.partner.ContractTermsLocale": {
            /** @description Contract file URL for a given language */
            readonly url?: string;
        };
        /** @description Representation of a partner */
        "cloud.project.ai.partner.Partner": {
            /** @description Partner contract with logged in user's tenant */
            readonly contract?: components["schemas"]["cloud.project.ai.partner.Contract"] | null;
            /**
             * Format: date-time
             * @description Partner creation date
             */
            readonly createdAt?: string;
            /** @description Partner Description */
            readonly description?: string;
            /** @description Partner Id */
            readonly id?: string;
            /** @description Partner Name */
            readonly name?: string;
        };
        /** @description Representation of a registry */
        "cloud.project.ai.registry.Registry": {
            /**
             * Format: date-time
             * @description Registry creation date
             */
            readonly createdAt?: string;
            /** @description Registry Id */
            readonly id?: string;
            /**
             * Format: password
             * @description Docker registry password
             */
            password: string | null;
            /** @description Region where the registry is available */
            region: string;
            /**
             * Format: date-time
             * @description Registry update date
             */
            readonly updatedAt?: string;
            /** @description Docker registry URL */
            url: string | null;
            /** @description Registry user creator */
            readonly user?: string;
            /** @description Docker registry username */
            username: string | null;
        };
        /** @description Docker registry update object */
        "cloud.project.ai.registry.RegistryUpdateInput": {
            /**
             * Format: password
             * @description Docker registry password
             */
            password?: string | null;
            /** @description Docker registry URL */
            url?: string | null;
            /** @description Docker registry username */
            username?: string | null;
        };
        /** @description AI Solutions Application Token */
        "cloud.project.ai.token.Token": {
            /**
             * Format: date-time
             * @description Application token creation date
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description Application token Id
             */
            readonly id?: string;
            /** @description Application token spec */
            readonly spec?: components["schemas"]["cloud.project.ai.token.TokenSpec"];
            /** @description Application token status */
            readonly status?: components["schemas"]["cloud.project.ai.token.TokenStatus"];
            /**
             * Format: date-time
             * @description Application token update date
             */
            readonly updatedAt?: string;
        };
        /** @description AI Solutions Application Token Spec Object to create a notebook */
        "cloud.project.ai.token.TokenSpec": {
            /** @description Application token label selector */
            labelSelector?: string | null;
            /** @description Application token name */
            name: string;
            /** @description Public Cloud Storage Region */
            region: string;
            /** @description Role granted by this application token */
            role: components["schemas"]["cloud.project.ai.TokenRoleEnum"];
        };
        /** @description AI Solutions Application Token Status Object */
        "cloud.project.ai.token.TokenStatus": {
            /**
             * Format: password
             * @description Application token value to use as a Bearer
             */
            readonly value?: string | null;
            /** @description Application token version */
            readonly version?: number;
        };
        /** @description AI Solutions data store container Volume Object */
        "cloud.project.ai.volume.DataStore": {
            /** @description Data store alias */
            alias: string;
            /** @description Name of the tar archive that needs to be saved */
            archive?: string | null;
            /** @description Data store container to attach */
            container: string;
            /** @description True if data is stored on OVHcloud AI's internal storage */
            internal?: boolean | null;
            /** @description Prefix to fetch only part of the volume */
            prefix?: string | null;
        };
        /** @description AI Solutions Data Sync */
        "cloud.project.ai.volume.DataSync": {
            /**
             * Format: date-time
             * @description Data Sync creation date
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description Data Sync Id
             */
            readonly id?: string;
            /** @description Data Sync specifications */
            readonly spec?: components["schemas"]["cloud.project.ai.volume.DataSyncSpec"];
            /** @description Data Sync status */
            readonly status?: components["schemas"]["cloud.project.ai.volume.DataSyncStatus"];
            /**
             * Format: date-time
             * @description Data Sync update date
             */
            readonly updatedAt?: string;
        };
        /**
         * @description Data Sync Direction
         * @enum {string}
         */
        "cloud.project.ai.volume.DataSyncEnum": "pull" | "push";
        /**
         * @description State of the progress sync
         * @enum {string}
         */
        "cloud.project.ai.volume.DataSyncProgressStateEnum": "DONE" | "ERROR" | "FAILED" | "INTERRUPTED" | "QUEUED" | "RUNNING";
        /** @description AI Solutions Data Sync Spec */
        "cloud.project.ai.volume.DataSyncSpec": {
            /** @description Direction of the sync */
            direction?: components["schemas"]["cloud.project.ai.volume.DataSyncEnum"];
            /** @description True if the user has created the object */
            readonly manual?: boolean;
            /**
             * Format: uuid
             * @description Only sync this volume
             */
            volume?: string | null;
        };
        /**
         * @description State of the data sync
         * @enum {string}
         */
        "cloud.project.ai.volume.DataSyncStateEnum": "DONE" | "ERROR" | "FAILED" | "INTERRUPTED" | "QUEUED" | "RUNNING";
        /** @description AI Solutions Data Sync Status */
        "cloud.project.ai.volume.DataSyncStatus": {
            /**
             * Format: date-time
             * @description Date when the data sync ended
             */
            readonly endedAt?: string | null;
            /** @description Information about the data sync */
            readonly info?: components["schemas"]["cloud.project.ai.Info"];
            /** @description Progress status of the data sync */
            readonly progress?: components["schemas"]["cloud.project.ai.volume.Progress"][];
            /**
             * Format: date-time
             * @description Date when the data sync was queued
             */
            readonly queuedAt?: string;
            /**
             * Format: date-time
             * @description Date when the data sync was started
             */
            readonly startedAt?: string | null;
            /** @description State of the data sync */
            readonly state?: components["schemas"]["cloud.project.ai.volume.DataSyncStateEnum"];
        };
        /** @description AI Solutions private Swift container Volume Object. Deprecated: Use DataStore instead */
        "cloud.project.ai.volume.PrivateSwift": {
            /** @description Name of the tar archive that needs to be saved */
            archive?: string | null;
            /** @description Public Cloud Storage container to attach */
            container: string;
            /** @description True if data is stored on OVHcloud AI's internal storage */
            readonly internal?: boolean | null;
            /** @description Prefix to fetch only part of the volume */
            prefix?: string | null;
            /** @description Public Cloud Storage Region */
            region: string;
        };
        /** @description AI Solutions Progress Object */
        "cloud.project.ai.volume.Progress": {
            /** @description Number of completed files */
            readonly completed?: number;
            /**
             * Format: date-time
             * @description Progress creation date
             */
            readonly createdAt?: string;
            /** @description Number of deleted files */
            readonly deleted?: number;
            /** @description Direction of the progress sync */
            readonly direction?: components["schemas"]["cloud.project.ai.volume.DataSyncEnum"];
            /** @description ETA to finish in seconds. Deprecated */
            readonly eta?: number | null;
            /** @description Number of failed files */
            readonly failed?: number;
            /**
             * Format: uuid
             * @description Progress Id
             */
            readonly id?: string;
            /** @description Volume information */
            readonly info?: string;
            /** @description Number of processed files */
            readonly processed?: number;
            /** @description Number of skipped files */
            readonly skipped?: number;
            /** @description State of the progress sync */
            readonly state?: components["schemas"]["cloud.project.ai.volume.DataSyncProgressStateEnum"];
            /** @description Total number of files */
            readonly total?: number;
            /** @description Transferred size in bytes */
            readonly transferredBytes?: number;
            /**
             * Format: date-time
             * @description Progress update date
             */
            readonly updatedAt?: string;
        };
        /** @description AI Solutions public Git repository Volume Object */
        "cloud.project.ai.volume.PublicGit": {
            /** @description URL of the public git repository */
            url: string;
        };
        /** @description AI Solutions public Swift container Volume Object */
        "cloud.project.ai.volume.PublicSwift": {
            /** @description URL of the public swift container */
            url: string;
        };
        /** @description AI Solutions No Source Volume Object */
        "cloud.project.ai.volume.Standalone": {
            /** @description Name of the volume */
            name?: string | null;
        };
        /** @description AI Solutions Volume Object */
        "cloud.project.ai.volume.Volume": {
            /** @description Enable/disable volume caching */
            cache?: boolean;
            /** @description Public Cloud Storage container to attach */
            container?: string | null;
            /** @description Volume details for data store containers */
            dataStore?: components["schemas"]["cloud.project.ai.volume.DataStore"] | null;
            /**
             * Format: uuid
             * @description Volume Id. Deprecated: moved to status.volumes[]
             */
            readonly id?: string | null;
            /** @description Path where to mount the data inside the container */
            mountPath: string;
            /** @description Permissions to use on the mounted volume */
            permission: components["schemas"]["cloud.project.ai.VolumePermissionEnum"];
            /** @description Prefix to fetch only part of the volume */
            prefix?: string | null;
            /** @description Volume details for private swift containers. Deprecated: Use dataStore instead */
            privateSwift?: components["schemas"]["cloud.project.ai.volume.PrivateSwift"] | null;
            /** @description Volume details for public git repositories */
            publicGit?: components["schemas"]["cloud.project.ai.volume.PublicGit"] | null;
            /** @description Volume details for public swift containers */
            publicSwift?: components["schemas"]["cloud.project.ai.volume.PublicSwift"] | null;
            /** @description Public Cloud Storage Region */
            region?: string | null;
            /** @description Volume details for volumes that do not have a datasource */
            standalone?: components["schemas"]["cloud.project.ai.volume.Standalone"] | null;
            /** @description Target volume details for data store containers */
            targetDataStore?: components["schemas"]["cloud.project.ai.volume.DataStore"] | null;
            /** @description Target volume details for private swift containers. Deprecated: Use targetDataStore instead */
            targetPrivateSwift?: components["schemas"]["cloud.project.ai.volume.PrivateSwift"] | null;
        };
        /** @description AI Solutions Volume Object */
        "cloud.project.ai.volume.VolumeStatus": {
            /**
             * Format: uuid
             * @description Volume Id
             */
            readonly id?: string;
            /** @description Path where the data is mounted inside the container */
            readonly mountPath?: string;
            /**
             * Format: uuid
             * @description User volume Id
             */
            readonly userVolumeId?: string;
        };
        /** @description Import external certificate */
        "cloud.project.certificate.Import": {
            /** @description PEM encoded certificate */
            cert: string;
            /** @description Optional PEM encoded certificate chain */
            chain?: string | null;
            /**
             * Format: password
             * @description PEM encoded certificate private key
             */
            key: string;
        };
        /** @description Certificate SAN */
        "cloud.project.certificate.ServerAlternativeName": {
            /** @description SAN kind */
            readonly kind?: components["schemas"]["cloud.project.certificate.ServerAlternativeNameKindEnum"];
            /** @description Name of the given kind */
            readonly name?: string;
        };
        /**
         * @description SAN kind
         * @enum {string}
         */
        "cloud.project.certificate.ServerAlternativeNameKindEnum": "DNS" | "EMAIL" | "IP" | "URI";
        /** @description Authorization status */
        "cloud.project.dataProcessing.AuthorizationStatus": {
            /** @description True is project is authorized to use Data Processing service */
            readonly authorized?: boolean;
        };
        /** @description Engine parameters */
        "cloud.project.dataProcessing.CapabilitiesEngineParameter": {
            /** @description Default value of parameter */
            readonly default?: string | null;
            /** @description Description of parameter */
            readonly description?: string;
            /** @description Parameter is mandatory or not */
            readonly mandatory?: boolean;
            /** @description Name of parameter */
            readonly name?: string;
            /** @description Type of parameter */
            readonly type?: string;
            /** @description Validator of parameter */
            readonly validator?: components["schemas"]["cloud.project.dataProcessing.ParameterValidator"];
        };
        /** @description Engine Template */
        "cloud.project.dataProcessing.CapabilitiesNotebookTemplate": {
            /** @description Number of driver cores of the template */
            readonly driverCores?: number;
            /** @description Driver memory in bytes of the template */
            readonly driverMemory?: number;
            /** @description Driver memory overhead in bytes of the template */
            readonly driverMemoryOverhead?: number;
            /** @description Number of executor cores of the template */
            readonly executorCores?: number;
            /** @description Executor memory in bytes of the template */
            readonly executorMemory?: number;
            /** @description Executor memory overhead in bytes of the template */
            readonly executorMemoryOverhead?: number;
            /** @description Number of executors of the template */
            readonly executorNumber?: number;
            /** @description ID of the template */
            readonly id?: number;
            /** @description Name of the template */
            readonly name?: string;
        };
        /** @description Engine Template */
        "cloud.project.dataProcessing.CapabilitiesTemplate": {
            /** @description Number of cores of the template */
            readonly cores?: number;
            /** @description ID of the template */
            readonly id?: number;
            /** @description Memory in bytes of the template */
            readonly memory?: number;
        };
        /** @description Capabilities of data processing service */
        "cloud.project.dataProcessing.Capability": {
            /** @description Available versions of the engine */
            readonly availableVersions?: components["schemas"]["cloud.project.dataProcessing.EngineVersion"][];
            /** @description Name of the engine */
            readonly name?: string;
            /** @description Parameters of the engine */
            readonly parameters?: components["schemas"]["cloud.project.dataProcessing.CapabilitiesEngineParameter"][];
            /** @description Templates of the engine */
            readonly templates?: components["schemas"]["cloud.project.dataProcessing.CapabilitiesTemplate"][];
        };
        /** @description Parameters of the engine */
        "cloud.project.dataProcessing.EngineParameter": {
            /** @description Name of parameters */
            name: string;
            /** @description Value of parameters */
            value: string;
        };
        /** @description Engine version */
        "cloud.project.dataProcessing.EngineVersion": {
            /** @description List of region available of the version */
            readonly availableRegions?: string[];
            /** @description Description of the engine */
            readonly description?: string;
            /**
             * Format: date
             * @description End of life of this engine version
             */
            readonly endOfLife?: string | null;
            /**
             * Format: date
             * @description End of support of this engine version
             */
            readonly endOfSupport?: string | null;
            /** @description Name of the version */
            readonly name?: string;
        };
        /** @description Information about the state of this entity */
        "cloud.project.dataProcessing.Info": {
            /** @description Info code identifier */
            readonly code?: components["schemas"]["cloud.project.dataProcessing.InfoCodeEnum"];
            /** @description Formatted message */
            readonly message?: string;
        };
        /**
         * @description Code enum for Info object
         * @enum {string}
         */
        "cloud.project.dataProcessing.InfoCodeEnum": "APP_CREATE_ERROR" | "APP_ERROR" | "APP_FAILED" | "APP_INITIALIZING" | "APP_INTERRUPTED_BY_PLATFORM" | "APP_QUEUED" | "APP_RUNNING" | "APP_SCALING" | "APP_STOPPED" | "APP_STOPPING" | "COMPATIBILITY" | "DATASYNC_AUTHENTICATE_FAILED" | "DATASYNC_DONE" | "DATASYNC_ERROR" | "DATASYNC_FAILED" | "DATASYNC_INTERRUPTED" | "DATASYNC_INVALID_CONTAINER" | "DATASYNC_QUEUED" | "DATASYNC_RETRY_ERROR" | "DATASYNC_RUNNING" | "JOB_CREATE_CONTAINER_CONFIG_ERROR" | "JOB_CREATE_CONTAINER_ERROR" | "JOB_DONE" | "JOB_ERROR" | "JOB_EVICTED" | "JOB_FAILED" | "JOB_FAILED_WITH_MESSAGE" | "JOB_FINALIZING" | "JOB_IMAGE_INSPECT_ERROR" | "JOB_IMAGE_PULL" | "JOB_IMAGE_PULL_BACKOFF" | "JOB_INITIALIZING" | "JOB_INTERRUPTED" | "JOB_INTERRUPTED_BY_PLATFORM" | "JOB_INTERRUPTING" | "JOB_INVALID_IMAGE_NAME" | "JOB_PENDING" | "JOB_QUEUED" | "JOB_REGISTRY_UNAVAILABLE" | "JOB_RUNNING" | "JOB_TIMEOUT" | "NOTEBOOK_FAILED" | "NOTEBOOK_FAILED_WITH_MESSAGE" | "NOTEBOOK_FINALIZING" | "NOTEBOOK_INITIALIZING" | "NOTEBOOK_PENDING" | "NOTEBOOK_RUNNING" | "NOTEBOOK_STARTING" | "NOTEBOOK_STOPPED" | "NOTEBOOK_STOPPING";
        /** @description Job information */
        "cloud.project.dataProcessing.Job": {
            /** @description Name of the container where the code and the log of the job is */
            containerName: string;
            /**
             * Format: date-time
             * @description Creation date of the job
             */
            readonly creationDate?: string | null;
            /**
             * Format: date-time
             * @description End date of the job
             */
            readonly endDate?: string | null;
            /** @description Engine of the job */
            engine: string;
            /** @description Parameters of job engine */
            engineParameters: components["schemas"]["cloud.project.dataProcessing.EngineParameter"][];
            /** @description Version of the engine */
            engineVersion: string;
            /**
             * Format: uuid
             * @description UUID of the job
             */
            readonly id?: string;
            /** @description Name */
            name?: string;
            /** @description Notebook associated to the job */
            readonly notebook?: string | null;
            /** @description Openstack region of the job */
            region: string;
            /** @description Return code of the job */
            readonly returnCode?: number | null;
            /**
             * Format: date-time
             * @description Start date of the job
             */
            readonly startDate?: string | null;
            /** @description Current state of the job */
            readonly status?: components["schemas"]["cloud.project.dataProcessing.StatusEnum"];
            /**
             * Format: duration
             * @description Maximum "Time To Live" (in RFC3339 (duration)) of this job, after which it will be automatically terminated
             */
            ttl?: string | null;
        };
        /** @description Job Logs */
        "cloud.project.dataProcessing.JobLogs": {
            /** @description Logs lines */
            readonly logs?: components["schemas"]["cloud.project.dataProcessing.LogLine"][];
            /** @description Address log url */
            readonly logsAddress?: string | null;
            /**
             * Format: date-time
             * @description Start date
             */
            readonly startDate?: string;
        };
        /** @description Log line */
        "cloud.project.dataProcessing.LogLine": {
            /** @description Content of the log */
            readonly content?: string;
            /** @description Id of the log */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Datetime of the log
             */
            readonly timestamp?: string;
        };
        /** @description Conditions to which the value of parameter must conform */
        "cloud.project.dataProcessing.ParameterValidator": {
            /** @description Maximal value of parameter */
            readonly max?: number | null;
            /** @description Minimal value of parameter */
            readonly min?: number | null;
            /** @description Regex to match value of parameter */
            readonly regex?: string | null;
        };
        /**
         * @description Possible state of the job
         * @enum {string}
         */
        "cloud.project.dataProcessing.StatusEnum": "CANCELLING" | "COMPLETED" | "FAILED" | "PENDING" | "RUNNING" | "SUBMITTED" | "TERMINATED" | "UNKNOWN";
        /** @description Capabilities of data processing service */
        "cloud.project.dataProcessing.notebook.Capability": {
            /** @description Available versions of the engine */
            readonly availableVersions?: components["schemas"]["cloud.project.dataProcessing.EngineVersion"][];
            /** @description Name of the engine */
            readonly name?: string;
            /** @description Templates of the engine */
            readonly templates?: components["schemas"]["cloud.project.dataProcessing.CapabilitiesNotebookTemplate"][];
        };
        /** @description Data Processing Notebook Object */
        "cloud.project.dataProcessing.notebook.Notebook": {
            /**
             * Format: uuid
             * @description Notebook Id
             */
            readonly id?: string;
            /** @description Notebook spec */
            readonly spec?: components["schemas"]["cloud.project.dataProcessing.notebook.NotebookSpec"];
            /** @description Notebook Container Status */
            readonly status?: components["schemas"]["cloud.project.dataProcessing.notebook.NotebookStatus"];
            /**
             * Format: date-time
             * @description Notebook last update date
             */
            readonly updatedAt?: string;
        };
        /** @description Data Processing Object to create a notebook */
        "cloud.project.dataProcessing.notebook.NotebookEnv": {
            /** @description Engine name to use */
            engineName?: string | null;
            /** @description Engine version to use */
            engineVersion?: string | null;
        };
        /** @description Data Processing Notebook Spec Object to create a notebook */
        "cloud.project.dataProcessing.notebook.NotebookSpec": {
            /** @description Environment to deploy in this notebook */
            env: components["schemas"]["cloud.project.dataProcessing.notebook.NotebookEnv"];
            /** @description Notebook name */
            name?: string;
            /** @description Host region of the notebook */
            region: string;
        };
        /**
         * @description State of the notebook
         * @enum {string}
         */
        "cloud.project.dataProcessing.notebook.NotebookStateEnum": "DELETED" | "FAILED" | "RUNNING" | "STARTING" | "STOPPED" | "STOPPING";
        /** @description Data Processing Notebook Status Object */
        "cloud.project.dataProcessing.notebook.NotebookStatus": {
            /** @description Duration of the notebook in seconds */
            readonly duration?: number | null;
            /** @description Information about the notebook */
            readonly info?: components["schemas"]["cloud.project.dataProcessing.Info"];
            /**
             * Format: date-time
             * @description Date when the notebook was last started
             */
            readonly lastStartedAt?: string | null;
            /**
             * Format: date-time
             * @description Date when the notebook was last stopped
             */
            readonly lastStoppedAt?: string | null;
            /** @description State of the notebook */
            readonly state?: components["schemas"]["cloud.project.dataProcessing.notebook.NotebookStateEnum"] | null;
            /** @description Notebook access url */
            readonly url?: string | null;
        };
        /** @description Availability of databases engines on cloud projects */
        "cloud.project.database.Availability": {
            /** @description Defines the type of backup. DEPRECATED: use backups.enable */
            readonly backup?: components["schemas"]["cloud.project.database.BackupTypeEnum"];
            /** @description Backup retention time of the availability in days. DEPRECATED: use backups.retentionDays */
            readonly backupRetentionDays?: number;
            /** @description Defines backups strategy for the availability */
            readonly backups?: components["schemas"]["cloud.project.database.availability.Backups"];
            /** @description Category of the engine */
            readonly category?: components["schemas"]["cloud.project.database.engine.CategoryEnum"];
            /** @description Whether this availability can be used by default */
            readonly default?: boolean;
            /**
             * Format: date
             * @description End of life of the product. DEPRECATED: use lifecycle.endOfLife
             */
            readonly endOfLife?: string | null;
            /** @description Database engine name */
            readonly engine?: string;
            /** @description Flavor name. DEPRECATED: use specifications.flavor */
            readonly flavor?: string;
            /** @description Defines the lifecycle of the availability */
            readonly lifecycle?: components["schemas"]["cloud.project.database.availability.Lifecycle"];
            /** @description Maximum possible disk size in GB. DEPRECATED: use specifications.storage.maximum */
            readonly maxDiskSize?: number;
            /** @description Maximum nodes of the cluster. DEPRECATED: use specifications.nodes.maximum */
            readonly maxNodeNumber?: number;
            /** @description Minimum possible disk size in GB. DEPRECATED: use specifications.storage.minimum */
            readonly minDiskSize?: number;
            /** @description Minimum nodes of the cluster. DEPRECATED: use specifications.nodes.minimum */
            readonly minNodeNumber?: number;
            /** @description Type of network. DEPRECATED: use specifications.network */
            readonly network?: components["schemas"]["cloud.project.database.NetworkTypeEnum"];
            /** @description Plan name */
            readonly plan?: string;
            /** @description Region name */
            readonly region?: string;
            /** @description Defines the technical specifications of the availability */
            readonly specifications?: components["schemas"]["cloud.project.database.availability.Specifications"];
            /**
             * Format: date
             * @description Date of the release of the product. DEPRECATED: use lifecycle.startDate
             */
            readonly startDate?: string;
            /** @description Status of the availability. DEPRECATED: use lifecycle.status */
            readonly status?: components["schemas"]["cloud.project.database.availability.StatusEnum"];
            /** @description Flex disk size step in GB. DEPRECATED: use specifications.storage.step */
            readonly stepDiskSize?: number;
            /**
             * Format: date
             * @description End of life of the upstream product. DEPRECATED: use lifecycle
             */
            readonly upstreamEndOfLife?: string | null;
            /** @description Version name */
            readonly version?: string;
        };
        /** @description Cloud database backup definition */
        "cloud.project.database.Backup": {
            /**
             * Format: date-time
             * @description Date of the creation of the backup
             */
            readonly createdAt?: string;
            /** @description Description of the backup */
            description?: string;
            /**
             * Format: uuid
             * @description Backup ID
             */
            readonly id?: string;
            /** @description Region where the backup is stored. DEPRECATED: use regions */
            readonly region?: string;
            /** @description Regions where the backup are stored */
            readonly regions?: components["schemas"]["cloud.project.database.backup.Region"][];
            /** @description Size of the backup */
            readonly size?: components["schemas"]["complexType.UnitAndValue_long"];
            /** @description Current status of the backup */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Type of backup */
            readonly type?: components["schemas"]["cloud.project.database.BackupTypeEnum"];
        };
        /**
         * @description Type of backup for the cluster
         * @enum {string}
         */
        "cloud.project.database.BackupTypeEnum": "automatic" | "manual" | "none" | "pitr" | "snapshot";
        /** @description Capabilities available for the databases engines on cloud projects */
        "cloud.project.database.Capabilities": {
            /** @description Disks available */
            readonly disks?: string[];
            /** @description Database engines available */
            readonly engines?: components["schemas"]["cloud.project.database.capabilities.Engine"][];
            /** @description Flavors available */
            readonly flavors?: components["schemas"]["cloud.project.database.capabilities.Flavor"][];
            /** @description Options available */
            readonly options?: components["schemas"]["cloud.project.database.capabilities.Option"][];
            /** @description Plans available */
            readonly plans?: components["schemas"]["cloud.project.database.capabilities.Plan"][];
            /** @description Regions available */
            readonly regions?: string[];
        };
        /**
         * @description Possible names of the engines
         * @enum {string}
         */
        "cloud.project.database.EngineEnum": "cassandra" | "grafana" | "kafka" | "kafkaConnect" | "kafkaMirrorMaker" | "m3aggregator" | "m3db" | "mongodb" | "mysql" | "opensearch" | "postgresql" | "redis";
        /** @description Ip Restriction definition for cloud project databases (DEPRECATED) */
        "cloud.project.database.IpRestriction": {
            /** @description Description of the ip restriction */
            description?: string;
            /** @description Whitelisted IP */
            readonly ip?: components["schemas"]["ipBlock"];
            /** @description Current status of the ip restriction */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
        };
        /** @description Ip Restriction creation definition for cloud project databases (DEPRECATED) */
        "cloud.project.database.IpRestrictionCreation": {
            /** @description Description of the ip restriction */
            description?: string;
            /** @description Whitelisted IP */
            ip?: components["schemas"]["ipBlock"];
        };
        /** @description Logs to customer subscription creation definition for cloud project databases */
        "cloud.project.database.LogSubscriptionCreation": {
            /**
             * Format: uuid
             * @description Target stream of the subscription
             */
            streamId: string;
        };
        /**
         * @description Type of network in which the databases cluster are
         * @enum {string}
         */
        "cloud.project.database.NetworkTypeEnum": "private" | "public";
        /** @description Cloud database service definition */
        "cloud.project.database.Service": {
            /** @description Time on which backups start every day. DEPRECATED: use backups.time */
            backupTime?: components["schemas"]["time"];
            /** @description Information related to the backups, null if the engine does not support backups */
            backups?: components["schemas"]["cloud.project.database.service.Backup"] | null;
            /** @description Capabilities of the services */
            readonly capabilities?: {
                [key: string]: components["schemas"]["cloud.project.database.service.CapabilityActions"] | undefined;
            };
            /** @description Category of the engine */
            readonly category?: components["schemas"]["cloud.project.database.engine.CategoryEnum"];
            /**
             * Format: date-time
             * @description Date of the creation of the cluster
             */
            readonly createdAt?: string;
            /** @description Description of the cluster */
            description?: string;
            /** @description Disk attributes of the cluster. DEPRECATED: use storage */
            disk?: components["schemas"]["cloud.project.database.service.Disk"];
            /** @description List of all endpoints of the service */
            readonly endpoints?: components["schemas"]["cloud.project.database.service.Endpoint"][];
            /** @description Name of the engine of the service */
            readonly engine?: components["schemas"]["cloud.project.database.EngineEnum"];
            /** @description The VM flavor used for this cluster */
            flavor?: string;
            /**
             * Format: uuid
             * @description Service ID
             */
            readonly id?: string;
            /** @description IP Blocks authorized to access to the cluster */
            ipRestrictions?: components["schemas"]["cloud.project.database.service.IpRestriction"][];
            /** @description Time on which maintenances can start every day */
            maintenanceTime?: components["schemas"]["time"];
            /**
             * Format: uuid
             * @description Private network ID in which the cluster is
             */
            readonly networkId?: string | null;
            /** @description Type of network of the cluster */
            readonly networkType?: components["schemas"]["cloud.project.database.NetworkTypeEnum"];
            /** @description Number of nodes in the cluster. DEPRECATED: use nodes */
            nodeNumber?: number;
            /** @description Nodes of the cluster */
            readonly nodes?: components["schemas"]["cloud.project.database.service.Node"][];
            /** @description Plan of the cluster */
            plan?: string;
            /** @description Region of the cluster */
            region?: string | null;
            /** @description Current status of the cluster */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Storage attributes of the cluster */
            storage?: components["schemas"]["cloud.project.database.service.Storage"] | null;
            /**
             * Format: uuid
             * @description Private subnet ID in which the cluster is
             */
            readonly subnetId?: string | null;
            /** @description Version of the engine deployed on the cluster */
            version?: string;
        };
        /** @description Cloud databases cluster definition */
        "cloud.project.database.ServiceCreation": {
            /** @description Backup from which the new service is created. DEPRECATED: use forkFrom */
            backup?: components["schemas"]["cloud.project.database.service.creation.BackupFork"] | null;
            /** @description Time on which backups start every day. DEPRECATED: use backups.time */
            backupTime?: components["schemas"]["time"] | null;
            /** @description Information related to the backups, null if the engine does not support backups */
            backups?: components["schemas"]["cloud.project.database.service.Backup"] | null;
            /** @description Description of the cluster */
            description?: string;
            /** @description Disk attributes of the cluster */
            disk?: components["schemas"]["cloud.project.database.service.Disk"];
            /** @description Backup from which the new service is created */
            forkFrom?: components["schemas"]["cloud.project.database.service.creation.ForkFrom"] | null;
            /** @description IP Blocks authorized to access to the cluster */
            ipRestrictions?: components["schemas"]["cloud.project.database.service.IpRestriction"][];
            /** @description Time on which maintenances can start every day */
            maintenanceTime?: components["schemas"]["time"] | null;
            /**
             * Format: uuid
             * @description Private network ID in which the cluster is
             */
            networkId?: string | null;
            /** @description List of nodes in the cluster, not compatible with nodesPattern */
            nodesList?: components["schemas"]["cloud.project.database.service.NodeCreation"][] | null;
            /** @description Pattern definition of the nodes in the cluster, not compatible with nodesList */
            nodesPattern?: components["schemas"]["cloud.project.database.service.NodePattern"] | null;
            /** @description Plan of the cluster */
            plan?: string;
            /**
             * Format: uuid
             * @description Private subnet ID in which the cluster is
             */
            subnetId?: string | null;
            /** @description Version of the engine deployed on the cluster */
            version?: string;
        };
        /**
         * @description Possible state of the job
         * @enum {string}
         */
        "cloud.project.database.StatusEnum": "CREATING" | "DELETING" | "ERROR" | "ERROR_INCONSISTENT_SPEC" | "LOCKED" | "LOCKED_PENDING" | "LOCKED_UPDATING" | "PENDING" | "READY" | "SHELVED" | "UPDATING";
        /** @description Cloud databases temporary write deadline definition */
        "cloud.project.database.TemporaryWriteDeadline": {
            /**
             * Format: date-time
             * @description Date on which the temporary write permissions would be lifted
             */
            readonly until?: string;
        };
        /**
         * @description Type of data returned in the capabilities options
         * @enum {string}
         */
        "cloud.project.database.TypeEnum": "boolean" | "double" | "duration" | "long" | "string";
        /**
         * @description Possible action to restrict availabilities
         * @enum {string}
         */
        "cloud.project.database.availability.ActionEnum": "fork" | "read" | "update";
        /** @description Backups availability of databases engines on cloud projects */
        "cloud.project.database.availability.Backups": {
            /** @description Defines whether the backups are available for this offer */
            readonly available?: boolean;
            /** @description Number of retention days for the backups */
            readonly retentionDays?: number | null;
        };
        /** @description Availability of databases engines on cloud projects */
        "cloud.project.database.availability.Lifecycle": {
            /**
             * Format: date
             * @description End of life of the product
             */
            readonly endOfLife?: string | null;
            /**
             * Format: date
             * @description End of sale of the product
             */
            readonly endOfSale?: string | null;
            /**
             * Format: date
             * @description Date of the release of the product
             */
            readonly startDate?: string;
            /** @description Status of the availability */
            readonly status?: components["schemas"]["cloud.project.database.availability.StatusEnum"];
        };
        /** @description Specifications of the availability of databases engines on cloud projects */
        "cloud.project.database.availability.Specifications": {
            /** @description Flavor name */
            readonly flavor?: string;
            /** @description Type of network */
            readonly network?: components["schemas"]["cloud.project.database.NetworkTypeEnum"];
            /** @description Specification of the nodes */
            readonly nodes?: components["schemas"]["cloud.project.database.availability.specifications.Nodes"];
            /** @description Specification of the storage */
            readonly storage?: components["schemas"]["cloud.project.database.availability.specifications.Storage"] | null;
        };
        /**
         * @description Possible status for the availability
         * @enum {string}
         */
        "cloud.project.database.availability.StatusEnum": "BETA" | "DEPRECATED" | "END_OF_LIFE" | "END_OF_SALE" | "STABLE" | "UNAVAILABLE";
        /**
         * @description Possible target to restrict availabilities
         * @enum {string}
         */
        "cloud.project.database.availability.TargetEnum": "flavor" | "plan" | "self" | "version";
        /** @description Specifications of the nodes for availabilities of databases engines on cloud projects */
        "cloud.project.database.availability.specifications.Nodes": {
            /** @description Maximum number of nodes of the availability */
            readonly maximum?: number;
            /** @description Minimum number of nodes of the availability */
            readonly minimum?: number;
        };
        /** @description Specifications of the storage for availabilities of databases engines on cloud projects */
        "cloud.project.database.availability.specifications.Storage": {
            /** @description Maximum storage of the availability */
            readonly maximum?: components["schemas"]["complexType.UnitAndValue_long"];
            /** @description Minimum storage of the availability */
            readonly minimum?: components["schemas"]["complexType.UnitAndValue_long"];
            /** @description Memory step that can be added between minimum and maximum */
            readonly step?: components["schemas"]["complexType.UnitAndValue_long"] | null;
        };
        /** @description Cloud database backup region definition */
        "cloud.project.database.backup.Region": {
            /** @description Name of the region where the backup is stored */
            readonly name?: string;
        };
        /** @description Specific database engine capability */
        "cloud.project.database.capabilities.Engine": {
            /** @description Category of the engine */
            readonly category?: components["schemas"]["cloud.project.database.engine.CategoryEnum"];
            /** @description Default version used for the engine */
            readonly defaultVersion?: string;
            /** @description Description of the engine */
            readonly description?: string;
            /** @description Engine name */
            readonly name?: string;
            /** @description SSL modes for this engine */
            readonly sslModes?: string[];
            /** @description Storage strategy of the engine */
            readonly storage?: components["schemas"]["cloud.project.database.capabilities.engine.storage.StrategyEnum"];
            /** @description Versions available for this engine */
            readonly versions?: string[];
        };
        /** @description Cloud Database flavor definition */
        "cloud.project.database.capabilities.Flavor": {
            /** @description Flavor core number. DEPRECATED: use specifications.core */
            readonly core?: number;
            /** @description Defines the lifecycle of the flavor */
            readonly lifecycle?: components["schemas"]["cloud.project.database.availability.Lifecycle"];
            /** @description Flavor ram size in GB. DEPRECATED: use specifications.memory */
            readonly memory?: number;
            /** @description Name of the flavor */
            readonly name?: string;
            /** @description Display order */
            readonly order?: number;
            /** @description Technical specifications of the flavor */
            readonly specifications?: components["schemas"]["cloud.project.database.capabilities.flavor.Specifications"];
            /** @description Flavor disk size in GB. DEPRECATED: use specifications.storage */
            readonly storage?: number;
            /** @description Display tags */
            readonly tags?: string[];
        };
        /** @description Integration capability between database engines */
        "cloud.project.database.capabilities.Integration": {
            /** @description Destination engine for the integration */
            readonly destinationEngine?: components["schemas"]["cloud.project.database.EngineEnum"];
            /** @description Parameters for the integration capability */
            readonly parameters?: components["schemas"]["cloud.project.database.capabilities.integration.Parameter"][] | null;
            /** @description Source engine for the integration */
            readonly sourceEngine?: components["schemas"]["cloud.project.database.EngineEnum"];
            /** @description Type of the integration */
            readonly type?: components["schemas"]["cloud.project.database.service.integration.TypeEnum"];
        };
        /** @description Cloud Database option definition */
        "cloud.project.database.capabilities.Option": {
            /** @description Name of the option */
            readonly name?: string;
            /** @description Type of the option */
            readonly type?: components["schemas"]["cloud.project.database.TypeEnum"];
        };
        /** @description Cloud Database plan definition */
        "cloud.project.database.capabilities.Plan": {
            /**
             * Format: duration
             * @description Automatic backup retention duration
             */
            readonly backupRetention?: string;
            /** @description Description of the plan */
            readonly description?: string;
            /** @description Defines the lifecycle of the availability */
            readonly lifecycle?: components["schemas"]["cloud.project.database.availability.Lifecycle"];
            /** @description Name of the plan */
            readonly name?: string;
            /** @description Display order */
            readonly order?: number;
            /** @description Display tags */
            readonly tags?: string[];
        };
        /** @description Specific database engine capability */
        "cloud.project.database.capabilities.advancedConfiguration.Property": {
            /** @description Description of the property */
            readonly description?: string;
            /** @description Maximum value for the property if numeric and applicable */
            readonly maximum?: number | null;
            /** @description Minimum value for the property if numeric and applicable */
            readonly minimum?: number | null;
            /** @description Property name */
            readonly name?: string;
            /** @description Data type of the property */
            readonly type?: components["schemas"]["cloud.project.database.capabilities.advancedConfiguration.property.TypeEnum"];
            /** @description Possible values for the property if string and applicable */
            readonly values?: string[] | null;
        };
        /**
         * @description Possible type of the advanced configuration properties
         * @enum {string}
         */
        "cloud.project.database.capabilities.advancedConfiguration.property.TypeEnum": "boolean" | "double" | "long" | "string";
        /**
         * @description Possible storage strategy for an engine
         * @enum {string}
         */
        "cloud.project.database.capabilities.engine.storage.StrategyEnum": "distributed" | "n/a" | "replicated";
        /** @description Cloud Database flavor specifications definition */
        "cloud.project.database.capabilities.flavor.Specifications": {
            /** @description Flavor core number */
            readonly core?: number;
            /** @description Flavor ram size */
            readonly memory?: components["schemas"]["complexType.UnitAndValue_long"];
            /** @description Flavor disk size */
            readonly storage?: components["schemas"]["complexType.UnitAndValue_long"];
        };
        /** @description Integration capability parameter */
        "cloud.project.database.capabilities.integration.Parameter": {
            /** @description Name of the integration parameter */
            readonly name?: string;
            /** @description Type of the integration parameter */
            readonly type?: components["schemas"]["cloud.project.database.capabilities.integration.parameter.TypeEnum"];
        };
        /**
         * @description Possible type of an integration capability parameter
         * @enum {string}
         */
        "cloud.project.database.capabilities.integration.parameter.TypeEnum": "integer" | "string";
        /**
         * @description Different categories of engines
         * @enum {string}
         */
        "cloud.project.database.engine.CategoryEnum": "analysis" | "operational" | "streaming";
        /** @description Cloud databases kafka permissions definition */
        "cloud.project.database.kafka.Permissions": {
            /** @description Names of the topic permissions (DEPRECATED) */
            readonly names?: string[];
            /** @description Names of the schema registry permissions */
            readonly schemaRegistry?: string[];
            /** @description Names of the topic permissions */
            readonly topic?: string[];
        };
        /** @description Cloud databases kafka schema registry acl definition */
        "cloud.project.database.kafka.SchemaRegistryAcl": {
            /**
             * Format: uuid
             * @description Acl ID
             */
            readonly id?: string;
            /** @description Permission to give to this username on this resource. Permissions values can be retrieved using /cloud/project/{serviceName}/database/kafka/{clusterId}/permissions */
            permission: string;
            /** @description Resource affected by this acl */
            resource: string;
            /** @description Username affected by this acl */
            username: string;
        };
        /** @description Cloud database kafka service definition */
        "cloud.project.database.kafka.Service": {
            /** @description Time on which backups start every day */
            backupTime?: components["schemas"]["time"];
            /** @description Capabilities of the services */
            readonly capabilities?: {
                [key: string]: components["schemas"]["cloud.project.database.service.CapabilityActions"] | undefined;
            };
            /** @description Category of the engine */
            readonly category?: components["schemas"]["cloud.project.database.engine.CategoryEnum"];
            /**
             * Format: date-time
             * @description Date of the creation of the cluster
             */
            readonly createdAt?: string;
            /** @description Description of the cluster */
            description?: string;
            /** @description Disk attributes of the cluster. DEPRECATED: use storage */
            disk?: components["schemas"]["cloud.project.database.service.Disk"];
            /** @description List of all endpoints of the service */
            readonly endpoints?: components["schemas"]["cloud.project.database.service.Endpoint"][];
            /** @description Name of the engine of the service */
            readonly engine?: components["schemas"]["cloud.project.database.EngineEnum"];
            /** @description The VM flavor used for this cluster */
            flavor?: string;
            /**
             * Format: uuid
             * @description Service ID
             */
            readonly id?: string;
            /** @description IP Blocks authorized to access to the cluster */
            ipRestrictions?: components["schemas"]["cloud.project.database.service.IpRestriction"][];
            /** @description Time on which maintenances can start every day */
            maintenanceTime?: components["schemas"]["time"];
            /**
             * Format: uuid
             * @description Private network ID in which the cluster is
             */
            readonly networkId?: string | null;
            /** @description Type of network of the cluster */
            readonly networkType?: components["schemas"]["cloud.project.database.NetworkTypeEnum"];
            /** @description Number of nodes in the cluster. DEPRECATED: useNodes */
            nodeNumber?: number;
            /** @description Nodes of the cluster */
            readonly nodes?: components["schemas"]["cloud.project.database.service.Node"][];
            /** @description Plan of the cluster */
            plan?: string;
            /** @description Defines whether the REST API is enabled on the cluster */
            restApi?: boolean;
            /** @description Defines whether the schema registry is enabled on the cluster */
            schemaRegistry?: boolean;
            /** @description Current status of the cluster */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Storage attributes of the cluster */
            storage?: components["schemas"]["cloud.project.database.service.Storage"] | null;
            /**
             * Format: uuid
             * @description Private subnet ID in which the cluster is
             */
            readonly subnetId?: string | null;
            /** @description Version of the engine deployed on the cluster */
            version?: string;
        };
        /** @description Cloud database kafka topic definition */
        "cloud.project.database.kafka.Topic": {
            /**
             * Format: uuid
             * @description Topic ID
             */
            readonly id?: string;
            /** @description Minimum insync replica accepted for this topic */
            minInsyncReplicas?: number;
            /** @description Name of the topic */
            readonly name?: string;
            /** @description Number of partitions for this topic */
            partitions?: number;
            /** @description Number of replication for this topic */
            replication?: number;
            /** @description Number of bytes for the retention of the data for this topic */
            retentionBytes?: number;
            /** @description Number of hours for the retention of the data for this topic */
            retentionHours?: number;
        };
        /** @description Cloud databases kafka topic acl definition */
        "cloud.project.database.kafka.TopicAcl": {
            /**
             * Format: uuid
             * @description Acl ID
             */
            readonly id?: string;
            /** @description Permission to give to this username on this topic. Permissions values can be retrieved using /cloud/project/{serviceName}/database/kafka/{clusterId}/permissions */
            permission: string;
            /** @description Topic affected by this acl */
            topic: string;
            /** @description Username affected by this acl */
            username: string;
        };
        /** @description Cloud database kafka topic creation definition */
        "cloud.project.database.kafka.TopicCreation": {
            /**
             * Format: uuid
             * @description Topic ID
             */
            readonly id?: string;
            /** @description Minimum insync replica accepted for this topic */
            minInsyncReplicas?: number;
            /** @description Name of the topic */
            name: string;
            /** @description Number of partitions for this topic */
            partitions?: number;
            /** @description Number of replication for this topic */
            replication?: number;
            /** @description Number of bytes for the retention of the data for this topic */
            retentionBytes?: number;
            /** @description Number of hours for the retention of the data for this topic */
            retentionHours?: number;
        };
        /** @description Cloud databases kafka user access definition */
        "cloud.project.database.kafka.user.Access": {
            /** @description User cert */
            readonly cert?: string;
            /**
             * Format: password
             * @description User key for the cert
             */
            readonly key?: string;
        };
        /** @description KafkaConnect connector definition */
        "cloud.project.database.kafkaConnect.Connector": {
            /** @description Configuration of the connector */
            configuration: {
                [key: string]: string | undefined;
            };
            /**
             * Format: uuid
             * @description Connector capability ID
             */
            readonly connectorId?: string;
            /**
             * Format: uuid
             * @description Connector ID
             */
            readonly id?: string;
            /** @description Name of the connector */
            readonly name?: string;
            /** @description Status of the connector */
            readonly status?: components["schemas"]["cloud.project.database.kafkaConnect.connector.StatusEnum"];
        };
        /** @description KafkaConnect connector definition */
        "cloud.project.database.kafkaConnect.ConnectorCreation": {
            /** @description Configuration of the connector */
            configuration: {
                [key: string]: string | undefined;
            };
            /**
             * Format: uuid
             * @description Connector capability ID
             */
            connectorId: string;
            /** @description Name of the connector */
            name: string;
        };
        /** @description KafkaConnect connector capability definition */
        "cloud.project.database.kafkaConnect.capabilities.Connector": {
            /** @description Name of the connector's author */
            readonly author?: string;
            /** @description URL of the official documentation of the connector */
            readonly documentationUrl?: string;
            /**
             * Format: uuid
             * @description Connector ID
             */
            readonly id?: string;
            /** @description Defines whether this connector and version is the latest available */
            readonly latest?: boolean;
            /** @description Name of the connector */
            readonly name?: string;
            /** @description Defines whether the connector is in preview */
            readonly preview?: boolean;
            /** @description Type of connector */
            readonly type?: components["schemas"]["cloud.project.database.kafkaConnect.capabilities.connector.TypeEnum"];
            /** @description Version of the connector */
            readonly version?: string;
        };
        /** @description KafkaConnect connector transform definition */
        "cloud.project.database.kafkaConnect.capabilities.connector.Transform": {
            /** @description Description of the transform */
            readonly description?: string;
            /** @description Pretty name of the transform */
            readonly displayName?: string;
            /** @description Name of the transform */
            readonly name?: string;
            /** @description Defines whether the transform is required */
            readonly required?: boolean;
            /** @description Transform type this transform relates to */
            readonly transformType?: string;
            /** @description Type of data of the transform */
            readonly type?: components["schemas"]["cloud.project.database.kafkaConnect.connector.property.TypeEnum"];
            /** @description Possible values for the transform if applicable */
            readonly values?: string[] | null;
        };
        /**
         * @description Possible types for the kafka connectors
         * @enum {string}
         */
        "cloud.project.database.kafkaConnect.capabilities.connector.TypeEnum": "sink" | "source";
        /** @description KafkaConnect connector config property definition */
        "cloud.project.database.kafkaConnect.capabilities.connector.configuration.Property": {
            /** @description Defines the default value is exists */
            readonly defaultValue?: string | null;
            /** @description Description of the property */
            readonly description?: string;
            /** @description Pretty name of the property */
            readonly displayName?: string;
            /** @description Group to which belongs the property */
            readonly group?: string;
            /** @description Importance of the property */
            readonly importance?: components["schemas"]["cloud.project.database.kafkaConnect.capabilities.connector.property.ImportanceEnum"];
            /** @description Name of the property */
            readonly name?: string;
            /** @description Defines whether the property is required */
            readonly required?: boolean;
            /** @description Type of data of the property */
            readonly type?: components["schemas"]["cloud.project.database.kafkaConnect.connector.property.TypeEnum"];
            /** @description Possible values for the property if string and applicable */
            readonly values?: string[] | null;
        };
        /**
         * @description Possible importance for the kafka connectors properties
         * @enum {string}
         */
        "cloud.project.database.kafkaConnect.capabilities.connector.property.ImportanceEnum": "high" | "low" | "medium";
        /**
         * @description Possible state of connector
         * @enum {string}
         */
        "cloud.project.database.kafkaConnect.connector.StatusEnum": "CREATING" | "FAILED" | "PAUSED" | "RUNNING" | "UNASSIGNED";
        /** @description KafkaConnect connector definition */
        "cloud.project.database.kafkaConnect.connector.Task": {
            /** @description Task ID */
            readonly id?: number;
            /** @description Status of the task */
            readonly status?: components["schemas"]["cloud.project.database.kafkaConnect.connector.task.StatusEnum"];
            /** @description Trace of the task */
            readonly trace?: string;
        };
        /**
         * @description Possible types for the kafka connectors properties
         * @enum {string}
         */
        "cloud.project.database.kafkaConnect.connector.property.TypeEnum": "boolean" | "class" | "double" | "int16" | "int32" | "int64" | "list" | "password" | "string" | "transform";
        /**
         * @description Possible state of connector task
         * @enum {string}
         */
        "cloud.project.database.kafkaConnect.connector.task.StatusEnum": "FAILED" | "PAUSED" | "RUNNING";
        /** @description M3db Namespace definition */
        "cloud.project.database.m3db.Namespace": {
            /**
             * Format: uuid
             * @description Namespace ID
             */
            readonly id?: string;
            /** @description Name of the namespace */
            readonly name?: string;
            /**
             * Format: duration
             * @description Resolution for an aggregated namespace
             */
            resolution?: string | null;
            /** @description Retention configuration */
            retention?: components["schemas"]["cloud.project.database.m3db.namespace.Retention"];
            /** @description Defines whether M3db will create snapshot files for this namespace */
            snapshotEnabled?: boolean;
            /** @description Type of namespace */
            readonly type?: components["schemas"]["cloud.project.database.m3db.namespace.TypeEnum"];
            /** @description Defines whether M3db will include writes to this namespace in the commit log */
            writesToCommitLogEnabled?: boolean;
        };
        /** @description M3db Namespace creation definition */
        "cloud.project.database.m3db.NamespaceCreation": {
            /**
             * Format: uuid
             * @description Namespace ID
             */
            readonly id?: string;
            /** @description Name of the namespace */
            name: string;
            /**
             * Format: duration
             * @description Resolution for an aggregated namespace
             */
            resolution?: string;
            /** @description Retention configuration */
            retention?: components["schemas"]["cloud.project.database.m3db.namespace.Retention"];
            /** @description Defines whether M3db will create snapshot files for this namespace */
            snapshotEnabled?: boolean;
            /** @description Type of namespace */
            type: components["schemas"]["cloud.project.database.m3db.namespace.TypeEnum"];
            /** @description Defines whether M3db will include writes to this namespace in the commit log */
            writesToCommitLogEnabled?: boolean;
        };
        /** @description M3db User definition */
        "cloud.project.database.m3db.User": {
            /**
             * Format: date-time
             * @description Date of the creation of the user
             */
            readonly createdAt?: string;
            /** @description Group of the user */
            group?: string;
            /**
             * Format: uuid
             * @description User ID
             */
            readonly id?: string;
            /** @description Current status of the user */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Name of the user */
            readonly username?: string;
        };
        /** @description User creation definition */
        "cloud.project.database.m3db.UserCreation": {
            /** @description Group of the user */
            group?: string;
            /** @description Name of the user */
            name: string;
        };
        /** @description M3db User definition */
        "cloud.project.database.m3db.UserWithPassword": {
            /**
             * Format: date-time
             * @description Date of the creation of the user
             */
            readonly createdAt?: string;
            /** @description Group of the user */
            readonly group?: string;
            /**
             * Format: uuid
             * @description User ID
             */
            readonly id?: string;
            /**
             * Format: password
             * @description Password of the user
             */
            readonly password?: string;
            /** @description Current status of the user */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Name of the user */
            readonly username?: string;
        };
        /** @description M3db namespace retention definition */
        "cloud.project.database.m3db.namespace.Retention": {
            /**
             * Format: duration
             * @description Controls how long we wait before expiring stale data
             */
            blockDataExpirationDuration?: string | null;
            /**
             * Format: duration
             * @description Controls how long to keep a block in memory before flushing to a fileset on disk
             */
            blockSizeDuration?: string | null;
            /**
             * Format: duration
             * @description Controls how far into the future writes to the namespace will be accepted
             */
            bufferFutureDuration?: string | null;
            /**
             * Format: duration
             * @description Controls how far into the past writes to the namespace will be accepted
             */
            bufferPastDuration?: string | null;
            /**
             * Format: duration
             * @description Controls the duration of time that M3DB will retain data for the namespace
             */
            periodDuration: string;
        };
        /**
         * @description Possible type of the service integration
         * @enum {string}
         */
        "cloud.project.database.m3db.namespace.TypeEnum": "aggregated" | "unaggregated";
        /** @description Cloud database mysql query statistics response body definition */
        "cloud.project.database.mysql.QueryStatistics": {
            /** @description Statistics of the queries */
            readonly queries?: components["schemas"]["cloud.project.database.mysql.querystatistics.Query"][];
        };
        /** @description Cloud database mysql single query statistic definition */
        "cloud.project.database.mysql.querystatistics.Query": {
            /** @description Average wait time of the summarized timed events, in milliseconds */
            readonly avgTimerWait?: number;
            /** @description Number of summarized events. This value includes all events, whether timed or nontimed */
            readonly countStar?: number;
            /** @description Digest of the summarized events */
            readonly digest?: string;
            /** @description Text of the summarized digest events */
            readonly digestText?: string;
            /**
             * Format: date-time
             * @description First appearance of the events
             */
            readonly firstSeen?: string;
            /**
             * Format: date-time
             * @description Last appearance of the events
             */
            readonly lastSeen?: string;
            /** @description Maximum wait time of the summarized timed events, in milliseconds */
            readonly maxTimerWait?: number;
            /** @description Mininum wait time of the summarized timed events, in milliseconds */
            readonly minTimerWait?: number;
            /** @description 95th percentile of the statement latency, in picoseconds */
            readonly quantile95?: number;
            /** @description 99th percentile of the statement latency, in picoseconds */
            readonly quantile99?: number;
            /** @description 99.9th percentile of the statement latency, in picoseconds */
            readonly quantile999?: number;
            /**
             * Format: date-time
             * @description Datetime when the querySampleText column was seen
             */
            readonly querySampleSeen?: string;
            /** @description Sample SQL statement that produces the digest value in the row */
            readonly querySampleText?: string;
            /** @description Wait time for the sample statement in the querySampleText column, in milliseconds */
            readonly querySampleTimerWait?: number;
            /** @description SchemaName of the summarized events */
            readonly schemaName?: string;
            /** @description Number of internal on-disk temporary tables created */
            readonly sumCreatedTmpDiskTables?: number;
            /** @description Number of internal temporary tables created */
            readonly sumCreatedTmpTables?: number;
            /** @description Number of errors */
            readonly sumErrors?: number;
            /** @description Sum of lock time of the summarized timed events, in milliseconds */
            readonly sumLockTime?: number;
            /** @description Sum of not good indexes of the summarized timed events */
            readonly sumNoGoodIndexUsed?: number;
            /** @description Sum of no indexes of the summarized timed events */
            readonly sumNoIndexUsed?: number;
            /** @description Sum of rows affected of the summarized timed events */
            readonly sumRowsAffected?: number;
            /** @description Sum of rows examined of the summarized timed events */
            readonly sumRowsExamined?: number;
            /** @description Sum of rows sent of the summarized timed events */
            readonly sumRowsSent?: number;
            /** @description Sum of select full join of the summarized timed events */
            readonly sumSelectFullJoin?: number;
            /** @description Sum of select full range join of the summarized timed events */
            readonly sumSelectFullRangeJoin?: number;
            /** @description Sum of select range of the summarized timed events */
            readonly sumSelectRange?: number;
            /** @description Sum of select range check of the summarized timed events */
            readonly sumSelectRangeCheck?: number;
            /** @description Sum of select scan of the summarized timed events */
            readonly sumSelectScan?: number;
            /** @description Sum of sorted merge passes of the summarized timed events */
            readonly sumSortMergePasses?: number;
            /** @description Sum of sorted range of the summarized timed events */
            readonly sumSortRange?: number;
            /** @description Sum of sorted rows of the summarized timed events */
            readonly sumSortRows?: number;
            /** @description Sum of sort scan of the summarized timed events */
            readonly sumSortScan?: number;
            /** @description Sum of wait time of the summarized timed events, in milliseconds */
            readonly sumTimerWait?: number;
            /** @description Number of warnings */
            readonly sumWarnings?: number;
        };
        /** @description Cloud database opensearch index definition */
        "cloud.project.database.opensearch.Index": {
            /**
             * Format: date-time
             * @description Date of the creation of the index
             */
            readonly createdAt?: string;
            /** @description Number of documents hold by the index */
            readonly documents?: number;
            /**
             * Format: uuid
             * @description Index ID
             */
            readonly id?: string;
            /** @description Name of the index */
            readonly name?: string;
            /** @description Number of replicas of the index */
            readonly replicasNumber?: number;
            /** @description Number of shards of the index */
            readonly shardsNumber?: number;
            /** @description Size of the index */
            readonly size?: number;
        };
        /** @description Cloud database opensearch pattern definition */
        "cloud.project.database.opensearch.Pattern": {
            /**
             * Format: uuid
             * @description Pattern ID
             */
            readonly id?: string;
            /** @description Maximum number of index for this pattern */
            maxIndexCount?: number;
            /** @description Pattern format */
            pattern: string;
        };
        /** @description Cloud database opensearch permissions definition */
        "cloud.project.database.opensearch.Permissions": {
            /** @description Possible values for the permissions */
            readonly names?: string[];
        };
        /** @description Cloud database opensearch service definition */
        "cloud.project.database.opensearch.Service": {
            /** @description Defines whether the acls are enabled on the cluster */
            aclsEnabled?: boolean;
            /** @description Time on which backups start every day. DEPRECATED: use backups.time */
            backupTime?: components["schemas"]["time"];
            /** @description Information related to the backups, null if the engine does not support backups */
            backups?: components["schemas"]["cloud.project.database.service.Backup"] | null;
            /** @description Capabilities of the services */
            readonly capabilities?: {
                [key: string]: components["schemas"]["cloud.project.database.service.CapabilityActions"] | undefined;
            };
            /** @description Category of the engine */
            readonly category?: components["schemas"]["cloud.project.database.engine.CategoryEnum"];
            /**
             * Format: date-time
             * @description Date of the creation of the cluster
             */
            readonly createdAt?: string;
            /** @description Description of the cluster */
            description?: string;
            /** @description Disk attributes of the cluster. DEPRECATED: use storage */
            disk?: components["schemas"]["cloud.project.database.service.Disk"];
            /** @description List of all endpoints of the service */
            readonly endpoints?: components["schemas"]["cloud.project.database.service.Endpoint"][];
            /** @description Name of the engine of the service */
            readonly engine?: components["schemas"]["cloud.project.database.EngineEnum"];
            /** @description The VM flavor used for this cluster */
            flavor?: string;
            /**
             * Format: uuid
             * @description Service ID
             */
            readonly id?: string;
            /** @description IP Blocks authorized to access to the cluster */
            ipRestrictions?: components["schemas"]["cloud.project.database.service.IpRestriction"][];
            /** @description Time on which maintenances can start every day */
            maintenanceTime?: components["schemas"]["time"];
            /**
             * Format: uuid
             * @description Private network ID in which the cluster is
             */
            readonly networkId?: string | null;
            /** @description Type of network of the cluster */
            readonly networkType?: components["schemas"]["cloud.project.database.NetworkTypeEnum"];
            /** @description Number of nodes in the cluster. DEPRECATED: use nodes */
            nodeNumber?: number;
            /** @description Nodes of the cluster */
            readonly nodes?: components["schemas"]["cloud.project.database.service.Node"][];
            /** @description Plan of the cluster */
            plan?: string;
            /** @description Current status of the cluster */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Storage attributes of the cluster */
            storage?: components["schemas"]["cloud.project.database.service.Storage"] | null;
            /**
             * Format: uuid
             * @description Private subnet ID in which the cluster is
             */
            readonly subnetId?: string | null;
            /** @description Version of the engine deployed on the cluster */
            version?: string;
        };
        /** @description Opensearch user definition */
        "cloud.project.database.opensearch.User": {
            /** @description Acls of the user */
            acls?: components["schemas"]["cloud.project.database.opensearch.UserAcl"][];
            /**
             * Format: date-time
             * @description Date of the creation of the user
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description User ID
             */
            readonly id?: string;
            /** @description Current status of the user */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Name of the user */
            readonly username?: string;
        };
        /** @description Opensearch user acl definition */
        "cloud.project.database.opensearch.UserAcl": {
            /** @description Pattern of the ACL */
            pattern: string;
            /** @description Permission of the ACL */
            permission: string;
        };
        /** @description Opensearch user creation definition */
        "cloud.project.database.opensearch.UserCreation": {
            /** @description Acls of the user */
            acls?: components["schemas"]["cloud.project.database.opensearch.UserAcl"][];
            /** @description Name of the user */
            name: string;
        };
        /** @description Opensearch user definition */
        "cloud.project.database.opensearch.UserWithPassword": {
            /** @description Acls of the user */
            readonly acls?: components["schemas"]["cloud.project.database.opensearch.UserAcl"][];
            /**
             * Format: date-time
             * @description Date of the creation of the user
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description User ID
             */
            readonly id?: string;
            /**
             * Format: password
             * @description Password of the user
             */
            readonly password?: string;
            /** @description Current status of the user */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Name of the user */
            readonly username?: string;
        };
        /** @description Cloud database postgresql connection pool response body definition */
        "cloud.project.database.postgresql.ConnectionPool": {
            /**
             * Format: uuid
             * @description Database used for the connection pool
             */
            databaseId?: string;
            /**
             * Format: uuid
             * @description ID of the connection pool
             */
            readonly id?: string;
            /** @description Connection mode to the connection pool */
            mode?: components["schemas"]["cloud.project.database.postgresql.connectionpool.ModeEnum"];
            /** @description Name of the connection pool */
            readonly name?: string;
            /** @description Port of the connection pool */
            readonly port?: number;
            /** @description Size of the connection pool */
            size?: number;
            /** @description Ssl connection mode for the pool */
            readonly sslMode?: components["schemas"]["cloud.project.database.postgresql.connectionpool.SslModeEnum"] | null;
            /** @description Connection URI to the pool */
            readonly uri?: string;
            /**
             * Format: uuid
             * @description User authorized to connect to the pool, if none all the users are allowed
             */
            userId?: string | null;
        };
        /** @description Cloud database postgresql connection pool creation body definition */
        "cloud.project.database.postgresql.ConnectionPoolCreation": {
            /**
             * Format: uuid
             * @description Database used for the connection pool
             */
            databaseId: string;
            /** @description Connection mode to the connection pool */
            mode: components["schemas"]["cloud.project.database.postgresql.connectionpool.ModeEnum"];
            /** @description Name of the connection pool */
            name: string;
            /** @description Size of the connection pool */
            size: number;
            /**
             * Format: uuid
             * @description User authorized to connect to the pool, if none all the users are allowed
             */
            userId?: string | null;
        };
        /** @description Cloud database postgresql query statistics response body definition */
        "cloud.project.database.postgresql.QueryStatistics": {
            /** @description Statistics of the queries */
            readonly queries?: components["schemas"]["cloud.project.database.postgresql.querystatistics.Query"][];
        };
        /**
         * @description Possible modes for the connection pools
         * @enum {string}
         */
        "cloud.project.database.postgresql.connectionpool.ModeEnum": "session" | "statement" | "transaction";
        /**
         * @description Possible ssl modes for the connection pools
         * @enum {string}
         */
        "cloud.project.database.postgresql.connectionpool.SslModeEnum": "require";
        /** @description Cloud database postgresql single query statistic definition */
        "cloud.project.database.postgresql.querystatistics.Query": {
            /** @description Time spent reading data file blocks by backends in this database, in milliseconds */
            readonly blkReadTime?: number;
            /** @description Time spent writing data file blocks by backends in this database, in milliseconds */
            readonly blkWriteTime?: number;
            /** @description Number of times this function has been called */
            readonly calls?: number;
            /** @description Name of the database */
            readonly databaseName?: string;
            /** @description Total number of local blocks dirtied by the statement */
            readonly localBlksDirtied?: number;
            /** @description Total number of local block cache hits by the statement */
            readonly localBlksHit?: number;
            /** @description Total number of local blocks read by the statement */
            readonly localBlksRead?: number;
            /** @description Total number of local blocks written by the statement */
            readonly localBlksWritten?: number;
            /** @description Maximum time spent planning the statement, in milliseconds */
            readonly maxPlanTime?: number;
            /** @description Maximum time spent for the statement, in milliseconds */
            readonly maxTime?: number;
            /** @description Mean time spent planning the statement, in milliseconds */
            readonly meanPlanTime?: number;
            /** @description Mean time spent for the statement, in milliseconds */
            readonly meanTime?: number;
            /** @description Minimum time spent planning the statement, in milliseconds */
            readonly minPlanTime?: number;
            /** @description Minimum time spent for the statement, in milliseconds */
            readonly minTime?: number;
            /** @description Text of a representative statement */
            readonly query?: string;
            /** @description Total number of rows retrieved or affected by the statement */
            readonly rows?: number;
            /** @description Total number of shared blocks dirtied by the statement */
            readonly sharedBlksDirtied?: number;
            /** @description Total number of shared block cache hits by the statement */
            readonly sharedBlksHit?: number;
            /** @description Total number of shared blocks read by the statement */
            readonly sharedBlksRead?: number;
            /** @description Total number of shared blocks written by the statement */
            readonly sharedBlksWritten?: number;
            /** @description Population standard deviation of time spent planning the statement, in milliseconds */
            readonly stddevPlanTime?: number;
            /** @description Population standard deviation of time spent for the statement, in milliseconds */
            readonly stddevTime?: number;
            /** @description Total number of temp blocks read by the statement */
            readonly tempBlksRead?: number;
            /** @description Total number of temp blocks written by the statement */
            readonly tempBlksWritten?: number;
            /** @description Total time spent planning the statement, in milliseconds */
            readonly totalPlanTime?: number;
            /** @description Total time spent for the statement, in milliseconds */
            readonly totalTime?: number;
            /** @description Name of the user who executed the statement */
            readonly username?: string;
            /** @description Total amount of WAL generated by the statement in bytes */
            readonly walBytes?: components["schemas"]["complexType.UnitAndValue_long"];
            /** @description Total number of WAL full page images generated by the statement */
            readonly walFpi?: number;
            /** @description Total number of WAL records generated by the statement */
            readonly walRecords?: number;
        };
        /** @description Redis user definition */
        "cloud.project.database.redis.User": {
            /** @description Categories of the user */
            categories?: string[];
            /** @description Channels of the user */
            channels?: string[];
            /** @description Commands of the user */
            commands?: string[];
            /**
             * Format: date-time
             * @description Date of the creation of the user
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description User ID
             */
            readonly id?: string;
            /** @description Keys of the user */
            keys?: string[];
            /** @description Current status of the user */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Name of the user */
            readonly username?: string;
        };
        /** @description Redis user definition */
        "cloud.project.database.redis.UserCreation": {
            /** @description Categories of the user */
            categories?: string[];
            /** @description Channels of the user */
            channels?: string[];
            /** @description Commands of the user */
            commands?: string[];
            /** @description Keys of the user */
            keys?: string[];
            /** @description Name of the user */
            name: string;
        };
        /** @description Redis user with password definition */
        "cloud.project.database.redis.UserWithPassword": {
            /** @description Categories of the user */
            readonly categories?: string[];
            /** @description Channels of the user */
            readonly channels?: string[];
            /** @description Commands of the user */
            readonly commands?: string[];
            /**
             * Format: date-time
             * @description Date of the creation of the user
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description User ID
             */
            readonly id?: string;
            /** @description Keys of the user */
            readonly keys?: string[];
            /**
             * Format: password
             * @description Password of the user
             */
            readonly password?: string;
            /** @description Current status of the user */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Name of the user */
            readonly username?: string;
        };
        /** @description Cloud database service backups definition */
        "cloud.project.database.service.Backup": {
            /**
             * Format: date-time
             * @description Date until PITR is available
             */
            readonly pitr?: string | null;
            /** @description Regions on which the backups are stored */
            regions?: string[];
            /** @description Number of retention days for the backups */
            readonly retentionDays?: number | null;
            /** @description Time on which backups start every day */
            time?: components["schemas"]["time"];
        };
        /** @description Cloud database service capability actions definition */
        "cloud.project.database.service.CapabilityActions": {
            /** @description Defines if the capability can be created */
            readonly create?: components["schemas"]["cloud.project.database.service.capability.StateEnum"] | null;
            /** @description Defines if the capability can be deleted */
            readonly delete?: components["schemas"]["cloud.project.database.service.capability.StateEnum"] | null;
            /** @description Defines if the capability can be read */
            readonly read?: components["schemas"]["cloud.project.database.service.capability.StateEnum"] | null;
            /** @description Defines if the capability can be updated */
            readonly update?: components["schemas"]["cloud.project.database.service.capability.StateEnum"] | null;
        };
        /**
         * @description List of capabilities available for services
         * @enum {string}
         */
        "cloud.project.database.service.CapabilityEnum": "advancedConfiguration" | "backupRestore" | "backupTime" | "backups" | "certificates" | "connectionPools" | "currentQueries" | "currentQueriesCancel" | "databases" | "enableWrites" | "fork" | "integrations" | "ipRestrictions" | "maintenanceApply" | "maintenanceTime" | "maintenances" | "namespaces" | "nodes" | "queryStatistics" | "queryStatisticsReset" | "service" | "userCredentialsReset" | "users";
        /** @description Certificates definition for cloud project databases */
        "cloud.project.database.service.Certificates": {
            /** @description CA certificate used for the service */
            readonly ca?: string;
        };
        /** @description Cloud database current queries */
        "cloud.project.database.service.CurrentQueries": {
            /** @description Current queries list */
            readonly queries?: components["schemas"]["cloud.project.database.service.currentqueries.Query"][];
        };
        /** @description A single value from a metric */
        "cloud.project.database.service.DataPoint": {
            /** @description Timestamp in seconds since epoch time */
            readonly timestamp?: number;
            /** @description Value of this datapoint */
            readonly value?: number;
        };
        /** @description Defines the database object in a cluster */
        "cloud.project.database.service.Database": {
            /** @description Defines if the database has been created by default */
            readonly default?: boolean;
            /**
             * Format: uuid
             * @description Database ID
             */
            readonly id?: string;
            /** @description Database name */
            name: string;
        };
        /** @description Defines the disk attributes of a service */
        "cloud.project.database.service.Disk": {
            /** @description Service disk size  */
            size?: number;
            /** @description Service disk size  */
            readonly type?: string;
        };
        /** @description Defines the endpoint object in a cluster */
        "cloud.project.database.service.Endpoint": {
            /** @description Type of component the URI relates to */
            readonly component?: components["schemas"]["cloud.project.database.service.endpoint.ComponentEnum"];
            /** @description Domain of the cluster */
            readonly domain?: string;
            /** @description Path of the endpoint */
            readonly path?: string | null;
            /** @description Connection port for the endpoint */
            readonly port?: number | null;
            /** @description Scheme used to generate the URI */
            readonly scheme?: string | null;
            /** @description Defines whether the endpoint uses SSL */
            readonly ssl?: boolean;
            /** @description SSL mode used to connect to the service if the SSL is enabled */
            readonly sslMode?: string | null;
            /** @description URI of the endpoint */
            readonly uri?: string | null;
        };
        /** @description Metrics datapoints from a specific host */
        "cloud.project.database.service.HostMetric": {
            /** @description List of metric's samples */
            readonly dataPoints?: components["schemas"]["cloud.project.database.service.DataPoint"][];
            /** @description Name of the originating host */
            readonly hostname?: string;
        };
        /** @description Cloud database service integration definition */
        "cloud.project.database.service.Integration": {
            /**
             * Format: uuid
             * @description ID of the destination service
             */
            destinationServiceId: string;
            /**
             * Format: uuid
             * @description Service ID
             */
            readonly id?: string;
            /** @description Parameters for the integration */
            parameters?: {
                [key: string]: string | undefined;
            } | null;
            /**
             * Format: uuid
             * @description ID of the source service
             */
            sourceServiceId: string;
            /** @description Current status of the integration */
            readonly status?: components["schemas"]["cloud.project.database.service.integration.StatusEnum"];
            /** @description Type of the integration */
            type?: components["schemas"]["cloud.project.database.service.integration.TypeEnum"];
        };
        /** @description Ip Restriction definition for cloud project databases */
        "cloud.project.database.service.IpRestriction": {
            /** @description Description of the ip restriction */
            description?: string;
            /** @description Whitelisted IP */
            ip?: components["schemas"]["ipBlock"];
            /** @description Current status of the ip restriction */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
        };
        /** @description A single log entry */
        "cloud.project.database.service.LogEntry": {
            /** @description Host from which the log is coming from */
            readonly hostname?: string;
            /** @description The log message */
            readonly message?: string;
            /** @description Timestamp in seconds since epoch time */
            readonly timestamp?: number;
        };
        /** @description Cloud database service maintenance definition */
        "cloud.project.database.service.Maintenance": {
            /**
             * Format: date-time
             * @description Date of the application of the maintenance
             */
            readonly appliedAt?: string | null;
            /** @description Description of the maintenance */
            readonly description?: string;
            /**
             * Format: uuid
             * @description ID of the maintenance
             */
            readonly id?: string;
            /**
             * Format: date-time
             * @description Date of the planification of the maintenance
             */
            readonly scheduledAt?: string | null;
            /** @description Status of the maintenance */
            readonly status?: components["schemas"]["cloud.project.database.service.maintenance.StatusEnum"];
        };
        /** @description Metric definition for cloud project databases */
        "cloud.project.database.service.Metric": {
            /** @description Metric values for each cluster's host */
            readonly metrics?: components["schemas"]["cloud.project.database.service.HostMetric"][];
            /** @description Name of the metric */
            readonly name?: string;
            /** @description Unit of the metric */
            readonly units?: components["schemas"]["cloud.project.database.service.MetricUnitEnum"];
        };
        /**
         * @description Supported metrics query period
         * @enum {string}
         */
        "cloud.project.database.service.MetricPeriodEnum": "lastDay" | "lastHour" | "lastMonth" | "lastWeek" | "lastYear";
        /**
         * @description Supported unit types for metrics
         * @enum {string}
         */
        "cloud.project.database.service.MetricUnitEnum": "BYTES" | "BYTES_PER_SECOND" | "GIGABYTES" | "GIGABYTES_PER_HOUR" | "MEGABYTES" | "MEGABYTES_PER_SECOND" | "MILLISECONDS" | "PERCENT" | "SCALAR" | "SCALAR_PER_SECOND" | "SECONDS" | "UNKNOWN";
        /** @description Cloud databases cluster node definition */
        "cloud.project.database.service.Node": {
            /**
             * Format: date-time
             * @description Date of the creation of the node
             */
            readonly createdAt?: string;
            /** @description Flavor of the node */
            readonly flavor?: string;
            /**
             * Format: uuid
             * @description Node ID
             */
            readonly id?: string;
            /** @description Name of the node */
            readonly name?: string;
            /** @description Connection port for the node */
            readonly port?: number;
            /** @description Region of the node */
            readonly region?: string;
            /** @description Role of the node */
            role?: components["schemas"]["cloud.project.database.service.node.RoleEnum"] | null;
            /** @description Current status of the node */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
        };
        /** @description Cloud databases cluster new node definition */
        "cloud.project.database.service.NodeCreation": {
            /**
             * Format: date-time
             * @description Date of the creation of the node
             */
            readonly createdAt?: string;
            /** @description Flavor of the node */
            flavor?: string;
            /**
             * Format: uuid
             * @description Node ID
             */
            readonly id?: string;
            /** @description Name of the node */
            readonly name?: string;
            /** @description Connection port for the node */
            readonly port?: number;
            /** @description Region of the node */
            region?: string;
            /** @description Role of the node */
            role?: components["schemas"]["cloud.project.database.service.node.RoleEnum"] | null;
            /** @description Current status of the node */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
        };
        /** @description Node pattern definition */
        "cloud.project.database.service.NodePattern": {
            /** @description Flavor of the nodes */
            flavor?: string;
            /** @description Number of nodes to create */
            number?: number;
            /** @description Region of the nodes */
            region?: string;
        };
        /** @description Cloud database service replication definition */
        "cloud.project.database.service.Replication": {
            /** @description Defines whether heartbeats are emitted */
            emitHeartbeats?: boolean;
            /** @description Defines whether the replication is actived */
            enabled: boolean;
            /**
             * Format: uuid
             * @description Service ID
             */
            readonly id?: string;
            /** @description ReplicationPolicyClass used for the replication */
            replicationPolicyClass?: components["schemas"]["cloud.project.database.service.replication.PolicyClassEnum"];
            /**
             * Format: uuid
             * @description ID of the integration source
             */
            readonly sourceIntegration?: string;
            /** @description Defines whether the group offsets must be sync */
            syncGroupOffsets?: boolean;
            /** @description Defines the interval in second between 2 sync */
            syncInterval?: number;
            /**
             * Format: uuid
             * @description ID of the integration target
             */
            readonly targetIntegration?: string;
            /** @description Patterns of the topics to exclude from the replication */
            topicExcludeList?: string[];
            /** @description Patterns of the topics to replicate */
            topics?: string[];
        };
        /** @description Cloud database service replication definition */
        "cloud.project.database.service.ReplicationCreation": {
            /** @description Defines whether heartbeats are emitted */
            emitHeartbeats?: boolean;
            /** @description Defines whether the replication is actived */
            enabled: boolean;
            /** @description ReplicationPolicyClass used for the replication */
            replicationPolicyClass?: components["schemas"]["cloud.project.database.service.replication.PolicyClassEnum"];
            /**
             * Format: uuid
             * @description ID of the integration source
             */
            sourceIntegration: string;
            /** @description Defines whether the group offsets must be sync */
            syncGroupOffsets?: boolean;
            /** @description Defines the interval in second between 2 sync */
            syncInterval?: number;
            /**
             * Format: uuid
             * @description ID of the integration target
             */
            targetIntegration: string;
            /** @description Patterns of the topics to exclude from the replication */
            topicExcludeList?: string[];
            /** @description Patterns of the topics to replicate */
            topics?: string[];
        };
        /** @description Cloud database service restore specification */
        "cloud.project.database.service.Restore": {
            /**
             * Format: date-time
             * @description point in time to restore from
             */
            pointInTime: string;
        };
        /** @description Defines the storage attributes of a service */
        "cloud.project.database.service.Storage": {
            /** @description Service storage size */
            size?: components["schemas"]["complexType.UnitAndValue_long"];
            /** @description Service storage type */
            readonly type?: string;
        };
        /** @description User definition */
        "cloud.project.database.service.User": {
            /**
             * Format: date-time
             * @description Date of the creation of the user
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description User ID
             */
            readonly id?: string;
            /** @description Current status of the user */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Name of the user */
            readonly username?: string;
        };
        /** @description User creation definition */
        "cloud.project.database.service.UserCreation": {
            /** @description Name of the user */
            name?: string;
        };
        /** @description User with password definition */
        "cloud.project.database.service.UserWithPassword": {
            /**
             * Format: date-time
             * @description Date of the creation of the user
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description User ID
             */
            readonly id?: string;
            /**
             * Format: password
             * @description Password of the user
             */
            readonly password?: string;
            /** @description Current status of the user */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Name of the user */
            readonly username?: string;
        };
        /** @description User with password definition */
        "cloud.project.database.service.UserWithPasswordAndRoles": {
            /**
             * Format: date-time
             * @description Date of the creation of the user
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description User ID
             */
            readonly id?: string;
            /**
             * Format: password
             * @description Password of the user
             */
            password?: string;
            /** @description Roles the user belongs to */
            roles?: string[];
            /** @description Current status of the user */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Name of the user */
            readonly username?: string;
        };
        /** @description User definition */
        "cloud.project.database.service.UserWithRoles": {
            /**
             * Format: date-time
             * @description Date of the creation of the user
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description User ID
             */
            readonly id?: string;
            /** @description Roles the user belongs to */
            roles?: string[];
            /** @description Current status of the user */
            readonly status?: components["schemas"]["cloud.project.database.StatusEnum"];
            /** @description Name of the user */
            readonly username?: string;
        };
        /** @description User creation definition */
        "cloud.project.database.service.UserWithRolesCreation": {
            /** @description Name of the user */
            name?: string;
            /** @description Roles the user belongs to */
            roles?: string[];
        };
        /**
         * @description State of the service capability for the service
         * @enum {string}
         */
        "cloud.project.database.service.capability.StateEnum": "disabled" | "enabled";
        /** @description Defines the source to fork a cluster from a backup. DEPRECATED: use forkFrom */
        "cloud.project.database.service.creation.BackupFork": {
            /**
             * Format: uuid
             * @description Backup ID (not compatible with pointInTime)
             */
            id?: string;
            /**
             * Format: date-time
             * @description Point in time to restore from (not compatible with id)
             */
            pointInTime?: string;
            /**
             * Format: uuid
             * @description Service ID to which the backups belong to
             */
            serviceId: string;
        };
        /** @description Defines the source to fork a cluster from a backup */
        "cloud.project.database.service.creation.ForkFrom": {
            /**
             * Format: uuid
             * @description Backup ID (not compatible with pointInTime)
             */
            backupId?: string;
            /**
             * Format: date-time
             * @description Point in time to restore from (not compatible with id)
             */
            pointInTime?: string;
            /**
             * Format: uuid
             * @description Service ID to which the backups belong to
             */
            serviceId: string;
        };
        /** @description Cloud database service current queries query definition */
        "cloud.project.database.service.currentqueries.Query": {
            /** @description Application name */
            readonly applicationName?: string;
            /**
             * Format: date-time
             * @description Backend start timestamp
             */
            readonly backendStart?: string | null;
            /** @description Backend type */
            readonly backendType?: string | null;
            /** @description XID for current backend */
            readonly backendXid?: number | null;
            /** @description Xmin for current backend */
            readonly backendXmin?: number | null;
            /** @description Client hostname */
            readonly clientHostname?: string | null;
            /** @description Client ip address */
            readonly clientIp?: components["schemas"]["ip"] | null;
            /** @description Client port */
            readonly clientPort?: number | null;
            /** @description Database ID */
            readonly databaseId?: number | null;
            /** @description Database name */
            readonly databaseName?: string;
            /** @description Leader process ID */
            readonly leaderPid?: number | null;
            /** @description Connection process ID */
            readonly pid?: number;
            /** @description Current query running on this connection */
            readonly query?: string;
            /** @description Duration of the query in seconds */
            readonly queryDuration?: number;
            /**
             * Format: date-time
             * @description Query start timestamp
             */
            readonly queryStart?: string | null;
            /** @description Connection state */
            readonly state?: components["schemas"]["cloud.project.database.service.currentqueries.StateEnum"];
            /**
             * Format: date-time
             * @description Connection state change timestamp
             */
            readonly stateChange?: string | null;
            /**
             * Format: date-time
             * @description Transaction start timestamp
             */
            readonly transactionStart?: string | null;
            /** @description User ID */
            readonly userId?: number | null;
            /** @description User name */
            readonly userName?: string;
            /** @description Connection wait event */
            readonly waitEvent?: string | null;
            /** @description Connection wait event type */
            readonly waitEventType?: components["schemas"]["cloud.project.database.service.currentqueries.WaitEventTypeEnum"] | null;
        };
        /**
         * @description Possible state of a query
         * @enum {string}
         */
        "cloud.project.database.service.currentqueries.StateEnum": "ACTIVE" | "DISABLED" | "FASTPATH_FUNCTION_CALL" | "IDLE" | "IDLE_IN_TRANSACTION" | "IDLE_IN_TRANSACTION_ABORTED";
        /**
         * @description Possible event type on which the backend is waiting
         * @enum {string}
         */
        "cloud.project.database.service.currentqueries.WaitEventTypeEnum": "ACTIVITY" | "BUFFER_PIN" | "CLIENT" | "EXTENSION" | "IO" | "IPC" | "LOCK" | "LWLOCK" | "TIMEOUT";
        /** @description Cloud database service current queries query cancel request */
        "cloud.project.database.service.currentqueries.query.CancelRequest": {
            /** @description Database server connection ID */
            pid?: number;
            /** @description Request immediate termination instead of soft cancel */
            terminate?: boolean;
        };
        /** @description Cloud database service current queries query cancel response */
        "cloud.project.database.service.currentqueries.query.CancelResponse": {
            /** @description Status reported by the database server */
            readonly success?: boolean;
        };
        /**
         * @description Defines all the values for the component in the service endpoints
         * @enum {string}
         */
        "cloud.project.database.service.endpoint.ComponentEnum": "cassandra" | "grafana" | "graphite" | "influxdb" | "kafka" | "kafkaConnect" | "kafkaRestApi" | "kafkaSASL" | "kafkaSchemaRegistry" | "kibana" | "m3coordinator" | "mongodb" | "mongodbAnalytics" | "mongodbSrv" | "mongodbSrvAnalytics" | "mysql" | "mysqlRead" | "mysqlx" | "opensearch" | "postgresql" | "postgresqlRead" | "postgresqlReadReplica" | "prometheusRead" | "prometheusWrite" | "redis";
        /**
         * @description Possible state of the integration
         * @enum {string}
         */
        "cloud.project.database.service.integration.StatusEnum": "READY";
        /**
         * @description Possible type of the service integration
         * @enum {string}
         */
        "cloud.project.database.service.integration.TypeEnum": "grafanaDashboard" | "grafanaDatasource" | "kafkaConnect" | "kafkaLogs" | "kafkaMirrorMaker" | "m3aggregator" | "m3dbMetrics" | "opensearchLogs" | "postgresqlMetrics";
        /**
         * @description Possible status of a service maintenance
         * @enum {string}
         */
        "cloud.project.database.service.maintenance.StatusEnum": "APPLIED" | "APPLYING" | "ERROR" | "PENDING" | "SCHEDULED";
        /**
         * @description Node role values
         * @enum {string}
         */
        "cloud.project.database.service.node.RoleEnum": "ANALYTICS" | "STANDARD";
        /**
         * @description Possible type of the service integration
         * @enum {string}
         */
        "cloud.project.database.service.replication.PolicyClassEnum": "org.apache.kafka.connect.mirror.DefaultReplicationPolicy" | "org.apache.kafka.connect.mirror.IdentityReplicationPolicy";
        /** @description Associated entity with a floating ip */
        "cloud.project.floatingIp.AssociatedEntity": {
            /**
             * Format: uuid
             * @description ID of the gateway
             */
            readonly gatewayId?: string;
            /**
             * Format: uuid
             * @description ID of the port
             */
            readonly id?: string;
            /** @description IP of the port */
            readonly ip?: components["schemas"]["ip"];
            /** @description Type of the port */
            readonly type?: components["schemas"]["cloud.project.floatingIp.associatedEntity.TypeEnum"];
        };
        /**
         * @description Status of a floating ip
         * @enum {string}
         */
        "cloud.project.floatingIp.StatusEnum": "active" | "down" | "error";
        /**
         * @description Type of the associated entity
         * @enum {string}
         */
        "cloud.project.floatingIp.associatedEntity.TypeEnum": "dhcp" | "instance" | "loadbalancer" | "routerInterface" | "unknown";
        /** @description A stream to send data */
        "cloud.project.io.Stream": {
            /**
             * Format: duration
             * @description Backlog of the stream in RFC3339 (duration)
             */
            backlog?: string;
            /** @description Description of the stream */
            description?: string | null;
            /**
             * Format: uuid
             * @description ID of the stream
             */
            readonly id?: string;
            /** @description Kind of persistence for the stream. */
            readonly kind?: components["schemas"]["cloud.project.io.StreamKindEnum"];
            /** @description Name of the stream */
            readonly name?: string;
            /** @description Regions where the stream is available */
            readonly regions?: string[];
            /**
             * Format: duration
             * @description Retention of the stream in RFC3339 (duration)
             */
            retention?: string;
            /** @description Status of the stream. */
            readonly status?: components["schemas"]["cloud.project.io.StreamStatusEnum"];
            /** @description Throttling of the stream (number of message allowed per second for the stream) */
            throttling?: number;
        };
        /** @description Create a stream of data */
        "cloud.project.io.StreamCreation": {
            /** @description Description of the stream */
            description: string;
            /** @description Kind of the stream */
            kind: components["schemas"]["cloud.project.io.StreamKindEnum"];
            /** @description Name of the stream */
            name: string;
            /** @description Region where the stream will be available */
            region: string;
        };
        /**
         * @description Kind of persistence for the stream
         * @enum {string}
         */
        "cloud.project.io.StreamKindEnum": "NON_PERSISTENT" | "PERSISTENT";
        /** @description Get statistics of a stream */
        "cloud.project.io.StreamStats": {
            /** @description Number of messages per second */
            readonly usage?: number;
        };
        /**
         * @description Status of the stream
         * @enum {string}
         */
        "cloud.project.io.StreamStatusEnum": "ERROR" | "INSTALLING" | "RUNNING";
        /** @description Region information */
        "cloud.project.io.stream.Region": {
            /** @description Endpoint of the region */
            readonly endpoint?: components["schemas"]["cloud.project.io.stream.RegionEndpoint"];
            /** @description Region name */
            readonly region?: string;
        };
        /** @description Region information */
        "cloud.project.io.stream.RegionEndpoint": {
            /** @description Pulsar endpoint of the stream */
            readonly pulsar?: string;
        };
        /** @description Create a consumer on a stream */
        "cloud.project.io.stream.Subscription": {
            /**
             * Format: uuid
             * @description ID of the subscription
             */
            readonly id?: string;
            /** @description Kind of the subscription */
            readonly kind?: components["schemas"]["cloud.project.io.stream.SubscriptionKindEnum"];
            /** @description Name of the subscription */
            readonly name?: string;
        };
        /** @description Create a subscription on a stream */
        "cloud.project.io.stream.SubscriptionCreation": {
            /** @description Name of the subscription */
            name: string;
        };
        /**
         * @description Kind of the subscription
         * @enum {string}
         */
        "cloud.project.io.stream.SubscriptionKindEnum": "EXCLUSIVE" | "FAILOVER" | "KEY_SHARED" | "SHARED";
        /** @description Get statistic of a subscription */
        "cloud.project.io.stream.SubscriptionStats": {
            /** @description Messages waiting to be consumed */
            readonly lag?: number;
        };
        /** @description Token to access a stream */
        "cloud.project.io.stream.Token": {
            /** @description Action of the token */
            readonly action?: components["schemas"]["cloud.project.io.stream.TokenActionEnum"];
            /**
             * Format: uuid
             * @description ID of the token
             */
            readonly id?: string;
            /**
             * Format: password
             * @description Access token
             */
            readonly token?: string;
        };
        /**
         * @description Action of the token
         * @enum {string}
         */
        "cloud.project.io.stream.TokenActionEnum": "BOTH" | "CONSUME" | "PRODUCE";
        /** @description Create a token to access a stream */
        "cloud.project.io.stream.TokenCreation": {
            /** @description Action of the token */
            action: components["schemas"]["cloud.project.io.stream.TokenActionEnum"];
        };
        /** @description HTTP load balancer dispatch action */
        "cloud.project.loadbalancer.ActionDispatch": {
            /** @description The backend name */
            name: string;
            /** @description Target name */
            target: string;
        };
        /** @description HTTP load balancer redirect action */
        "cloud.project.loadbalancer.ActionRedirect": {
            /** @description Location url */
            location: string;
            /** @description The backend name */
            name: string;
            /** @description StatusCode for redirect action */
            statusCode: components["schemas"]["cloud.project.loadbalancer.action.RedirectStatusCodeEnum"];
        };
        /** @description HTTP load balancer reject action */
        "cloud.project.loadbalancer.ActionReject": {
            /** @description The action name */
            name: string;
            /** @description StatusCode for reject action */
            statusCode: components["schemas"]["cloud.project.loadbalancer.action.RejectStatusCodeEnum"];
        };
        /** @description HTTP load balancer rewrite action */
        "cloud.project.loadbalancer.ActionRewrite": {
            /** @description Location url */
            location: string;
            /** @description The backend name */
            name: string;
        };
        /** @description HTTP load balancer actions */
        "cloud.project.loadbalancer.Actions": {
            /** @description List of dispatch actions */
            dispatch?: components["schemas"]["cloud.project.loadbalancer.ActionDispatch"][] | null;
            /** @description List of redirect actions */
            redirect?: components["schemas"]["cloud.project.loadbalancer.ActionRedirect"][] | null;
            /** @description List of reject actions */
            reject?: components["schemas"]["cloud.project.loadbalancer.ActionReject"][] | null;
            /** @description List of rewrite actions */
            rewrite?: components["schemas"]["cloud.project.loadbalancer.ActionRewrite"][] | null;
        };
        /** @description Address to reach the load balancer */
        "cloud.project.loadbalancer.Address": {
            /** @description IP version 4 */
            readonly ipv4?: components["schemas"]["ipv4"];
            /** @description IP version 6 */
            readonly ipv6?: components["schemas"]["ipv6"] | null;
        };
        /** @description IP list split in version 4 and 6 */
        "cloud.project.loadbalancer.Addresses": {
            /** @description IP version 4 list */
            readonly ipv4?: components["schemas"]["ipv4Block"][];
            /** @description IP version 6 list */
            readonly ipv6?: components["schemas"]["ipv6Block"][] | null;
        };
        /** @description An application load balancer configuration */
        "cloud.project.loadbalancer.ApplicationConfiguration": {
            /** @description All actions */
            readonly actions?: components["schemas"]["cloud.project.loadbalancer.Actions"] | null;
            /** @description List of certificate ID */
            readonly certificates?: string[];
            /** @description List of conditions */
            readonly conditions?: components["schemas"]["cloud.project.loadbalancer.Condition"][] | null;
            /** @description List of entryPoints */
            readonly entryPoints?: components["schemas"]["cloud.project.loadbalancer.EntryPoint"][];
            /** @description networking configuration */
            readonly networking?: components["schemas"]["cloud.project.loadbalancer.configuration.networking.Networking"];
            /** @description List of targets */
            readonly targets?: components["schemas"]["cloud.project.loadbalancer.Target"][] | null;
            /** @description Identifier and version of the configuration */
            readonly version?: number;
        };
        /** @description An application load balancer configuration */
        "cloud.project.loadbalancer.ApplicationConfigurationCreation": {
            /** @description All actions */
            actions?: components["schemas"]["cloud.project.loadbalancer.Actions"] | null;
            /** @description List of certificate ID */
            certificates?: string[];
            /** @description List of conditions */
            conditions?: components["schemas"]["cloud.project.loadbalancer.Condition"][] | null;
            /** @description List of entryPoints */
            entryPoints?: components["schemas"]["cloud.project.loadbalancer.EntryPoint"][];
            /** @description networking configuration */
            networking?: components["schemas"]["cloud.project.loadbalancer.configuration.networking.Networking"] | null;
            /** @description List of targets */
            targets?: components["schemas"]["cloud.project.loadbalancer.Target"][] | null;
            /** @description Identifier and version of the configuration */
            readonly version?: number;
        };
        /** @description Application load balancer size capability */
        "cloud.project.loadbalancer.ApplicationLoadBalancerSizeCapability": {
            /** @description Bandwidth allowed in Mb/s */
            readonly bandwidth?: number;
            /** @description Maximum connection allowed on the load balancer */
            readonly maximumConnection?: number;
            /** @description Number of requests allowed per second */
            readonly requestsPerSecond?: number;
            /** @description Size of the load balancer */
            readonly size?: components["schemas"]["cloud.project.loadbalancer.SizeEnum"];
        };
        /** @description A load balancer backend */
        "cloud.project.loadbalancer.Backend": {
            /** @description Use a specific balancer algorithm */
            balancer?: components["schemas"]["cloud.project.loadbalancer.backend.BalancerAlgorithmEnum"] | null;
            /** @description The backend name */
            name: string;
            /** @description Use proxy protocol on backend */
            proxyProtocol?: components["schemas"]["cloud.project.loadbalancer.backend.ProxyProtocolEnum"] | null;
            /** @description List of server in backend */
            servers: components["schemas"]["cloud.project.loadbalancer.Server"][];
            /** @description Enable sticky session, only usable with http-mode frontends */
            sticky?: boolean | null;
        };
        /** @description Select a load balancer backend */
        "cloud.project.loadbalancer.BackendSelector": {
            /** @description The backend name */
            name: string;
        };
        /** @description A condition */
        "cloud.project.loadbalancer.Condition": {
            /** @description The condition name */
            key?: string | null;
            /** @description Criterion matching operation */
            match: components["schemas"]["cloud.project.loadbalancer.condition.MatchEnum"];
            /** @description The condition name */
            name: string;
            /** @description Negate the condition */
            negate?: boolean | null;
            /** @description Criterion used to chose the appropriate action */
            type: components["schemas"]["cloud.project.loadbalancer.condition.TypeEnum"];
            /** @description The list of values to match */
            values: string[];
        };
        /** @description A load balancer configuration */
        "cloud.project.loadbalancer.Configuration": {
            /** @description List of backends */
            readonly backends?: components["schemas"]["cloud.project.loadbalancer.Backend"][];
            /** @description List of certificate ID */
            readonly certificates?: string[];
            /** @description List of frontends */
            readonly frontends?: components["schemas"]["cloud.project.loadbalancer.Frontend"][];
            /** @description networking configuration */
            readonly networking?: components["schemas"]["cloud.project.loadbalancer.configuration.networking.Networking"];
            /** @description Identifier and version of the configuration */
            readonly version?: number;
        };
        /** @description A load balancer configuration */
        "cloud.project.loadbalancer.ConfigurationCreation": {
            /** @description List of backends */
            backends?: components["schemas"]["cloud.project.loadbalancer.Backend"][];
            /** @description List of certificate ID */
            certificates?: string[];
            /** @description List of frontends */
            frontends?: components["schemas"]["cloud.project.loadbalancer.Frontend"][];
            /** @description networking configuration */
            networking?: components["schemas"]["cloud.project.loadbalancer.configuration.networking.Networking"] | null;
            /** @description Identifier and version of the configuration */
            readonly version?: number;
        };
        /** @description Information about version of the configuration */
        "cloud.project.loadbalancer.ConfigurationVersion": {
            /** @description Applied version of the configuration */
            readonly applied?: number;
            /** @description Latest version of the configuration */
            readonly latest?: number;
        };
        /** @description A load balancer entryPoint */
        "cloud.project.loadbalancer.EntryPoint": {
            /** @description The default target name */
            defaultTarget?: string | null;
            /** @description Disable HTTP2 */
            disableH2?: boolean | null;
            /** @description The frontend name */
            name: string;
            /** @description Port ranges to listen */
            portRanges?: components["schemas"]["cloud.project.loadbalancer.PortRange"][] | null;
            /** @description Ports to listen */
            ports?: number[] | null;
            /** @description List of rules */
            rules?: components["schemas"]["cloud.project.loadbalancer.Rule"][];
            tls?: boolean;
        };
        /** @description A load balancer frontend */
        "cloud.project.loadbalancer.Frontend": {
            /** @description Selector for backend */
            backends: components["schemas"]["cloud.project.loadbalancer.BackendSelector"][];
            /** @description Load balancing mode */
            mode?: components["schemas"]["cloud.project.loadbalancer.frontend.ModeEnum"] | null;
            /** @description The frontend name */
            name: string;
            /** @description Port to listen (deprecated: see ports) */
            port?: number | null;
            /** @description Port ranges to listen */
            portRanges?: components["schemas"]["cloud.project.loadbalancer.PortRange"][] | null;
            /** @description Ports to listen */
            ports?: number[] | null;
            tls?: boolean;
            /** @description IP range to whitelist */
            whitelist?: components["schemas"]["ipBlock"][];
        };
        /** @description Network load balancer size capability */
        "cloud.project.loadbalancer.LoadBalancerSizeCapability": {
            /** @description Bandwidth allowed in Mb/s */
            readonly bandwidth?: number;
            /** @description Maximum connection allowed on the load balancer */
            readonly maximumConnection?: number;
            /** @description Number of new connection allowed per second */
            readonly newConnectionPerSecond?: number;
            /** @description Size of the load balancer */
            readonly size?: components["schemas"]["cloud.project.loadbalancer.SizeEnum"];
        };
        /** @description A port range */
        "cloud.project.loadbalancer.PortRange": {
            /** @description Port range end */
            end?: number;
            /** @description Port range start */
            start?: number;
        };
        /** @description Region information */
        "cloud.project.loadbalancer.Region": {
            /** @description Region name */
            readonly region?: string;
        };
        /** @description A entrypoint rule */
        "cloud.project.loadbalancer.Rule": {
            /** @description The action name */
            action: string;
            /** @description The list of condition to match */
            conditions?: string[] | null;
        };
        /** @description A load balancer backend server */
        "cloud.project.loadbalancer.Server": {
            /** @description IP address of a server */
            ip: components["schemas"]["ip"];
            /** @description Server name */
            name: string;
            /** @description Disable health check */
            noCheck?: boolean | null;
            /** @description Port that the server listen */
            port: number;
            /** @description Weight of the server in the backend */
            weight?: number | null;
        };
        /**
         * @description Size of the load balancer
         * @enum {string}
         */
        "cloud.project.loadbalancer.SizeEnum": "L" | "M" | "S";
        /** @description Loadbalancer stats */
        "cloud.project.loadbalancer.Stats": {
            /** @description Concurrent connections */
            readonly concurrentFlows?: number;
            /** @description HTTP requests made */
            readonly httpRequestsPerSecond?: number | null;
            /** @description Main loadbalancer status */
            readonly status?: components["schemas"]["cloud.project.loadbalancer.stats.StatusEnum"];
            /** @description Targets state */
            readonly targets?: components["schemas"]["cloud.project.loadbalancer.stats.Target"][];
            /** @description New connections opened per second */
            readonly tcpConnectionsPerSecond?: number;
            /** @description Throughput consumed on the entrypoints */
            readonly throughput?: components["schemas"]["cloud.project.loadbalancer.stats.Throughput"];
        };
        /**
         * @description Status of a load balancer
         * @enum {string}
         */
        "cloud.project.loadbalancer.StatusEnum": "APPLYING" | "CREATED" | "DELETING" | "ERROR" | "FROZEN" | "RUNNING";
        /** @description A load balancer target */
        "cloud.project.loadbalancer.Target": {
            /** @description Use a specific balancer algorithm */
            balancer?: components["schemas"]["cloud.project.loadbalancer.target.BalancerAlgorithmEnum"] | null;
            /** @description The backend name */
            name: string;
            /** @description Use proxy protocol on target */
            proxyProtocol?: components["schemas"]["cloud.project.loadbalancer.target.ProxyProtocolEnum"] | null;
            /** @description List of server in target */
            servers: components["schemas"]["cloud.project.loadbalancer.Server"][];
            /** @description Enable sticky session, only usable with http-mode frontends */
            sticky?: boolean | null;
        };
        /**
         * @description Available status code for Redirect action
         * @enum {string}
         */
        "cloud.project.loadbalancer.action.RedirectStatusCodeEnum": "301" | "302" | "303" | "307" | "308";
        /**
         * @description Available status code for Reject action
         * @enum {string}
         */
        "cloud.project.loadbalancer.action.RejectStatusCodeEnum": "200" | "400" | "403" | "405" | "408" | "429" | "500" | "502" | "503" | "504";
        /**
         * @description Available load balancer backend balancer algorithm
         * @enum {string}
         */
        "cloud.project.loadbalancer.backend.BalancerAlgorithmEnum": "first" | "leastconn" | "roundrobin" | "source" | "static-rr";
        /**
         * @description Available load balancer backend proxy-protocol
         * @enum {string}
         */
        "cloud.project.loadbalancer.backend.ProxyProtocolEnum": "v1" | "v2" | "v2-cn" | "v2-ssl";
        /**
         * @description Matching operator
         * @enum {string}
         */
        "cloud.project.loadbalancer.condition.MatchEnum": "end-with" | "exists" | "is" | "regex" | "start-with";
        /**
         * @description Matching field
         * @enum {string}
         */
        "cloud.project.loadbalancer.condition.TypeEnum": "cookie" | "header" | "host" | "method" | "path" | "query-param" | "source";
        /** @description Networking configuration egress definition */
        "cloud.project.loadbalancer.configuration.networking.Egress": {
            /**
             * Format: uuid
             * @description vrack networking id
             */
            id?: string | null;
            /** @description networking egress kind definition */
            kind: components["schemas"]["cloud.project.loadbalancer.networking.egress.KindEnum"];
        };
        /** @description Networking configuration ingress definition */
        "cloud.project.loadbalancer.configuration.networking.Ingress": {
            /** @description networking configuration ingress kind definition */
            kind: components["schemas"]["cloud.project.loadbalancer.networking.ingress.KindEnum"];
        };
        /** @description Networking configuration object */
        "cloud.project.loadbalancer.configuration.networking.Networking": {
            /** @description Networking configuration definition for egress */
            egress?: components["schemas"]["cloud.project.loadbalancer.configuration.networking.Egress"] | null;
            /** @description Networking configuration definition for ingress */
            ingress?: components["schemas"]["cloud.project.loadbalancer.configuration.networking.Ingress"] | null;
        };
        /**
         * @description Available load balancer frontend mode
         * @enum {string}
         */
        "cloud.project.loadbalancer.frontend.ModeEnum": "TCP";
        /** @description Networking Egress definition */
        "cloud.project.loadbalancer.networking.Egress": {
            /**
             * Format: uuid
             * @description vrack networking id
             */
            id?: string | null;
            /** @description networking egress kind definition */
            kind: components["schemas"]["cloud.project.loadbalancer.networking.egress.KindEnum"];
        };
        /** @description Networking Egress definition */
        "cloud.project.loadbalancer.networking.EgressCreation": {
            /** @description networking egress kind definition */
            kind: components["schemas"]["cloud.project.loadbalancer.networking.egress.KindEnum"];
        };
        /** @description Networking Ingress definition */
        "cloud.project.loadbalancer.networking.Ingress": {
            /** @description networking ingress kind definition */
            readonly kind?: components["schemas"]["cloud.project.loadbalancer.networking.ingress.KindEnum"];
        };
        /** @description Networking Ingress definition */
        "cloud.project.loadbalancer.networking.IngressCreation": {
            /** @description networking ingress kind definition */
            kind: components["schemas"]["cloud.project.loadbalancer.networking.ingress.KindEnum"];
        };
        /** @description Networking object */
        "cloud.project.loadbalancer.networking.Networking": {
            /** @description Networking definition for egress */
            readonly egress?: components["schemas"]["cloud.project.loadbalancer.networking.Egress"];
            /** @description Networking definition for ingress */
            readonly ingress?: components["schemas"]["cloud.project.loadbalancer.networking.Ingress"];
        };
        /** @description Networking creation object */
        "cloud.project.loadbalancer.networking.NetworkingCreation": {
            /** @description Networking definition for egress */
            egress?: components["schemas"]["cloud.project.loadbalancer.networking.EgressCreation"] | null;
            /** @description Networking definition for ingress */
            ingress?: components["schemas"]["cloud.project.loadbalancer.networking.IngressCreation"] | null;
        };
        /**
         * @description Networking kind
         * @enum {string}
         */
        "cloud.project.loadbalancer.networking.egress.KindEnum": "public" | "vrack";
        /**
         * @description Networking kind
         * @enum {string}
         */
        "cloud.project.loadbalancer.networking.ingress.KindEnum": "public";
        /**
         * @description Status of availability of loadbalancer
         * @enum {string}
         */
        "cloud.project.loadbalancer.stats.StatusEnum": "HEALTHY" | "NOT_AVAILABLE";
        /** @description Loadbalancer target stats */
        "cloud.project.loadbalancer.stats.Target": {
            /** @description Target name */
            readonly name?: string;
            /** @description Concurrent connections */
            readonly servers?: components["schemas"]["cloud.project.loadbalancer.stats.target.Server"][];
        };
        /** @description Loadbalancer bandwidth stats */
        "cloud.project.loadbalancer.stats.Throughput": {
            /** @description Consumed inbound bandwidth (bytes/s) */
            readonly in?: number;
            /** @description Consumed outbound bandwidth (bytes/s) */
            readonly out?: number;
        };
        /** @description Loadbalancer target server stats */
        "cloud.project.loadbalancer.stats.target.Server": {
            /** @description Target name */
            readonly name?: string;
            /** @description Server status */
            readonly status?: components["schemas"]["cloud.project.loadbalancer.stats.target.server.StatusEnum"];
        };
        /**
         * @description Status of target's server
         * @enum {string}
         */
        "cloud.project.loadbalancer.stats.target.server.StatusEnum": "ERROR" | "HEALTHY" | "INIT" | "L4_CONNECTION_ERROR" | "L4_TIMEOUT_ERROR" | "L7_PROTOCOL_ERROR" | "L7_RESPONSE_ERROR" | "L7_TIMEOUT" | "UNKNOWN";
        /**
         * @description Available load balancer target balancer algorithm
         * @enum {string}
         */
        "cloud.project.loadbalancer.target.BalancerAlgorithmEnum": "first" | "leastconn" | "roundrobin" | "source" | "static-rr";
        /**
         * @description Available load balancer target proxy-protocol
         * @enum {string}
         */
        "cloud.project.loadbalancer.target.ProxyProtocolEnum": "v1" | "v2" | "v2-cn" | "v2-ssl";
        /** @description network load balancer reject action */
        "cloud.project.networkloadbalancer.ActionReject": {
            /** @description The action name */
            name: string;
            /** @description type of reject action */
            type: components["schemas"]["cloud.project.networkloadbalancer.action.RejectTypeEnum"];
        };
        /** @description Network Loadbalancer action */
        "cloud.project.networkloadbalancer.Actions": {
            /** @description List of dispatch actions */
            dispatch?: components["schemas"]["cloud.project.loadbalancer.ActionDispatch"][] | null;
            /** @description List of reject actions */
            reject?: components["schemas"]["cloud.project.networkloadbalancer.ActionReject"][] | null;
        };
        /** @description A condition */
        "cloud.project.networkloadbalancer.Condition": {
            /** @description The condition name */
            key?: string | null;
            /** @description Criterion matching operation */
            match: components["schemas"]["cloud.project.loadbalancer.condition.MatchEnum"];
            /** @description The condition name */
            name: string;
            /** @description Negate the condition */
            negate?: boolean | null;
            /** @description Criterion used to chose the appropriate action */
            type: components["schemas"]["cloud.project.networkloadbalancer.condition.TypeEnum"];
            /** @description The list of values to match */
            values: string[];
        };
        /** @description A network load balancer configuration */
        "cloud.project.networkloadbalancer.Configuration": {
            /** @description All actions */
            readonly actions?: components["schemas"]["cloud.project.networkloadbalancer.Actions"] | null;
            /** @description List of conditions */
            readonly conditions?: components["schemas"]["cloud.project.networkloadbalancer.Condition"][] | null;
            /** @description List of entryPoints */
            readonly entryPoints?: components["schemas"]["cloud.project.networkloadbalancer.EntryPoint"][];
            /** @description networking configuration */
            readonly networking?: components["schemas"]["cloud.project.loadbalancer.configuration.networking.Networking"];
            /** @description List of targets */
            readonly targets?: components["schemas"]["cloud.project.loadbalancer.Target"][] | null;
            /** @description Identifier and version of the configuration */
            readonly version?: number;
        };
        /** @description A network load balancer configuration */
        "cloud.project.networkloadbalancer.ConfigurationCreation": {
            /** @description All actions */
            actions?: components["schemas"]["cloud.project.networkloadbalancer.Actions"] | null;
            /** @description List of conditions */
            conditions?: components["schemas"]["cloud.project.networkloadbalancer.Condition"][] | null;
            /** @description List of entryPointss */
            entryPoints?: components["schemas"]["cloud.project.networkloadbalancer.EntryPoint"][];
            /** @description networking configuration */
            networking?: components["schemas"]["cloud.project.loadbalancer.configuration.networking.Networking"] | null;
            /** @description List of targets */
            targets?: components["schemas"]["cloud.project.loadbalancer.Target"][] | null;
            /** @description Identifier and version of the configuration */
            readonly version?: number;
        };
        /** @description A network load balancer entryPoint */
        "cloud.project.networkloadbalancer.EntryPoint": {
            /** @description The default target name */
            defaultTarget?: string | null;
            /** @description The frontend name */
            name: string;
            /** @description Port ranges to listen */
            portRanges?: components["schemas"]["cloud.project.loadbalancer.PortRange"][] | null;
            /** @description Ports to listen */
            ports?: number[] | null;
            /** @description List of rules */
            rules?: components["schemas"]["cloud.project.loadbalancer.Rule"][];
        };
        /** @description Network load balancer size capability */
        "cloud.project.networkloadbalancer.LoadBalancerSizeCapability": {
            /** @description Bandwidth allowed in Mb/s */
            readonly bandwidth?: number;
            /** @description Maximum connection allowed on the load balancer */
            readonly maximumConnection?: number;
            /** @description Maximum number of connections opened per second */
            readonly newConnectionPerSecond?: number;
            /** @description Size of the load balancer */
            readonly size?: components["schemas"]["cloud.project.loadbalancer.SizeEnum"];
        };
        /**
         * @description Available type of Reject action
         * @enum {string}
         */
        "cloud.project.networkloadbalancer.action.RejectTypeEnum": "deny" | "drop";
        /**
         * @description Matching field
         * @enum {string}
         */
        "cloud.project.networkloadbalancer.condition.TypeEnum": "source";
        /**
         * @description Possible values for image os type
         * @enum {string}
         */
        "cloud.project.region.ImageOsTypeEnum": "baremetal-linux" | "linux" | "windows";
        /**
         * @description Possible values for image status
         * @enum {string}
         */
        "cloud.project.region.ImageStatusEnum": "active" | "deleted" | "error" | "queued" | "saving";
        /**
         * @description Possible values for image visibility
         * @enum {string}
         */
        "cloud.project.region.ImageVisibilityEnum": "community" | "private" | "public" | "shared";
        /** @description Quotas */
        "cloud.quota.AllowedQuota": {
            /** @description Quotas for compute */
            readonly compute?: components["schemas"]["cloud.quota.ComputeQuota"];
            /** @description Name */
            readonly name?: string;
            /** @description Quotas for network */
            readonly network?: components["schemas"]["cloud.quota.NetworkQuota"];
            /** @description Quotas for volume */
            readonly volume?: components["schemas"]["cloud.quota.VolumeQuota"];
        };
        /** @description Quotas for compute */
        "cloud.quota.ComputeQuota": {
            /** @description Maximum total cores allowed in your project */
            readonly cores?: number;
            /** @description Maximum number of instances allowed in your project */
            readonly instances?: number;
            /** @description Maximum total ram allowed in your project */
            readonly ram?: number;
        };
        /** @description Quotas on instances */
        "cloud.quota.InstanceUsageQuotas": {
            /** @description Maximum total cores allowed in your project */
            readonly maxCores?: number;
            /** @description Maximum total cores allowed in your project */
            readonly maxInstances?: number;
            readonly maxRam?: number;
            /** @description Current used cores number */
            readonly usedCores?: number;
            /** @description Current used instances */
            readonly usedInstances?: number;
            /** @description Current used ram */
            readonly usedRAM?: number;
        };
        /** @description Quotas on keymanager */
        "cloud.quota.KeymanagerQuotas": {
            /** @description Maximum number of secrets allowed in your project */
            readonly maxSecrets?: number;
            /** @description Current number of used secrets */
            readonly usedSecrets?: number;
        };
        /** @description Quotas on keypairs */
        "cloud.quota.KeypairQuotas": {
            /** @description Maximum keypairs count allowed in your project */
            readonly maxCount?: number;
        };
        /** @description Quotas on loadbalancer */
        "cloud.quota.LoadbalancerQuotas": {
            /** @description Maximum number of loadbalancers allowed in your project */
            readonly maxLoadbalancers?: number;
            /** @description Current number of used loadbalancers */
            readonly usedLoadbalancers?: number;
        };
        /** @description Quotas for network */
        "cloud.quota.NetworkQuota": {
            /** @description Maximum number of networks allowed in your project */
            readonly networks?: number;
            /** @description Maximum number of ports allowed in your project */
            readonly ports?: number;
            /** @description Maximum number of subnets allowed in your project */
            readonly subnets?: number;
        };
        /** @description Quotas on network */
        "cloud.quota.NetworkQuotas": {
            /** @description Maximum number of floating ips allowed in your project */
            readonly maxFloatingIPs?: number;
            /** @description Maximum number of gateways allowed in your project */
            readonly maxGateways?: number;
            /** @description Maximum networks allowed in your project */
            readonly maxNetworks?: number;
            /** @description Maximum subnets allowed in your project */
            readonly maxSubnets?: number;
            /** @description Current number of used floating ips */
            readonly usedFloatingIPs?: number;
            /** @description Current number of used gateways */
            readonly usedGateways?: number;
            /** @description Current used networks */
            readonly usedNetworks?: number;
            /** @description Current used subnets */
            readonly usedSubnets?: number;
        };
        /** @description Quotas */
        "cloud.quota.Quotas": {
            /** @description Quotas on instances */
            readonly instance?: components["schemas"]["cloud.quota.InstanceUsageQuotas"] | null;
            /** @description Quotas on keymanager */
            readonly keymanager?: components["schemas"]["cloud.quota.KeymanagerQuotas"] | null;
            /** @description Quotas on keypairs */
            readonly keypair?: components["schemas"]["cloud.quota.KeypairQuotas"] | null;
            /** @description Quotas on loadbalancer */
            readonly loadbalancer?: components["schemas"]["cloud.quota.LoadbalancerQuotas"] | null;
            /** @description Quotas on network */
            readonly network?: components["schemas"]["cloud.quota.NetworkQuotas"] | null;
            /** @description Region */
            readonly region?: string;
            /** @description Quotas on shares */
            readonly share?: components["schemas"]["cloud.quota.share.Quota"] | null;
            /** @description Quotas on volumes */
            readonly volume?: components["schemas"]["cloud.quota.VolumeUsageQuotas"] | null;
        };
        /** @description Quotas for volume */
        "cloud.quota.VolumeQuota": {
            /** @description Maximum total volume capacity allowed in your project */
            readonly gigabytes?: number;
            /** @description Maximum number of snapshots allowed in your project */
            readonly snapshots?: number;
            /** @description Maximum number of volumes allowed in your project */
            readonly volumes?: number;
        };
        /** @description Quotas on volumes */
        "cloud.quota.VolumeUsageQuotas": {
            /** @description Maximum total volume backup capacity allowed in your project */
            readonly maxBackupGigabytes?: number;
            /** @description Maximum total volume capacity allowed in your project */
            readonly maxGigabytes?: number;
            /** @description Maximum volumes backup count */
            readonly maxVolumeBackupCount?: number;
            /** @description Maximum volumes count */
            readonly maxVolumeCount?: number;
            /** @description Current used volume backup gigabytes */
            readonly usedBackupGigabytes?: number;
            /** @description Current used volume gigabytes */
            readonly usedGigabytes?: number;
            /** @description Current volumes backup count */
            readonly volumeBackupCount?: number;
            /** @description Current volumes count */
            readonly volumeCount?: number;
        };
        /** @description Share Quota */
        "cloud.quota.share.Quota": {
            /** @description Maximum share size of a share */
            readonly maxShareSizePerShare?: number;
            /** @description Maximum share total size for project */
            readonly maxShareSizeTotal?: number;
            /** @description Maximum number of share snapshots */
            readonly maxShareSnapshots?: number;
            /** @description Maximum number of shares in the quota */
            readonly maxSharesNumber?: number;
            /** @description Used share total size for project */
            readonly usedShareSizeTotal?: number;
            /** @description Used number of share snapshot */
            readonly usedShareSnapshots?: number;
            /** @description Used number of shares in the quota */
            readonly usedSharesNumber?: number;
        };
        /** @description Cloud Storage Quota */
        "cloud.quota.storage.Quota": {
            /** @description Quota used in bytes */
            readonly bytesUsed?: number;
            /** @description Number of containers on account */
            readonly containerCount?: number;
            /** @description Number of objects on account */
            readonly objectCount?: number;
            /** @description Quota in bytes */
            readonly quotaBytes?: number | null;
        };
        /** @description Update storage quota */
        "cloud.quota.storage.QuotaUpdate": {
            /** @description New quota in bytes */
            quotaBytes: number;
        };
        /** @description Region flavor */
        "cloud.region.Flavor": {
            /** @description Flavor disk size in GB */
            readonly disk?: number;
            /**
             * Format: uuid
             * @description Flavor ID
             */
            readonly id?: string;
            /** @description Flavor name */
            readonly name?: string;
            /** @description Flavor ram size in MB */
            readonly ram?: number;
            /** @description Flavor region */
            readonly region?: string;
            /** @description Flavor VCPUs number */
            readonly vcpus?: number;
        };
        /** @description Region image */
        "cloud.region.Image": {
            /** @description Base image reference */
            readonly baseImageRef?: string;
            /**
             * Format: date-time
             * @description Creation date of the image
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description Image ID
             */
            readonly id?: string;
            /** @description Image name */
            readonly name?: string;
            /** @description Image OS type */
            readonly osType?: components["schemas"]["cloud.project.region.ImageOsTypeEnum"];
            /** @description Image region */
            readonly region?: string;
            /** @description Image size in bytes */
            readonly size?: number;
            /** @description Image status */
            readonly status?: components["schemas"]["cloud.project.region.ImageStatusEnum"];
            /** @description Image visibility */
            readonly visibility?: components["schemas"]["cloud.project.region.ImageVisibilityEnum"];
        };
        /** @description Region SSHKey */
        "cloud.region.SSHKey": {
            /** @description SSHKey fingerPrint */
            readonly fingerPrint?: string;
            /** @description SSHKey ID */
            readonly id?: string;
            /** @description SSHKey name */
            readonly name?: string;
            /** @description SSHKey publicKey */
            readonly publicKey?: string;
            /** @description SSHKey region */
            readonly region?: string;
        };
        /** @description Region volume */
        "cloud.region.Volume": {
            /**
             * Format: uuid
             * @description Volume ID
             */
            readonly id?: string;
            /** @description Volume name */
            readonly name?: string;
            /** @description Volume size */
            readonly size?: number;
        };
        /** @description Role permissions */
        "cloud.role.Permission": {
            /** @description Permission label */
            readonly label?: string;
            /** @description Roles having this permission */
            readonly roles?: string[];
        };
        /** @description Role */
        "cloud.role.Role": {
            /** @description Role Description */
            readonly description?: string;
            /** @description Role id */
            readonly id?: string;
            /** @description Role Name */
            readonly name?: string;
            /** @description Permissions granted by this role */
            readonly permissions?: string[];
        };
        /** @description OpenStack role */
        "cloud.role.Roles": {
            /** @description OpenStack roles */
            readonly roles?: components["schemas"]["cloud.role.Role"][];
            /** @description OpenStack services */
            readonly services?: components["schemas"]["cloud.role.Service"][];
        };
        /** @description OpenStack service */
        "cloud.role.Service": {
            /** @description Name of the service */
            readonly name?: string;
            /** @description List of permissions */
            readonly permissions?: components["schemas"]["cloud.role.Permission"][];
        };
        /** @description Capability */
        "cloud.share.Capability": {
            /** @description Whether the capability is enabled or not */
            readonly enabled?: boolean;
            /** @description Capability name */
            readonly name?: string;
        };
        /** @description Object */
        "cloud.share.ExportLocationObject": {
            /** @description Export location id */
            readonly id?: string;
            /** @description Export location mount path */
            readonly path?: string;
        };
        /**
         * @description Share protocol
         * @enum {string}
         */
        "cloud.share.ProtocolEnum": "NFS";
        /** @description Share */
        "cloud.share.Share": {
            /** @description Share capabilities */
            readonly capabilities?: components["schemas"]["cloud.share.Capability"][] | null;
            /**
             * Format: date-time
             * @description The date and timestamp when the resource was created
             */
            readonly createdAt?: string;
            /** @description Share description */
            description?: string | null;
            /** @description Share export locations */
            readonly exportLocations?: components["schemas"]["cloud.share.ExportLocationObject"][] | null;
            /**
             * Format: uuid
             * @description Share ID
             */
            readonly id?: string;
            /** @description Whether the share is public */
            readonly isPublic?: boolean;
            /** @description Share name */
            name?: string | null;
            /** @description Share protocol */
            readonly protocol?: components["schemas"]["cloud.share.ProtocolEnum"];
            /** @description Region */
            readonly region?: string;
            /** @description Share size in GB */
            size?: number;
            /** @description Share status */
            readonly status?: components["schemas"]["cloud.share.StatusEnum"];
            /**
             * Format: date-time
             * @description The date and timestamp when the resource was updated for the last time
             */
            readonly updatedAt?: string;
        };
        /** @description Input Object used to create a share */
        "cloud.share.ShareUpdate": {
            /** @description Share description */
            description?: string;
            /** @description Share name */
            name?: string;
            /** @description New share size in GB */
            newSize?: number;
        };
        /**
         * @description Share status
         * @enum {string}
         */
        "cloud.share.StatusEnum": "available" | "awaiting_transfer" | "backup_creating" | "backup_restoring" | "backup_restoring_error" | "creating" | "creating_from_snapshot" | "deleted" | "deleting" | "error" | "error_deleting" | "extending" | "extending_error" | "inactive" | "manage_error" | "manage_starting" | "migrating" | "migrating_to" | "replication_change" | "reverting" | "reverting_error" | "shrinking" | "shrinking_error" | "shrinking_possible_data_loss_error" | "unmanage_error" | "unmanage_starting" | "unmanaged";
        /** @description Share ACL */
        "cloud.share.acl.ACL": {
            /** @description ACL Access Level */
            readonly accessLevel?: components["schemas"]["cloud.share.acl.AccessLevelEnum"];
            /** @description ACL Access Resource */
            readonly accessTo?: string;
            /** @description ACL Access Type */
            readonly accessType?: components["schemas"]["cloud.share.acl.AccessTypeEnum"];
            /**
             * Format: date-time
             * @description The date and timestamp when the resource was created
             */
            readonly createdAt?: string;
            /**
             * Format: uuid
             * @description ACL ID
             */
            readonly id?: string;
            /** @description ACL Status */
            readonly status?: components["schemas"]["cloud.share.acl.StatusEnum"];
            /**
             * Format: date-time
             * @description The date and timestamp when the resource was updated for the last time
             */
            readonly updatedAt?: string;
        };
        /** @description Share ACL */
        "cloud.share.acl.ACLCreate": {
            /** @description ACL Access Level */
            accessLevel?: components["schemas"]["cloud.share.acl.AccessLevelEnum"];
            /** @description ACL Access Resource */
            accessTo?: string;
            /** @description ACL Access Type */
            accessType?: components["schemas"]["cloud.share.acl.AccessTypeEnum"];
        };
        /**
         * @description ACL Access Level
         * @enum {string}
         */
        "cloud.share.acl.AccessLevelEnum": "ro" | "rw";
        /**
         * @description ACL Access Type
         * @enum {string}
         */
        "cloud.share.acl.AccessTypeEnum": "cert" | "ip" | "user";
        /**
         * @description ACL Status
         * @enum {string}
         */
        "cloud.share.acl.StatusEnum": "active" | "applying" | "denying" | "error" | "queued_to_apply" | "queued_to_deny";
        /** @description Share snapshot */
        "cloud.share.snapshot.Snapshot": {
            /**
             * Format: date-time
             * @description The date and timestamp when the resource was created
             */
            readonly createdAt?: string;
            /** @description Snapshot description */
            description?: string | null;
            /**
             * Format: uuid
             * @description Snapshot ID
             */
            readonly id?: string;
            /** @description Snapshot name */
            name?: string | null;
            /**
             * Format: uuid
             * @description Share ID
             */
            readonly shareId?: string;
            /** @description Share protocol */
            readonly shareProtocol?: components["schemas"]["cloud.share.ProtocolEnum"] | null;
            /** @description Share size in GB */
            readonly shareSize?: number;
            /** @description Snapshot size in GB */
            readonly size?: number;
            /** @description Snapshot status */
            readonly status?: components["schemas"]["cloud.share.snapshot.StatusEnum"];
        };
        /**
         * @description Snapshot Status
         * @enum {string}
         */
        "cloud.share.snapshot.StatusEnum": "available" | "creating" | "deleting" | "error" | "error_deleting" | "manage_error" | "manage_starting" | "restoring" | "unmanage_error" | "unmanage_starting";
        /** @description SshKey */
        "cloud.sshkey.SshKey": {
            /** @description SSH key id */
            readonly id?: string;
            /** @description SSH key name */
            readonly name?: string;
            /** @description SSH public key */
            readonly publicKey?: string;
            /** @description SSH key regions */
            readonly regions?: string[];
        };
        /** @description SshKeyDetail */
        "cloud.sshkey.SshKeyDetail": {
            /** @description SSH key fingerprint */
            readonly fingerPrint?: string;
            /** @description SSH key id */
            readonly id?: string;
            /** @description SSH key name */
            readonly name?: string;
            /** @description SSH public key */
            readonly publicKey?: string;
            /** @description SSH key regions */
            readonly regions?: string[];
        };
        /** @description Content */
        "cloud.stack.Content": {
            /** @description Content */
            readonly content?: string;
            /** @description Type of the content */
            readonly type?: string;
        };
        /** @description InstructionGuide */
        "cloud.stack.InstructionGuide": {
            /** @description Guide introduction content */
            readonly content?: components["schemas"]["cloud.stack.Content"][];
            /** @description Guide language */
            readonly language?: string;
            /** @description Sections of the guide */
            readonly sections?: components["schemas"]["cloud.stack.Section"][];
            /** @description Guide title */
            readonly title?: string;
        };
        /** @description Section */
        "cloud.stack.Section": {
            /** @description Content of the guide section */
            readonly content?: components["schemas"]["cloud.stack.Content"][];
            /** @description Steps to follow */
            readonly steps?: components["schemas"]["cloud.stack.Step"][];
            /** @description Title of the guide section */
            readonly title?: string;
        };
        /** @description Stack */
        "cloud.stack.Stack": {
            /** @description Stack last commit */
            readonly commit?: string;
            /** @description Stack description */
            readonly description?: string;
            /** @description GIT repository */
            readonly gitRepository?: string;
            /** @description Instructions to start the stack */
            readonly instructions?: components["schemas"]["cloud.stack.InstructionGuide"][];
            /** @description Stack name */
            readonly name?: string;
            /** @description Stack release tag */
            readonly release?: string;
            /** @description Stack uuid */
            readonly uuid?: string;
        };
        /** @description Step */
        "cloud.stack.Step": {
            /** @description Content of the step */
            readonly content?: components["schemas"]["cloud.stack.Content"][];
            /** @description Title of the step */
            readonly title?: string;
        };
        /** @description Add storage policy for container */
        "cloud.storage.AddContainerPolicy": {
            /** @description Container object key */
            objectKey?: string;
            /** @description Policy role */
            roleName: components["schemas"]["cloud.storage.PolicyRoleEnum"];
        };
        /** @description Archive a ColdArchiveContainer */
        "cloud.storage.ArchiveColdArchiveContainer": {
            /** @description Archive is locked (cannot be deleted) for the given number of days */
            lockedUntilDays?: number | null;
        };
        /** @description Container */
        "cloud.storage.Container": {
            /** @description Whether this is an archive container or not */
            readonly archive?: boolean | null;
            /** @description Container type */
            readonly containerType?: components["schemas"]["cloud.storage.TypeEnum"] | null;
            /** @description Storage id */
            readonly id?: string;
            /** @description Storage name */
            readonly name?: string;
            readonly region?: string;
            /** @description Total bytes stored */
            readonly storedBytes?: number;
            /** @description Total objects stored */
            readonly storedObjects?: number;
        };
        /** @description ContainerAccess */
        "cloud.storage.ContainerAccess": {
            /** @description Storage access endpoints */
            readonly endpoints?: components["schemas"]["cloud.storage.Endpoint"][];
            /** @description Storage access token */
            readonly token?: string;
        };
        /** @description ContainerDetail */
        "cloud.storage.ContainerDetail": {
            /** @description Whether this is an archive container or not */
            readonly archive?: boolean;
            /** @description Container type */
            readonly containerType?: components["schemas"]["cloud.storage.TypeEnum"];
            /** @description Origins allowed to make Cross Origin Requests */
            readonly cors?: string[];
            /** @description Container name */
            readonly name?: string;
            /** @description Objects stored in container */
            readonly objects?: components["schemas"]["cloud.storage.ContainerObject"][];
            /** @description Public container (DEPRECATED: see containerType) */
            readonly public?: boolean;
            /** @description Container region */
            readonly region?: string;
            /** @description Container static URL */
            readonly staticUrl?: string;
            /** @description Total bytes stored */
            readonly storedBytes?: number;
            /** @description Total objects stored */
            readonly storedObjects?: number;
        };
        /** @description ContainerObject */
        "cloud.storage.ContainerObject": {
            /** @description Object content type */
            readonly contentType?: string;
            /**
             * Format: date-time
             * @description Last modification date
             */
            readonly lastModified?: string;
            /** @description Object name */
            readonly name?: string;
            /** @description Object retrieval delay (when unsealing) */
            readonly retrievalDelay?: number;
            /** @description Object retrieval state */
            readonly retrievalState?: components["schemas"]["cloud.storage.RetrievalStateEnum"];
            /** @description Object size */
            readonly size?: number;
        };
        /** @description ContainerObjectTempURL */
        "cloud.storage.ContainerObjectTempURL": {
            /**
             * Format: date-time
             * @description Temporary URL expiration date
             */
            readonly expirationDate?: string;
            /** @description Temporary URL to get object */
            readonly getURL?: string;
        };
        /**
         * @description Encryption algorithm
         * @enum {string}
         */
        "cloud.storage.EncryptionAlgorithmEnum": "AES256" | "plaintext";
        /** @description Endpoint */
        "cloud.storage.Endpoint": {
            /** @description Endpoint region */
            readonly region?: string;
            /** @description Endpoint URL */
            readonly url?: string;
        };
        /** @description Raw storage policy */
        "cloud.storage.PolicyRaw": {
            /** @description Raw storage policy */
            policy?: string;
        };
        /**
         * @description Storage policy role
         * @enum {string}
         */
        "cloud.storage.PolicyRoleEnum": "admin" | "deny" | "readOnly" | "readWrite";
        /** @description Presigned URL */
        "cloud.storage.PresignedURL": {
            /** @description Presigned URL method */
            readonly method?: components["schemas"]["cloud.storage.PresignedURLMethodEnum"];
            /** @description Signed headers */
            readonly signedHeaders?: {
                [key: string]: string | undefined;
            };
            /** @description Presigned URL */
            readonly url?: string;
        };
        /** @description Inputs to generate a presigned URL */
        "cloud.storage.PresignedURLInput": {
            /** @description URL expiration in seconds */
            expire?: number;
            /** @description Presigned URL method */
            method?: components["schemas"]["cloud.storage.PresignedURLMethodEnum"];
            /** @description Object name */
            object?: string;
            /** @description Storage class */
            storageClass?: components["schemas"]["cloud.storage.StorageClassEnum"];
        };
        /**
         * @description Presigned URL method
         * @enum {string}
         */
        "cloud.storage.PresignedURLMethodEnum": "DELETE" | "GET" | "PUT";
        /** @description Cloud Storage Quota */
        "cloud.storage.Quota": {
            /** @description Current number of buckets */
            readonly buckets?: number;
            /** @description Maximum number of buckets */
            readonly maxBuckets?: number;
        };
        /**
         * @description RetrievalStateEnum
         * @enum {string}
         */
        "cloud.storage.RetrievalStateEnum": "sealed" | "unsealed" | "unsealing";
        /**
         * @description RightEnum
         * @enum {string}
         */
        "cloud.storage.RightEnum": "all" | "read" | "write";
        /**
         * @description Storage class
         * @enum {string}
         */
        "cloud.storage.StorageClassEnum": "HIGH_PERF" | "STANDARD";
        /**
         * @description TypeEnum
         * @enum {string}
         */
        "cloud.storage.TypeEnum": "private" | "public" | "static";
        /**
         * @description Versioning status
         * @enum {string}
         */
        "cloud.storage.VersioningStatusEnum": "disabled" | "enabled" | "suspended";
        /**
         * @description PaymentTypeEnum
         * @enum {string}
         */
        "cloud.usage.PaymentTypeEnum": "post" | "pre";
        /** @description Period */
        "cloud.usage.Period": {
            /**
             * Format: date-time
             * @description Usage from
             */
            readonly from?: string;
            /**
             * Format: date-time
             * @description Usage to
             */
            readonly to?: string;
        };
        /** @description UsageBill */
        "cloud.usage.UsageBill": {
            /** @description ID of the bill */
            readonly bill_id?: string;
            /** @description Amount of credits used in this bill (not necessarily on part) */
            readonly credit?: number;
            /** @description Amount of the bill that accounts for services for the usage period, credits not taken into account */
            readonly part?: number;
            /** @description Payment type */
            readonly payment_type?: components["schemas"]["cloud.usage.PaymentTypeEnum"];
            /** @description Total amount of the bill, credits not taken into account */
            readonly total?: number;
        };
        /** @description UsageCurrent */
        "cloud.usage.UsageCurrent": {
            /** @description Hourly usage */
            readonly hourlyUsage?: components["schemas"]["cloud.billingView.HourlyResources"] | null;
            /**
             * Format: date-time
             * @description Entry last update
             */
            readonly lastUpdate?: string;
            /** @description Monthly usage */
            readonly monthlyUsage?: components["schemas"]["cloud.billingView.MonthlyResources"] | null;
            /** @description Usage dates (from/to) */
            readonly period?: components["schemas"]["cloud.usage.Period"];
            /** @description Resource usage (billed per hour/minute/second/unit) */
            readonly resourcesUsage?: components["schemas"]["cloud.billingView.TypedResources"][] | null;
        };
        /** @description UsageCurrentBills */
        "cloud.usage.UsageCurrentBills": {
            /** @description Bills related to the current usage */
            readonly bills?: components["schemas"]["cloud.usage.UsageBill"][];
        };
        /** @description UsageForecast */
        "cloud.usage.UsageForecast": {
            /** @description Hourly forecast */
            readonly hourlyUsage?: components["schemas"]["cloud.billingView.HourlyResources"] | null;
            /**
             * Format: date-time
             * @description Entry last update
             */
            readonly lastUpdate?: string;
            /** @description Monthly forecast */
            readonly monthlyUsage?: components["schemas"]["cloud.billingView.MonthlyResources"] | null;
            /** @description Forecast dates (from/to) */
            readonly period?: components["schemas"]["cloud.usage.Period"];
            /** @description Resource usage forecast (billed per hour/minute/second/unit) */
            readonly resourcesUsage?: components["schemas"]["cloud.billingView.TypedResources"][] | null;
            /** @description Usable credit to pay next bill */
            readonly usableCredits?: components["schemas"]["cloud.billingView.UsedCredits"] | null;
        };
        /** @description UsageHistory */
        "cloud.usage.UsageHistory": {
            /** @description Usage id */
            readonly id?: string;
            /**
             * Format: date-time
             * @description Entry last update
             */
            readonly lastUpdate?: string;
            /** @description Usage dates (from/to) */
            readonly period?: components["schemas"]["cloud.usage.Period"];
        };
        /** @description UsageHistoryDetail */
        "cloud.usage.UsageHistoryDetail": {
            /** @description Hourly usage */
            readonly hourlyUsage?: components["schemas"]["cloud.billingView.HourlyResources"] | null;
            /** @description Usage id */
            readonly id?: string;
            /**
             * Format: date-time
             * @description Entry last update
             */
            readonly lastUpdate?: string;
            /** @description Monthly usage */
            readonly monthlyUsage?: components["schemas"]["cloud.billingView.MonthlyResources"] | null;
            /** @description Usage dates (from/to) */
            readonly period?: components["schemas"]["cloud.usage.Period"];
            /** @description Resource usage (billed per hour/minute/second/unit) */
            readonly resourcesUsage?: components["schemas"]["cloud.billingView.TypedResources"][] | null;
        };
        /** @description UsageHistoryDetailBills */
        "cloud.usage.UsageHistoryDetailBills": {
            /** @description Bills related to the usage */
            readonly bills?: components["schemas"]["cloud.usage.UsageBill"][];
        };
        /** @description Client Cloud Configuration */
        "cloud.user.Configuration": {
            /** @description Client configuration */
            readonly content?: string;
        };
        /** @description Openrc */
        "cloud.user.Openrc": {
            /** @description openrc file */
            readonly content?: string;
        };
        /**
         * @description OpenrcVersionEnum
         * @enum {string}
         */
        "cloud.user.OpenrcVersionEnum": "v2.0" | "v3";
        /**
         * @description RCloneServiceEnum
         * @enum {string}
         */
        "cloud.user.RCloneServiceEnum": "storage" | "storage-s3";
        /** @description Rclone */
        "cloud.user.Rclone": {
            /** @description rclone configuration file */
            readonly content?: string;
        };
        /**
         * @description RoleEnum
         * @enum {string}
         */
        "cloud.user.RoleEnum": "admin" | "administrator" | "ai_training_operator" | "ai_training_read" | "authentication" | "backup_operator" | "compute_operator" | "image_operator" | "infrastructure_supervisor" | "network_operator" | "network_security_operator" | "objectstore_operator" | "volume_operator";
        /** @description S3Credentials */
        "cloud.user.S3Credentials": {
            /** @description S3 Access key */
            readonly access?: string;
            /** @description Tenant id */
            readonly tenantId?: string;
            /** @description User id */
            readonly userId?: string;
        };
        /** @description S3CredentialsSecretOnly */
        "cloud.user.S3CredentialsSecretOnly": {
            /**
             * Format: password
             * @description S3 Access key secret
             */
            readonly secret?: string;
        };
        /** @description S3CredentialsWithSecret */
        "cloud.user.S3CredentialsWithSecret": {
            /** @description S3 Access key */
            readonly access?: string;
            /**
             * Format: password
             * @description S3 Access key secret
             */
            readonly secret?: string;
            /** @description Tenant id */
            readonly tenantId?: string;
            /** @description User id */
            readonly userId?: string;
        };
        /** @description User */
        "cloud.user.User": {
            /**
             * Format: date-time
             * @description User creation date
             */
            readonly creationDate?: string;
            /** @description User description */
            readonly description?: string;
            /** @description User id */
            readonly id?: number;
            /** @description User id on openstack */
            readonly openstackId?: string | null;
            /** @description User roles */
            readonly roles?: components["schemas"]["cloud.role.Role"][];
            /** @description User status */
            readonly status?: components["schemas"]["cloud.user.UserStatusEnum"];
            /** @description Username */
            readonly username?: string;
        };
        /** @description UserDetail */
        "cloud.user.UserDetail": {
            /**
             * Format: date-time
             * @description User creation date
             */
            readonly creationDate?: string;
            /** @description User description */
            readonly description?: string;
            /** @description User id */
            readonly id?: number;
            /** @description User id on openstack */
            readonly openstackId?: string | null;
            /** @description User password */
            readonly password?: string;
            /** @description User roles */
            readonly roles?: components["schemas"]["cloud.role.Role"][];
            /** @description User status */
            readonly status?: components["schemas"]["cloud.user.UserStatusEnum"];
            /** @description Username */
            readonly username?: string;
        };
        /**
         * @description UserStatusEnum
         * @enum {string}
         */
        "cloud.user.UserStatusEnum": "creating" | "deleted" | "deleting" | "ok";
        /** @description Snapshot */
        "cloud.volume.Snapshot": {
            /**
             * Format: date-time
             * @description Snapshot creation date
             */
            readonly creationDate?: string;
            /** @description Snapshot description */
            readonly description?: string;
            /** @description Snapshot id */
            readonly id?: string;
            /** @description Snapshot name */
            readonly name?: string;
            /** @description Order plan code */
            readonly planCode?: string | null;
            /** @description Snapshot region */
            readonly region?: string;
            /** @description Snapshot size */
            readonly size?: number;
            /** @description Snapshot status */
            readonly status?: components["schemas"]["cloud.volume.SnapshotStatusEnum"];
            /** @description Volume source id */
            readonly volumeId?: string;
        };
        /**
         * @description SnapshotStatusEnum
         * @enum {string}
         */
        "cloud.volume.SnapshotStatusEnum": "available" | "creating" | "deleting" | "error" | "error_deleting";
        /** @description Volume */
        "cloud.volume.Volume": {
            /** @description Volume attached to instances id */
            readonly attachedTo?: string[];
            /** @description Volume bootable */
            readonly bootable?: boolean;
            /**
             * Format: date-time
             * @description Volume creation date
             */
            readonly creationDate?: string;
            /** @description Volume description */
            readonly description?: string;
            /** @description Volume id */
            readonly id?: string;
            /** @description Volume name */
            readonly name?: string;
            /** @description Order plan code */
            readonly planCode?: string | null;
            /** @description Volume region */
            readonly region?: string;
            /** @description Volume size (in GB) */
            readonly size?: number;
            /** @description Volume status */
            readonly status?: components["schemas"]["cloud.volume.VolumeStatusEnum"];
            /** @description Volume type */
            readonly type?: components["schemas"]["cloud.volume.VolumeTypeEnum"];
        };
        /**
         * @description VolumeStatusEnum
         * @enum {string}
         */
        "cloud.volume.VolumeStatusEnum": "attaching" | "available" | "awaiting-transfer" | "backing-up" | "creating" | "deleting" | "detaching" | "downloading" | "error" | "error_backing-up" | "error_deleting" | "error_extending" | "error_restoring" | "extending" | "in-use" | "maintenance" | "reserved" | "restoring-backup" | "retyping" | "uploading";
        /**
         * @description VolumeTypeEnum
         * @enum {string}
         */
        "cloud.volume.VolumeTypeEnum": "classic" | "high-speed" | "high-speed-gen2";
        /** @description A volume backup */
        "cloud.volumeBackup.VolumeBackup": {
            /**
             * Format: date-time
             * @description Creation date of the backup
             */
            readonly creationDate?: string;
            /**
             * Format: uuid
             * @description Volume backup id
             */
            readonly id?: string;
            /** @description Volume backup name */
            readonly name?: string;
            /** @description Volume backup region */
            readonly region?: string;
            /** @description Size of the backup in GiB */
            readonly size?: number;
            /** @description Staus of the backup */
            readonly status?: components["schemas"]["cloud.volumeBackup.VolumeBackupStatusEnum"];
            /**
             * Format: uuid
             * @description ID of the volume used to create the backup
             */
            readonly volumeId?: string;
        };
        /** @description Create a volume backup */
        "cloud.volumeBackup.VolumeBackupCreation": {
            /** @description name of the backup */
            name?: string;
            /**
             * Format: uuid
             * @description ID of the volume to backup
             */
            volumeId: string;
        };
        /** @description Restore a volume backup on a volume */
        "cloud.volumeBackup.VolumeBackupRestore": {
            /**
             * Format: uuid
             * @description ID of the volume to restore on
             */
            volumeId: string;
        };
        /**
         * @description VolumeBackupStatusEnum
         * @enum {string}
         */
        "cloud.volumeBackup.VolumeBackupStatusEnum": "creating" | "deleting" | "error" | "ok" | "restoring";
        /** @description Create a volume from a volume backup */
        "cloud.volumeBackup.VolumeCreationFromBackup": {
            /** @description name of the new volume */
            name?: string;
        };
        /** @description A numeric value tagged with its unit */
        "complexType.UnitAndValue_double": {
            unit?: string;
            value?: number;
        };
        /** @description A numeric value tagged with its unit */
        "complexType.UnitAndValue_long": {
            unit?: string;
            value?: number;
        };
        /** @description Log kind */
        "dbaas.logs.LogKind": {
            /** @description List of additional log fields managed in this log kind */
            readonly additionalReturnedFields?: string[];
            /**
             * Format: date-time
             * @description Creation date of the log kind
             */
            readonly createdAt?: string;
            /** @description Log kind display name */
            readonly displayName?: string;
            /**
             * Format: uuid
             * @description Log kind ID
             */
            readonly kindId?: string;
            /** @description Log kind name */
            readonly name?: string;
            /**
             * Format: date-time
             * @description Last update date of the log kind
             */
            readonly updatedAt?: string;
        };
        /** @description Log subscription */
        "dbaas.logs.LogSubscription": {
            /**
             * Format: date-time
             * @description Creation date of the subscription
             */
            readonly createdAt?: string;
            /** @description Log kind name of this subscription */
            readonly kind?: string;
            /** @description Subscribed resource, where the logs come from */
            readonly resource?: components["schemas"]["dbaas.logs.LogSubscriptionResource"];
            /** @description Name of the destination log service */
            readonly serviceName?: string;
            /** @description Id of the destination log stream */
            readonly streamId?: string;
            /**
             * Format: uuid
             * @description Subscription ID
             */
            readonly subscriptionId?: string;
            /**
             * Format: date-time
             * @description Last update date of the subscription
             */
            readonly updatedAt?: string;
        };
        /** @description Log subscription creation payload */
        "dbaas.logs.LogSubscriptionCreation": {
            /** @description Log kind name to subscribe to */
            kind: string;
            /**
             * Format: uuid
             * @description Customer log stream ID
             */
            streamId: string;
        };
        /** @description Log subscription resource */
        "dbaas.logs.LogSubscriptionResource": {
            /** @description Name of subscribed resource */
            readonly name?: string;
            /** @description Type of subscribed resource */
            readonly type?: string;
        };
        /** @description Asynchronous operation after subscribing or unsubscribing to a resource logs */
        "dbaas.logs.LogSubscriptionResponse": {
            /**
             * Format: uuid
             * @description Identifier of the operation
             */
            readonly operationId?: string;
            /** @description Operation owner's service name */
            readonly serviceName?: string;
        };
        /** @description Log temporary URL creation payload */
        "dbaas.logs.LogUrlCreation": {
            /** @description Log kind name */
            kind: string;
        };
        /** @description Temporary url information */
        "dbaas.logs.TemporaryLogsLink": {
            /**
             * Format: date-time
             * @description Temporary url expiration date
             */
            readonly expirationDate?: string;
            /** @description Temporary url */
            readonly url?: string;
        };
        /**
         * @description Duration (e.g., P1Y2M3DT4H6M9S)
         * @example P1Y2M3DT4H6M9S
         */
        duration: string;
        /**
         * Format: email
         * @description Email address (e.g., api@ml.ovh.net)
         * @example api@ml.ovh.net
         */
        email: string;
        /** @description IAM resource metadata embedded in services models */
        "iam.ResourceMetadata": {
            /** @description Resource display name */
            readonly displayName?: string | null;
            /**
             * Format: uuid
             * @description Unique identifier of the resource
             */
            readonly id?: string;
            /** @description Resource tags. Tags that were internally computed are prefixed with ovh: */
            readonly tags?: {
                [key: string]: string | undefined;
            } | null;
            /** @description Unique resource name used in policies */
            readonly urn?: string;
        };
        /** @description Resource tag filter */
        "iam.resource.TagFilter": {
            /** @description Operator to use in order to filter on the value (defaults to 'EQ') */
            readonly operator?: components["schemas"]["iam.resource.TagFilter.OperatorEnum"] | null;
            /** @description Value to use in order to filter tags */
            readonly value?: string;
        };
        /**
         * @description Operator that can be used in order to filter resources tags
         * @enum {string}
         */
        "iam.resource.TagFilter.OperatorEnum": "EQ";
        /**
         * Format: phone-number
         * @description International phone number
         */
        internationalPhoneNumber: string;
        /**
         * Format: ipv4
         * @description IP address (e.g., 192.0.2.0)
         * @example 192.0.2.0
         */
        ip: string;
        /**
         * Format: ip-block
         * @description IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
         * @example 192.0.2.0/24
         */
        ipBlock: string;
        /**
         * Format: ipv4
         * @description IP address (e.g., 192.0.2.0)
         * @example 192.0.2.0
         */
        ipInterface: string;
        /**
         * Format: ipv4
         * @description IPv4 address (e.g., 192.0.2.0)
         * @example 192.0.2.0
         */
        ipv4: string;
        /**
         * Format: ipv4-block
         * @description IPv4 CIDR notation (e.g., 192.0.2.0/24)
         * @example 192.0.2.0/24
         */
        ipv4Block: string;
        /**
         * Format: ipv6
         * @description IPv6 address (e.g., 2001:41d0:1:1994::1)
         * @example 2001:41d0:1:1994::1
         */
        ipv6: string;
        /**
         * Format: ipv6-block
         * @description IPv6 CIDR notation (e.g., 2001:41d0::/128)
         * @example 2001:41d0::/128
         */
        ipv6Block: string;
        /**
         * Format: mac-address
         * @description MAC address (e.g., 2001:4860:4860::8844)
         * @example 2001:4860:4860::8888. 2001:4860:4860::8844
         */
        macAddress: string;
        /**
         * @description OVH subsidiaries
         * @enum {string}
         */
        "nichandle.OvhSubsidiaryEnum": "CZ" | "DE" | "ES" | "EU" | "FI" | "FR" | "GB" | "IE" | "IT" | "LT" | "MA" | "NL" | "PL" | "PT" | "SN" | "TN";
        /**
         * @description Currency code
         * @enum {string}
         */
        "order.CurrencyCodeEnum": "AUD" | "CAD" | "CZK" | "EUR" | "GBP" | "INR" | "LTL" | "MAD" | "N/A" | "PLN" | "SGD" | "TND" | "USD" | "XOF" | "points";
        /** @description Price with its currency and textual representation */
        "order.Price": {
            /** @description Currency code */
            readonly currencyCode?: components["schemas"]["order.CurrencyCodeEnum"];
            /** @description Price in microcents */
            readonly priceInUcents?: number | null;
            /** @description Textual representation */
            readonly text?: string;
            /** @description The effective price */
            readonly value?: number;
        };
        /**
         * Format: phone-number
         * @description Phone number
         */
        phoneNumber: string;
        /** @description Map a possible renew for a specific service */
        "service.RenewType": {
            /** @description The service is automatically renewed */
            automatic?: boolean;
            /** @description The service will be deleted at expiration */
            deleteAtExpiration?: boolean;
            /** @description The service forced to be renewed */
            forced?: boolean;
            /** @description The service needs to be manually renewed and paid */
            manualPayment?: boolean | null;
            /** @description period of renew in month */
            period?: number | null;
        };
        /**
         * @description Detailed renewal type of a service
         * @enum {string}
         */
        "service.RenewalTypeEnum": "automaticForcedProduct" | "automaticV2012" | "automaticV2014" | "automaticV2016" | "manual" | "oneShot" | "option";
        /** @enum {string} */
        "service.StateEnum": "expired" | "inCreation" | "ok" | "pendingDebt" | "unPaid";
        /**
         * @description All future uses you can provide for a service termination
         * @enum {string}
         */
        "service.TerminationFutureUseEnum": "NOT_REPLACING_SERVICE" | "OTHER" | "SUBSCRIBE_AN_OTHER_SERVICE" | "SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR" | "SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR";
        /**
         * @description All reasons you can provide for a service termination
         * @enum {string}
         */
        "service.TerminationReasonEnum": "FEATURES_DONT_SUIT_ME" | "LACK_OF_PERFORMANCES" | "MIGRATED_TO_ANOTHER_OVH_PRODUCT" | "MIGRATED_TO_COMPETITOR" | "NOT_ENOUGH_RECOGNITION" | "NOT_NEEDED_ANYMORE" | "NOT_RELIABLE" | "NO_ANSWER" | "OTHER" | "PRODUCT_DIMENSION_DONT_SUIT_ME" | "PRODUCT_TOOLS_DONT_SUIT_ME" | "TOO_EXPENSIVE" | "TOO_HARD_TO_USE" | "UNSATIFIED_BY_CUSTOMER_SUPPORT";
        /** @description Details about a Service */
        "services.Service": {
            /** @description Indicates that the service can be set up to be deleted at expiration */
            readonly canDeleteAtExpiration?: boolean;
            readonly contactAdmin?: string;
            readonly contactBilling?: string;
            readonly contactTech?: string;
            /** Format: date */
            readonly creation?: string;
            readonly domain?: string;
            /** Format: date */
            readonly engagedUpTo?: string | null;
            /** Format: date */
            readonly expiration?: string;
            /** @description All the possible renew period of your service in month */
            readonly possibleRenewPeriod?: number[] | null;
            /** @description Way of handling the renew */
            renew?: components["schemas"]["service.RenewType"] | null;
            readonly renewalType?: components["schemas"]["service.RenewalTypeEnum"];
            readonly serviceId?: number;
            readonly status?: components["schemas"]["service.StateEnum"];
        };
        /**
         * Format: time
         * @description Time (e.g., 15:04:05)
         * @example 15:04:05
         */
        time: string;
        /**
         * @description The current state of a contract agreement
         * @enum {string}
         */
        "agreements.AgreementStateEnum": "ko" | "obsolete" | "ok" | "todo";
        /** @description Contract of service */
        "agreements.Contract": {
            /** @description Is this contract currently active or not ? */
            readonly active?: boolean;
            /**
             * Format: date
             * @description Date the contract was created on
             */
            readonly date?: string;
            /** @description Name of of the contract */
            readonly name?: string;
            /** @description URL you can download the contract at */
            readonly pdf?: string;
            /** @description Full text of the contract */
            readonly text?: string;
        };
        /** @description Contract agreement */
        "agreements.ContractAgreement": {
            /** @description State of the agreement */
            readonly agreed?: components["schemas"]["agreements.AgreementStateEnum"];
            /** @description Id of the agreed contract */
            readonly contractId?: number;
            /**
             * Format: date-time
             * @description Date the agreed contract was effective
             */
            readonly date?: string;
            /** @description Id of the contract */
            readonly id?: number;
        };
        /** @description API Application */
        "api.Application": {
            readonly applicationId?: number;
            readonly applicationKey?: string;
            readonly description?: string;
            readonly name?: string;
            readonly status?: components["schemas"]["api.ApplicationStatusEnum"];
        };
        /**
         * @description List of state of an Api Application
         * @enum {string}
         */
        "api.ApplicationStatusEnum": "active" | "blocked" | "inactive" | "trusted";
        /** @description API Credential */
        "api.Credential": {
            /** @description If defined, list of ip blocks which are allowed to call API with this credential */
            allowedIPs?: components["schemas"]["ipBlock"][] | null;
            readonly applicationId?: number;
            /** Format: date-time */
            readonly creation?: string;
            readonly credentialId?: number;
            /** Format: date-time */
            readonly expiration?: string | null;
            /** Format: date-time */
            readonly lastUse?: string | null;
            /** @description States whether this credential has been created by yourself or by the OVH support team */
            readonly ovhSupport?: boolean;
            readonly rules?: components["schemas"]["auth.AccessRule"][];
            readonly status?: components["schemas"]["auth.CredentialStateEnum"];
        };
        /** @description API Log */
        "api.Log": {
            /** @description Account which did the Request */
            readonly account?: string;
            /**
             * Format: date-time
             * @description Date of the request
             */
            readonly date?: string;
            /** @description Source IP of the request */
            readonly ip?: components["schemas"]["ip"] | null;
            readonly logId?: number;
            /** @description HTTP Method of the request */
            readonly method?: components["schemas"]["http.MethodEnum"];
            /** @description HTTP URI of the request */
            readonly path?: string;
            /** @description API Route called */
            readonly route?: string;
        };
        /** @description Forward logs request */
        "apilogs.ForwardRequest": {
            /**
             * Format: uuid
             * @description Identifier of the destination logs stream
             */
            streamId: string;
        };
        /** @description Forward logs response */
        "apilogs.ForwardResponse": {
            /**
             * Format: uuid
             * @description Identifier of the operation, usable on /dbaas/logs API section
             */
            readonly operationId?: string;
        };
        /** @description An audit Log */
        "audit.Log": {
            /** @description authentication details */
            readonly authDetails?: components["schemas"]["audit.LogAuthDetails"] | null;
            /**
             * Format: date-time
             * @description event's date
             */
            readonly createdAt?: string;
            /** @description IP associated to this event */
            readonly ip?: components["schemas"]["ip"] | null;
            /** @description specific fields for LOGIN_SUCCESS events */
            readonly loginSuccessDetails?: components["schemas"]["audit.LogLoginSuccessDetails"] | null;
            /** @description type of event */
            readonly type?: components["schemas"]["audit.LogTypeEnum"];
            /** @description specific fields for USER_PASSWORD_CHANGED events */
            readonly userPasswordChangedDetails?: components["schemas"]["audit.LogUserPasswordChangedDetails"] | null;
        };
        /** @description Authentication details */
        "audit.LogAuthDetails": {
            /** @description authenticated user details */
            readonly userDetails?: components["schemas"]["audit.LogAuthUserDetails"];
        };
        /**
         * @description Authentication MFA type
         * @enum {string}
         */
        "audit.LogAuthMFATypeEnum": "BACKUP_CODE" | "MAIL" | "NONE" | "SMS" | "TOTP" | "U2F" | "UNKNOWN";
        /** @description Authenticated user details */
        "audit.LogAuthUserDetails": {
            /** @description authentication type */
            readonly type?: components["schemas"]["audit.LogAuthUserTypeEnum"];
            /** @description authenticated user name */
            readonly user?: string | null;
        };
        /**
         * @description Authentication type
         * @enum {string}
         */
        "audit.LogAuthUserTypeEnum": "ACCOUNT" | "PROVIDER" | "USER";
        /** @description specific fields for LOGIN_SUCCESS events */
        "audit.LogLoginSuccessDetails": {
            /** @description Used MFA while login */
            readonly mfaType?: components["schemas"]["audit.LogAuthMFATypeEnum"] | null;
            /** @description Browser's user agent */
            readonly userAgent?: string;
        };
        /**
         * @description Audit event type
         * @enum {string}
         */
        "audit.LogTypeEnum": "ACCOUNT_PASSWORD_CHANGED" | "LOGIN_SUCCESS" | "USER_PASSWORD_CHANGED";
        /** @description specific fields for USER_PASSWORD_CHANGED events */
        "audit.LogUserPasswordChangedDetails": {
            /** @description User name */
            readonly user?: string;
        };
        /** @description Forward logs request */
        "audit.log.ForwardRequest": {
            /**
             * Format: uuid
             * @description Identifier of the destination logs stream
             */
            streamId: string;
        };
        /** @description Forward logs response */
        "audit.log.ForwardResponse": {
            /**
             * Format: uuid
             * @description Identifier of the operation, usable on /dbaas/logs API section
             */
            readonly operationId?: string;
        };
        /** @description Access rule allowed to an application */
        "auth.AccessRule": {
            /** @description Allowed Method */
            readonly method?: components["schemas"]["auth.HTTPMethodEnum"];
            /** @description Allowed path */
            readonly path?: string;
        };
        /** @description API Application */
        "auth.ApiApplication": {
            /** @description ID of this Application */
            readonly applicationId?: number;
            /** @description Key of this application */
            readonly applicationKey?: string;
            /** @description Description of this application */
            readonly description?: string;
            /** @description Name of this application */
            readonly name?: string;
            /** @description Status of this application */
            readonly status?: components["schemas"]["auth.ApplicationStatusEnum"];
        };
        /** @description API Credential */
        "auth.ApiCredential": {
            /** @description If defined, list of ip blocks which are allowed to call API with this credential */
            allowedIPs?: components["schemas"]["ipBlock"][] | null;
            /** @description ID of associated API Application */
            readonly applicationId?: number;
            /**
             * Format: date-time
             * @description Creation date of this credential
             */
            readonly creation?: string;
            /** @description ID of this credential */
            readonly credentialId?: number;
            /**
             * Format: date-time
             * @description Expiration date of this credential
             */
            readonly expiration?: string | null;
            /**
             * Format: date-time
             * @description Last use date of this credential
             */
            readonly lastUse?: string | null;
            /** @description States whether this credential has been created by yourself or by the OVH support team */
            readonly ovhSupport?: boolean;
            /** @description API routes allowed to this credential */
            readonly rules?: components["schemas"]["auth.AccessRule"][];
            /** @description State of to this credential */
            readonly status?: components["schemas"]["auth.CredentialStateEnum"];
        };
        /**
         * @description All states an API Application can be in
         * @enum {string}
         */
        "auth.ApplicationStatusEnum": "active" | "blocked" | "inactive" | "trusted";
        /** @description X509 Certificate */
        "auth.Certificate": {
            /**
             * Format: date-time
             * @description Certificate's expiration
             */
            readonly expiration?: string;
            /** @description Certificate's subject */
            readonly subject?: string;
        };
        /**
         * @description All states a Credential can be in
         * @enum {string}
         */
        "auth.CredentialStateEnum": "expired" | "pendingValidation" | "refused" | "validated";
        /** @description An IAM Group */
        "auth.Group": {
            /**
             * Format: date-time
             * @description Creation date of this group
             */
            readonly creation?: string;
            /** @description Whether it is a default group. This kind of group can't be edited or deleted */
            readonly defaultGroup?: boolean;
            /** @description Group's description */
            description?: string | null;
            /**
             * Format: date-time
             * @description Last update of this group
             */
            readonly lastUpdate?: string;
            /** @description Group's name */
            readonly name?: string;
            /** @description Group's role */
            role?: components["schemas"]["auth.RoleEnum"];
            /** @description IAM identity URN of the group */
            readonly urn?: string;
        };
        /** @description A new IAM group */
        "auth.GroupRequest": {
            /** @description Group's description */
            description?: string | null;
            /** @description Group's name */
            name: string;
            /** @description Group's role */
            role?: components["schemas"]["auth.RoleEnum"];
        };
        /**
         * @description All HTTP methods available
         * @enum {string}
         */
        "auth.HTTPMethodEnum": "DELETE" | "GET" | "POST" | "PUT";
        /** @description An IAM Federation Provider */
        "auth.Provider": {
            /**
             * Format: date-time
             * @description Creation date of the identity provider
             */
            readonly creation?: string;
            /** @description Whether account users should still be usable as a login method or not */
            disableUsers?: boolean | null;
            /** @description SAML Extensions to embed inside the SAML requests */
            extensions?: components["schemas"]["auth.ProviderExtensions"];
            /** @description SAML Group attribute name */
            groupAttributeName?: string;
            /** @description IdP's signing certificate */
            readonly idpSigningCertificates?: components["schemas"]["auth.Certificate"][];
            /**
             * Format: date-time
             * @description Last update of the identity provider
             */
            readonly lastUpdate?: string;
            /** @description Whether SAML Authn Requests should be signed */
            signRequests?: boolean | null;
            /** @description IdP's Single Sign On Service Url */
            readonly ssoServiceUrl?: string;
            /** @description SAML User attribute name */
            userAttributeName?: string;
        };
        /** @description A SAML 2.0 Extension that should be added to SAML requests when using this provider */
        "auth.ProviderExtensions": {
            /** @description List of SAML RequestedAttribute to add to SAML requests */
            requestedAttributes?: components["schemas"]["auth.ProviderRequestedAttributes"][] | null;
        };
        /** @description An IAM Federation Provider creation request */
        "auth.ProviderRequest": {
            /** @description Whether account users should still be usable as a login method or not */
            disableUsers?: boolean | null;
            /** @description SAML Extensions to embed inside the SAML requests */
            extensions?: components["schemas"]["auth.ProviderExtensions"];
            /** @description SAML Group attribute name */
            groupAttributeName?: string | null;
            /** @description IdP's signing certificate */
            metadata: string;
            /** @description Whether SAML Authn Requests should be signed */
            signRequests?: boolean | null;
            /** @description SAML User attribute name */
            userAttributeName?: string | null;
        };
        /** @description A SAML 2.0 requested attribute that should be added to SAML requests when using this provider */
        "auth.ProviderRequestedAttributes": {
            /** @description Expresses that this RequestedAttribute is mandatory (remains advisory) */
            isRequired: boolean;
            /** @description Name of the SAML RequestedAttribute */
            name: string;
            /** @description NameFormat of the SAML RequestedAttribute */
            nameFormat?: string | null;
            /** @description List of AttributeValues allowed for this RequestedAttribute */
            values?: string[] | null;
        };
        /**
         * @description Permission given on the account
         * @enum {string}
         */
        "auth.RoleEnum": "ADMIN" | "NONE" | "REGULAR" | "UNPRIVILEGED";
        /** @description An IAM User */
        "auth.User": {
            /**
             * Format: date-time
             * @description Creation date of this user
             */
            readonly creation?: string;
            /** @description User's description */
            description?: string;
            /** @description User's email */
            email?: string;
            /** @description User's group */
            group?: string;
            /**
             * Format: date-time
             * @description User's last update date
             */
            readonly lastUpdate?: string;
            /** @description User's login suffix */
            readonly login?: string;
            /**
             * Format: date-time
             * @description User's password last update date
             */
            readonly passwordLastUpdate?: string;
            /** @description Current user's status */
            readonly status?: components["schemas"]["auth.UserStatusEnum"];
            /** @description IAM identity URN of the user */
            readonly urn?: string;
        };
        /** @description An IAM user creation request */
        "auth.UserRequest": {
            /** @description User's description */
            description?: string;
            /** @description User's email */
            email: string;
            /** @description User's group */
            group?: string;
            /** @description User's login */
            login: string;
            /**
             * Format: password
             * @description User's password
             */
            password: string;
        };
        /**
         * @description Status of a User
         * @enum {string}
         */
        "auth.UserStatusEnum": "DISABLED" | "OK" | "PASSWORD_CHANGE_REQUIRED";
        /**
         * @description List of available archive types
         * @enum {string}
         */
        "billing.ArchiveTypeEnum": "csv" | "zip";
        /** @description Available automatic payment means */
        "billing.AutomaticPaymentMean": {
            /** @description Bank Account */
            bankAccount?: boolean;
            /** @description Credit Card */
            creditCard?: boolean;
            /** @description Deferred invoice payment account for authorized customers */
            deferredPaymentAccount?: boolean;
            /** @description Paypal account */
            paypal?: boolean;
        };
        /** @description Details about a Bill */
        "billing.Bill": {
            readonly billId?: string;
            readonly category?: components["schemas"]["billing.CategoryEnum"];
            /** Format: date-time */
            readonly date?: string;
            readonly orderId?: number;
            readonly password?: string;
            readonly pdfUrl?: string;
            readonly priceWithTax?: components["schemas"]["order.Price"];
            readonly priceWithoutTax?: components["schemas"]["order.Price"];
            readonly tax?: components["schemas"]["order.Price"];
            readonly url?: string;
        };
        /** @description Information about a Bill entry */
        "billing.BillDetail": {
            readonly billDetailId?: string;
            readonly description?: string;
            readonly domain?: string;
            /** Format: date */
            readonly periodEnd?: string | null;
            /** Format: date */
            readonly periodStart?: string | null;
            readonly quantity?: string;
            readonly totalPrice?: components["schemas"]["order.Price"];
            readonly unitPrice?: components["schemas"]["order.LongPrice"];
        };
        /**
         * @description billing task status
         * @enum {string}
         */
        "billing.BillingTaskStatusEnum": "cancelled" | "customerError" | "doing" | "done" | "init" | "ovhError" | "todo";
        /**
         * @description Types of plans
         * @enum {string}
         */
        "billing.CategoryEnum": "autorenew" | "earlyrenewal" | "purchase" | "purchase-cloud" | "purchase-servers" | "purchase-telecom" | "purchase-web";
        /** @description Credit balance applied on an Order */
        "billing.CreditBalance": {
            /** @description Amount applied from the balance */
            readonly amount?: components["schemas"]["order.Price"];
            /** @description Credit balance name */
            readonly balanceName?: string;
        };
        /** @description Details about a deposit */
        "billing.Deposit": {
            readonly amount?: components["schemas"]["order.Price"];
            /** Format: date-time */
            readonly date?: string;
            readonly depositId?: string;
            readonly orderId?: number;
            readonly password?: string;
            readonly paymentInfo?: components["schemas"]["debt.associatedObject.PaymentInfo"] | null;
            readonly pdfUrl?: string;
            readonly url?: string;
        };
        /** @description Information about a Deposit entry */
        "billing.DepositDetail": {
            readonly depositDetailId?: string;
            readonly description?: string;
            readonly domain?: string;
            readonly quantity?: string;
            readonly totalPrice?: components["schemas"]["order.Price"];
            readonly unitPrice?: components["schemas"]["order.Price"];
        };
        /** @description Balance of the fidelity account */
        "billing.FidelityAccount": {
            alertThreshold?: number | null;
            readonly balance?: number;
            readonly canBeCredited?: boolean;
            /** Format: date-time */
            readonly lastUpdate?: string;
            /** Format: date-time */
            readonly openDate?: string;
        };
        /** @description Details about a fidelity account */
        "billing.FidelityMovement": {
            readonly amount?: number;
            readonly balance?: number;
            /** Format: date-time */
            readonly date?: string;
            readonly description?: string;
            readonly movementId?: number;
            readonly operation?: components["schemas"]["billing.fidelityAccount.OperationEnum"];
            readonly order?: number;
            readonly previousBalance?: number;
        };
        /** @description Extensions of a detail */
        "billing.ItemDetail": {
            readonly order?: components["schemas"]["billing.ItemDetail.Order"];
        };
        /** @description Order data for this Detail */
        "billing.ItemDetail.Order": {
            /** @description The meaning of this order detail */
            action?: components["schemas"]["billing.ItemDetail.OrderActionEnum"] | null;
            /** @description Configurations chosen during the order */
            configurations?: components["schemas"]["billing.ItemDetail.OrderConfiguration"][];
            /** @description Plan from /order/cart */
            plan?: components["schemas"]["billing.ItemDetail.OrderPlan"];
            /** @description Type of the detail to match with values inside the catalog */
            type?: components["schemas"]["billing.ItemDetail.OrderDetailTypeEnum"] | null;
        };
        /**
         * @description List of order actions
         * @enum {string}
         */
        "billing.ItemDetail.OrderActionEnum": "consumption" | "detach" | "installation" | "renew" | "revert" | "upgrade";
        /** @description Configuration of order */
        "billing.ItemDetail.OrderConfiguration": {
            /** @description Label of the configuration */
            label?: string;
            /** @description Value of the configuration */
            value?: string;
        };
        /**
         * @description List of order detail types
         * @enum {string}
         */
        "billing.ItemDetail.OrderDetailTypeEnum": "plan" | "product";
        /** @description Plan data from order */
        "billing.ItemDetail.OrderPlan": {
            /** @description Plan code used when ordering through /order/cart */
            code?: string | null;
            /** @description Duration chosen when ordering through /order/cart (ISO 8601) */
            duration?: string | null;
            /** @description Pricing mode used when ordering through /order/cart */
            pricingMode?: string | null;
            /** @description Product from /order/cart */
            product?: components["schemas"]["billing.ItemDetail.OrderPlanProduct"];
            /** @description Quantity ordered */
            quantity?: number | null;
        };
        /** @description Product data from order */
        "billing.ItemDetail.OrderPlanProduct": {
            /** @description Name of the product used when ordering through /order/cart */
            name?: string | null;
        };
        /** @description Status of your manual domain payment migration */
        "billing.ManualDomainPaymentStatus": {
            /** @description Total number of domains that needs to be migrated to manual renew mode */
            domainsToMigrate?: number | null;
            /** @description Total number of domains successfully migrated to manual renew mode */
            migratedDomains?: number | null;
            status?: components["schemas"]["billing.BillingTaskStatusEnum"];
        };
        /** @description Details about an OVH account */
        "billing.Movement": {
            readonly amount?: components["schemas"]["order.Price"];
            readonly balance?: components["schemas"]["order.Price"];
            /** Format: date-time */
            readonly date?: string;
            readonly description?: string;
            readonly movementId?: number;
            readonly operation?: components["schemas"]["billing.ovhAccount.OperationEnum"];
            readonly order?: number;
            readonly previousBalance?: components["schemas"]["order.Price"];
            readonly retrievableAmount?: components["schemas"]["order.Price"];
        };
        /** @description Details about an Order */
        "billing.Order": {
            /** Format: date-time */
            readonly date?: string | null;
            /** Format: date-time */
            readonly expirationDate?: string | null;
            readonly orderId?: number;
            readonly password?: string;
            readonly pdfUrl?: string;
            readonly priceWithTax?: components["schemas"]["order.Price"];
            readonly priceWithoutTax?: components["schemas"]["order.Price"];
            /** Format: date-time */
            readonly retractionDate?: string | null;
            readonly tax?: components["schemas"]["order.Price"];
            readonly url?: string;
        };
        /** @description Information about a Bill entry */
        "billing.OrderDetail": {
            readonly cancelled?: boolean;
            readonly description?: string;
            readonly detailType?: components["schemas"]["order.OrderDetailTypeEnum"] | null;
            readonly domain?: string;
            readonly orderDetailId?: number;
            readonly quantity?: string;
            readonly totalPrice?: components["schemas"]["order.Price"];
            readonly unitPrice?: components["schemas"]["order.Price"];
        };
        /** @description Details about an OVH account */
        "billing.OvhAccount": {
            alertThreshold?: number | null;
            readonly balance?: components["schemas"]["order.Price"];
            readonly canBeCredited?: boolean;
            readonly isActive?: boolean;
            /** Format: date-time */
            readonly lastUpdate?: string;
            /** Format: date-time */
            readonly openDate?: string;
            readonly ovhAccountId?: string;
        };
        /** @description Details about a payment */
        "billing.Payment": {
            /** Format: date-time */
            readonly paymentDate?: string;
            readonly paymentIdentifier?: string | null;
            readonly paymentType?: components["schemas"]["billing.PaymentMeanEnum"];
        };
        /**
         * @description All payment means you might have use on an OVH order
         * @enum {string}
         */
        "billing.PaymentMeanEnum": "cash" | "chargeback" | "check" | "cheque" | "creditAccount" | "creditCard" | "debtAccount" | "deposit" | "digitalLaunchPad" | "edinar" | "fidelityPoints" | "free" | "ideal" | "incubatorAccount" | "mandat" | "multibanco" | "none" | "ovhAccount" | "paymentMandate" | "paypal" | "payu" | "platnosci" | "refund" | "rupay" | "transfer" | "withdrawal";
        /** @description Details about a Refund */
        "billing.Refund": {
            /** Format: date-time */
            readonly date?: string;
            readonly orderId?: number;
            readonly originalBillId?: string | null;
            readonly password?: string;
            readonly pdfUrl?: string;
            readonly priceWithTax?: components["schemas"]["order.Price"];
            readonly priceWithoutTax?: components["schemas"]["order.Price"];
            readonly refundId?: string;
            readonly tax?: components["schemas"]["order.Price"];
            readonly url?: string;
        };
        /** @description Information about a Bill entry */
        "billing.RefundDetail": {
            readonly description?: string;
            readonly domain?: string;
            readonly quantity?: string;
            readonly reference?: string;
            readonly refundDetailId?: string;
            readonly refundId?: string;
            readonly totalPrice?: components["schemas"]["order.Price"];
            readonly unitPrice?: components["schemas"]["order.Price"];
        };
        /**
         * @description Reusable payment mean type
         * @enum {string}
         */
        "billing.ReusablePaymentMeanEnum": "CREDIT_CARD" | "CURRENT_ACCOUNT" | "DEFERRED_PAYMENT_ACCOUNT" | "DOMESTIC_CARD" | "ENTERPRISE" | "INTERNAL_TRUSTED_ACCOUNT" | "PAYPAL" | "RUPAY" | "SEPA_DIRECT_DEBIT" | "bankAccount" | "creditCard" | "deferredPaymentAccount" | "fidelityAccount" | "ovhAccount" | "paypal";
        /** @description Information about withdrawal entry */
        "billing.ReversableBillDetail": {
            readonly description?: string;
            readonly domain?: string;
            readonly quantity?: string;
            readonly reference?: string;
            readonly reverseBillDetailId?: string;
            readonly reverseBillId?: string;
            readonly totalPrice?: components["schemas"]["order.Price"];
            readonly unitPrice?: components["schemas"]["order.Price"];
        };
        /** @description Details about a bill from customer */
        "billing.ReverseBill": {
            /** Format: date-time */
            readonly date?: string;
            readonly orderId?: number;
            /** Format: password */
            readonly password?: string;
            readonly pdfUrl?: string;
            readonly priceWithTax?: components["schemas"]["order.Price"];
            readonly priceWithoutTax?: components["schemas"]["order.Price"];
            readonly reverseBillId?: string;
            readonly tax?: components["schemas"]["order.Price"];
            readonly url?: string;
        };
        /** @description SLA properties */
        "billing.SlaOperation": {
            /**
             * Format: date-time
             * @description Date of the event that led to SLA
             */
            readonly date?: string;
            /** @description Description of the SLA operation for this incident */
            readonly description?: string;
            /**
             * Format: date-time
             * @description Date of the end of the SLA
             */
            readonly endDate?: string | null;
            /** @description SLA identifier */
            readonly id?: number;
            /** @description Sla operation name */
            readonly name?: string;
            /**
             * Format: date-time
             * @description Date of the start of the SLA
             */
            readonly startDate?: string;
        };
        /** @description Describe all services impacted by SLA */
        "billing.SlaOperationService": {
            /** @description Service description */
            description?: string;
            /** @description Impacted service name */
            serviceName?: string;
            /** @description SLA plan application */
            slaApplication?: string;
            /** @description SLA plan description */
            slaPlan?: string;
        };
        /** @description Details about a Voucher account */
        "billing.VoucherAccount": {
            readonly balance?: components["schemas"]["order.Price"];
            /** Format: date-time */
            readonly lastUpdate?: string;
            /** Format: date-time */
            readonly openDate?: string;
            readonly voucherAccountId?: string;
        };
        /** @description Details about a voucher account */
        "billing.VoucherMovement": {
            readonly amount?: components["schemas"]["order.Price"];
            readonly balance?: components["schemas"]["order.Price"];
            /** Format: date-time */
            readonly date?: string;
            readonly description?: string;
            readonly movementId?: number;
            readonly operation?: components["schemas"]["billing.voucherAccount.OperationEnum"];
            readonly order?: number;
            readonly previousBalance?: components["schemas"]["order.Price"];
        };
        /** @description Details about a withdrawal */
        "billing.Withdrawal": {
            readonly amount?: components["schemas"]["order.Price"];
            readonly country?: string;
            /** Format: date-time */
            readonly date?: string;
            readonly orderId?: number;
            readonly password?: string;
            readonly pdfUrl?: string;
            readonly url?: string;
            readonly withdrawalId?: string;
        };
        /** @description Information about a Withdrawal entry */
        "billing.WithdrawalDetail": {
            readonly description?: string;
            readonly domain?: string;
            readonly quantity?: string;
            readonly totalPrice?: components["schemas"]["order.Price"];
            readonly unitPrice?: components["schemas"]["order.Price"];
            readonly withdrawalDetailId?: string;
        };
        /**
         * @description Operations a fidelity account movement can represent
         * @enum {string}
         */
        "billing.fidelityAccount.OperationEnum": "bonus" | "cancel-bonus" | "cancel-credit" | "cancel-debit" | "cancel-pre-debit" | "credit" | "debit" | "pre-credit" | "pre-debit";
        /** @description The object the processing of the order leaded to */
        "billing.order.AssociatedObject": {
            id?: string | null;
            type?: components["schemas"]["billing.order.associatedObject.TypeEnum"] | null;
        };
        /** @description All data needed to use a payment mean */
        "billing.order.AvailablePaymentMean": {
            fields?: components["schemas"]["billing.order.AvailablePaymentMeanField"][] | null;
            integration?: components["schemas"]["billing.order.PaymentMeanIntegrationEnum"];
            name?: string;
            url?: string | null;
        };
        /** @description All fields needed for a payment mean integration */
        "billing.order.AvailablePaymentMeanField": {
            key?: string;
            options?: string[] | null;
            type?: components["schemas"]["billing.order.PaymentMeanFieldTypeEnum"];
            value?: string | null;
        };
        /** @description Detailed consumption's retrieval information */
        "billing.order.ConsumptionDetails": {
            /** @description Format of the file */
            fileFormat?: components["schemas"]["consumption.ConsumptionExportFormatsEnum"] | null;
            /** @description Temporary URL to download detailed consumption */
            fileURL?: string | null;
            /** @description Request's state description */
            message?: string | null;
            /** @description Consumption details export task's identifier */
            taskId?: number;
            /** @description Consumption details export task's status */
            taskStatus?: components["schemas"]["consumption.ConsumptionExportTaskStatusEnum"];
        };
        /** @description Follow up history of an order */
        "billing.order.FollowUp": {
            /** @description Step history of order follow-up */
            history?: components["schemas"]["billing.order.followUp.History"][];
            /** @description Step status of order follow-up */
            status?: components["schemas"]["billing.order.followUp.StatusEnum"];
            /** @description Step of order follow-up */
            step?: components["schemas"]["billing.order.followUp.StepEnum"];
        };
        /**
         * @description All possible order status
         * @enum {string}
         */
        "billing.order.OrderStatusEnum": "cancelled" | "cancelling" | "checking" | "delivered" | "delivering" | "documentsRequested" | "notPaid" | "unknown";
        /** @description Pay with payment method parameter */
        "billing.order.PayWithPaymentMethod": {
            /** @description ID of payment method for pay this order */
            id?: number;
        };
        /** @description All data needed to use a payment mean */
        "billing.order.PaymentMean": {
            fee?: number;
            htmlForm?: string | null;
            httpMethod?: string;
            logo?: string | null;
            parameters?: components["schemas"]["billing.order.paymentMean.HttpParameter"][];
            subType?: string | null;
            url?: string;
        };
        /**
         * @description Field type of a payment mean
         * @enum {string}
         */
        "billing.order.PaymentMeanFieldTypeEnum": "hidden" | "select" | "text";
        /**
         * @description Integration payment mean type
         * @enum {string}
         */
        "billing.order.PaymentMeanIntegrationEnum": "GET_FORM" | "POST_FORM" | "REDIRECT";
        /** @description TODO */
        "billing.order.PaymentMeans": {
            creditCard?: components["schemas"]["billing.order.PaymentMean"][] | null;
            edinar?: components["schemas"]["billing.order.PaymentMean"][] | null;
            fidelityPoints?: components["schemas"]["billing.order.PaymentMean"][] | null;
            ideal?: components["schemas"]["billing.order.PaymentMean"][] | null;
            multibanco?: components["schemas"]["billing.order.PaymentMean"][] | null;
            ovhAccount?: components["schemas"]["billing.order.PaymentMean"][] | null;
            paypal?: components["schemas"]["billing.order.PaymentMean"][] | null;
            promotion?: components["schemas"]["billing.order.PaymentMean"][] | null;
        };
        /** @description Payment methods */
        "billing.order.PaymentMethods": {
            /** @description Payment method available on this order */
            available?: components["schemas"]["payment.method.AvailablePaymentMethod"][];
            /** @description List of registered Payment methods usable on this order */
            paymentMethods?: components["schemas"]["payment.method.PaymentMethod"][];
            /** @description IDs of registered payment method usable on this order */
            registered?: number[];
        };
        /** @description A registered payment mean */
        "billing.order.RegisteredPaymentMean": {
            paymentMean?: components["schemas"]["billing.ReusablePaymentMeanEnum"];
        };
        /**
         * @description Retraction reason type
         * @enum {string}
         */
        "billing.order.RetractionReasonEnum": "competitor" | "difficulty" | "expensive" | "other" | "performance" | "reliability" | "unused";
        /**
         * @description Type of objects an order can be linked to
         * @enum {string}
         */
        "billing.order.associatedObject.TypeEnum": "Bill" | "Deposit" | "Refund" | "ReverseBill" | "Withdrawal";
        /** @description Step history of order follow-up */
        "billing.order.followUp.History": {
            /**
             * Format: date-time
             * @description History date of order follow-up
             */
            date?: string;
            /** @description History description of order follow-up */
            description?: string;
            /** @description History label of order follow-up */
            label?: components["schemas"]["billing.order.followUp.HistoryStatusEnum"];
        };
        /**
         * @description History label of order follow-up
         * @enum {string}
         */
        "billing.order.followUp.HistoryStatusEnum": "DELIVERY" | "FRAUD_CHECK" | "FRAUD_DOCS_REQUESTED" | "FRAUD_MANUAL_REVIEW" | "FRAUD_REFUSED" | "INVOICE_IN_PROGRESS" | "INVOICE_SENT" | "ORDER_ACCEPTED" | "ORDER_STARTED" | "PAYMENT_CONFIRMED" | "PAYMENT_INITIATED" | "PAYMENT_RECEIVED" | "REGISTERED_PAYMENT_INITIATED";
        /**
         * @description Step status of order follow-up
         * @enum {string}
         */
        "billing.order.followUp.StatusEnum": "DOING" | "DONE" | "ERROR" | "TODO";
        /**
         * @description Status of order follow-up
         * @enum {string}
         */
        "billing.order.followUp.StepEnum": "AVAILABLE" | "DELIVERING" | "VALIDATED" | "VALIDATING";
        /** @description Parameter to give to a payment page */
        "billing.order.paymentMean.HttpParameter": {
            choice?: components["schemas"]["billing.order.paymentMean.HttpParameterChoice"][] | null;
            name?: string;
            value?: string | null;
        };
        /** @description Choice for an HTTP multi value parameter */
        "billing.order.paymentMean.HttpParameterChoice": {
            name?: string;
            value?: string;
        };
        /**
         * @description Operations an OVH account movement can represent
         * @enum {string}
         */
        "billing.ovhAccount.OperationEnum": "cancel-credit" | "cancel-debit" | "cancel-pre-debit" | "credit" | "debit" | "pre-credit" | "pre-debit";
        /**
         * @description Operations a voucher account movement can represent
         * @enum {string}
         */
        "billing.voucherAccount.OperationEnum": "cancel-credit" | "cancel-debit" | "cancel-pre-debit" | "credit" | "debit" | "pre-credit" | "pre-debit";
        /** @description Request body for the calculation of customer's carbon impact */
        "carbonCalculator.CalculationRequest": {
            /**
             * Format: date
             * @description Month of the requested document (day is ignored)
             */
            date: string;
        };
        /** @description Response for request of customer's carbon impact */
        "carbonCalculator.CalculationResponse": {
            /** @description ID of the calculation task */
            readonly taskID?: string;
        };
        /** @description Boolean to determine if account can generate invoice */
        "carbonCalculator.HasInvoiceResponse": {
            /** @description Whether the account has data to generate invoice */
            readonly hasInvoice?: boolean;
        };
        /** @description Task to generate a carbon impact document */
        "carbonCalculator.Task": {
            /** @description Link to the document */
            readonly link?: string | null;
            /** @description Status of the task */
            readonly status?: components["schemas"]["carbonCalculator.Task.TaskStatusEnum"];
            /** @description ID of the task */
            readonly taskID?: string;
        };
        /**
         * @description Status of a calculation task
         * @enum {string}
         */
        "carbonCalculator.Task.TaskStatusEnum": "ERROR" | "IN_PROGRESS" | "SUCCESS";
        /** @description Key and value, with proper key strings */
        "complexType.SafeKeyValue_string": {
            readonly key?: string;
            value?: string;
        };
        /**
         * @description Export file format
         * @enum {string}
         */
        "consumption.ConsumptionExportFormatsEnum": "csv";
        /**
         * @description Export task status
         * @enum {string}
         */
        "consumption.ConsumptionExportTaskStatusEnum": "DOING" | "DONE" | "ERROR" | "TODO";
        /** @description Representation of an Address */
        "contact.Address": {
            /** @description City */
            city?: string;
            /** @description Country */
            country?: components["schemas"]["nichandle.CountryEnum"];
            /** @description First line of the address */
            line1?: string;
            /** @description Second line of the address */
            line2?: string | null;
            /** @description Third line of the address */
            line3?: string | null;
            /** @description Others details */
            otherDetails?: string | null;
            /** @description Province name */
            province?: string | null;
            /** @description Zipcode */
            zip?: string;
        };
        /** @description Representation of a Contact */
        "contact.Contact": {
            /** @description Address for this contact */
            address?: components["schemas"]["contact.Address"];
            /** @description Birth city */
            birthCity?: string | null;
            /** @description Birth Country */
            birthCountry?: components["schemas"]["nichandle.CountryEnum"] | null;
            /**
             * Format: date
             * @description Birth date
             */
            birthDay?: string | null;
            /** @description Birth Zipcode */
            birthZip?: string | null;
            /** @description Cellphone number */
            cellPhone?: components["schemas"]["phoneNumber"] | null;
            /** @description National identification number of your company */
            companyNationalIdentificationNumber?: string | null;
            /** @description Email address */
            email?: string;
            /** @description Fax number */
            fax?: components["schemas"]["phoneNumber"] | null;
            /** @description First name */
            firstName?: string;
            /** @description Gender */
            gender?: components["schemas"]["nichandle.GenderEnum"] | null;
            /** @description Contact Identifier */
            readonly id?: number;
            /** @description Language */
            language?: components["schemas"]["nichandle.LanguageEnum"];
            /** @description Last name */
            lastName?: string;
            /** @description Legal form of the contact */
            legalForm?: components["schemas"]["nichandle.LegalFormEnum"];
            /** @description National identification number of the contact */
            nationalIdentificationNumber?: string | null;
            /** @description Nationality */
            nationality?: components["schemas"]["nichandle.CountryEnum"] | null;
            /** @description Organisation name */
            organisationName?: string | null;
            /** @description Organisation type */
            organisationType?: string | null;
            /** @description Telephone number */
            phone?: components["schemas"]["phoneNumber"] | null;
            /** @description Spare email address */
            spareEmail?: string | null;
            /** @description VAT number */
            vat?: string | null;
        };
        /** @description Extras informations about a field */
        "contact.FieldInformation": {
            /** @description Name of the field concerned by restrictions */
            fieldName?: string;
            /** @description Indicates if the field is mandatory when editing */
            mandatory?: boolean;
            /** @description Indicates if the field can't be edited */
            readOnly?: boolean;
        };
        /** @description Debt balance of the account */
        "debt.Balance": {
            readonly active?: boolean;
            /** @description Amount of debts the account has */
            readonly dueAmount?: components["schemas"]["order.Price"];
            /** @description Amount currently being processed */
            readonly pendingAmount?: components["schemas"]["order.Price"];
            /** @description Reserved amount awaiting payment */
            readonly todoAmount?: components["schemas"]["order.Price"];
            /** @description Unmatured amount for deferred payment term */
            readonly unmaturedAmount?: components["schemas"]["order.Price"];
        };
        /** @description State of a debt */
        "debt.Debt": {
            /** @description Original amount of the debt */
            readonly amount?: components["schemas"]["order.Price"];
            /**
             * Format: date-time
             * @description Date the debt was created on
             */
            readonly date?: string;
            readonly debtId?: number;
            /** @description Amount you still owe for that debt */
            readonly dueAmount?: components["schemas"]["order.Price"];
            /**
             * Format: date-time
             * @description If specified, the debt will not be recovered before that date
             */
            readonly dueDate?: string | null;
            /** @description The order the debt relates to */
            readonly orderId?: number;
            /** @description Amount currently being processed */
            readonly pendingAmount?: components["schemas"]["order.Price"];
            /** @description Status of a debt */
            readonly status?: components["schemas"]["debt.entry.StatusDebtOrderEnum"];
            /** @description Reserved amount awaiting payment */
            readonly todoAmount?: components["schemas"]["order.Price"];
            /** @description Unmatured amount for deferred payment term */
            readonly unmaturedAmount?: components["schemas"]["order.Price"];
        };
        /** @description Operation that happend on a debt */
        "debt.Operation": {
            /** @description Amount of the operation */
            readonly amount?: components["schemas"]["order.Price"];
            /**
             * Format: date-time
             * @description Date the operation took place on
             */
            readonly date?: string;
            /** @description Order id associated to the deposit */
            readonly depositOrderId?: number;
            readonly operationId?: number;
            /** @description Status of the operation */
            readonly status?: components["schemas"]["debt.entry.StatusEnum"];
            /** @description Type of movement this operation represents */
            readonly type?: components["schemas"]["debt.entry.OperationEnum"] | null;
        };
        /** @description The payment infos linked to this debt entry */
        "debt.associatedObject.PaymentInfo": {
            /** @description Optional customer description */
            description?: string | null;
            /** @description Payment mean used for this debt operation */
            paymentType?: components["schemas"]["billing.PaymentMeanEnum"];
            /** @description Public payment mean label */
            publicLabel?: string | null;
        };
        /**
         * @description Type of objects an order can be linked to
         * @enum {string}
         */
        "debt.associatedObject.TypeEnum": "Bill" | "DebtOperation" | "Deposit" | "Order" | "OvhAccountMovement" | "Refund" | "Withdrawal";
        /** @description The object linked to this debt entry */
        "debt.entry.AssociatedObject": {
            id?: string | null;
            paymentInfo?: components["schemas"]["debt.associatedObject.PaymentInfo"] | null;
            subId?: string | null;
            type?: components["schemas"]["debt.associatedObject.TypeEnum"] | null;
        };
        /**
         * @description All operations a debt entry can represent
         * @enum {string}
         */
        "debt.entry.OperationEnum": "BANK_TRANSFER_MANUAL" | "CANCEL" | "CASH_MANUAL" | "CHECK_MANUAL" | "CREDITCARD" | "CREDITCARD_AUTOMATIC" | "CREDITCARD_MANUAL" | "CREDIT_ACCOUNT_AUTOMATIC" | "CREDIT_CARD_AUTOMATIC" | "CREDIT_CARD_MANUAL" | "CURRENT_ACCOUNT_AUTOMATIC" | "CURRENT_ACCOUNT_MANUAL" | "DOMESTIC_CARD_AUTOMATIC" | "DOMESTIC_CARD_MANUAL" | "EDINAR_MANUAL" | "ENTERPRISE_AUTOMATIC" | "ENTERPRISE_MANUAL" | "IDEAL_AUTOMATIC" | "IDEAL_MANUAL" | "INTERNAL_TRUSTED_ACCOUNT_AUTOMATIC" | "INTERNAL_TRUSTED_ACCOUNT_MANUAL" | "MULTIBANCO_AUTOMATIC" | "MULTIBANCO_MANUAL" | "ORDER" | "PAYPAL_AUTOMATIC" | "PAYPAL_MANUAL" | "PAYU_AUTOMATIC" | "PAYU_MANUAL" | "RECOVERY_TRANSFER_AUTOMATIC" | "REFUND" | "REFUND_CHECK" | "REFUND_CREDITCARD" | "REFUND_CREDIT_ACCOUNT" | "REFUND_CREDIT_CARD" | "REFUND_CURRENT_ACCOUNT" | "REFUND_DOMESTIC_CARD" | "REFUND_ENTERPRISE" | "REFUND_IDEAL" | "REFUND_INTERNAL_TRUSTED_ACCOUNT" | "REFUND_LOSS" | "REFUND_MULTIBANCO" | "REFUND_PAYPAL" | "REFUND_PAYU" | "REFUND_RUPAY" | "REFUND_SEPA" | "REFUND_SEPA_DIRECT_DEBIT" | "REFUND_TRANSFER" | "REFUND_UNKNOWN" | "RUPAY_AUTOMATIC" | "RUPAY_MANUAL" | "SEPA_AUTOMATIC" | "SEPA_DIRECT_DEBIT_AUTOMATIC" | "SEPA_DIRECT_DEBIT_MANUAL" | "TRANSFER_MANUAL" | "UNPAID_CHECK" | "UNPAID_CREDITCARD" | "UNPAID_CREDIT_ACCOUNT" | "UNPAID_CREDIT_CARD" | "UNPAID_CURRENT_ACCOUNT" | "UNPAID_DOMESTIC_CARD" | "UNPAID_ENTERPRISE" | "UNPAID_IDEAL" | "UNPAID_INTERNAL_TRUSTED_ACCOUNT" | "UNPAID_MULTIBANCO" | "UNPAID_PAYPAL" | "UNPAID_PAYU" | "UNPAID_RUPAY" | "UNPAID_SEPA" | "UNPAID_SEPA_DIRECT_DEBIT" | "UNPAID_WITHDRAW" | "WARRANT_MANUAL" | "WITHDRAW_AUTOMATIC";
        /**
         * @description All status a debt HistoryOrder entry can be in
         * @enum {string}
         */
        "debt.entry.StatusDebtOrderEnum": "PAID" | "REFUNDED" | "TO_BE_PAID" | "UNMATURED" | "UNPAID" | "WRITE_OFF";
        /**
         * @description All status a debt entry can be in
         * @enum {string}
         */
        "debt.entry.StatusEnum": "CANCELLED" | "DONE" | "FAILED" | "PAID" | "PENDING" | "TODO";
        /**
         * @description Hardware RAID enum
         * @enum {string}
         */
        "dedicated.TemplateOsHardwareRaidEnum": "raid0" | "raid1" | "raid10" | "raid5" | "raid50" | "raid6" | "raid60";
        /** @description A structure describing some interesting facts about an OS template licensing */
        "dedicated.TemplateOsInfoLicense": {
            /** @description OS template license OS details */
            os?: components["schemas"]["dedicated.TemplateOsInfoLicenseItem"] | null;
            /** @description OS template license usage details */
            usage?: components["schemas"]["dedicated.TemplateOsInfoLicenseItem"] | null;
        };
        /** @description A structure describing some interesting facts about an OS template license item */
        "dedicated.TemplateOsInfoLicenseItem": {
            /** @description OS template license item names */
            name?: components["schemas"]["dedicated.TemplateOsInfoLicenseItemEnum"][] | null;
            /** @description OS template license item url */
            url?: string | null;
        };
        /**
         * @description Standard license name according to SPDX
         * @enum {string}
         */
        "dedicated.TemplateOsInfoLicenseItemEnum": "0BSD" | "AAL" | "ADSL" | "AFL-1.1" | "AFL-1.2" | "AFL-2.0" | "AFL-2.1" | "AFL-3.0" | "AGPL-1.0-only" | "AGPL-1.0-or-later" | "AGPL-3.0-only" | "AGPL-3.0-or-later" | "AMDPLPA" | "AML" | "AMPAS" | "ANTLR-PD" | "ANTLR-PD-fallback" | "APAFML" | "APL-1.0" | "APSL-1.0" | "APSL-1.1" | "APSL-1.2" | "APSL-2.0" | "Abstyles" | "Adobe-2006" | "Adobe-Glyph" | "Afmparse" | "Aladdin" | "Apache-1.0" | "Apache-1.1" | "Apache-2.0" | "Artistic-1.0" | "Artistic-1.0-Perl" | "Artistic-1.0-cl8" | "Artistic-2.0" | "BSD-1-Clause" | "BSD-2-Clause" | "BSD-2-Clause-Patent" | "BSD-2-Clause-Views" | "BSD-3-Clause" | "BSD-3-Clause-Attribution" | "BSD-3-Clause-Clear" | "BSD-3-Clause-LBNL" | "BSD-3-Clause-Modification" | "BSD-3-Clause-No-Nuclear-License" | "BSD-3-Clause-No-Nuclear-License-2014" | "BSD-3-Clause-No-Nuclear-Warranty" | "BSD-3-Clause-Open-MPI" | "BSD-4-Clause" | "BSD-4-Clause-Shortened" | "BSD-4-Clause-UC" | "BSD-Protection" | "BSD-Source-Code" | "BSL-1.0" | "BUSL-1.1" | "Bahyph" | "Barr" | "Beerware" | "BitTorrent-1.0" | "BitTorrent-1.1" | "BlueOak-1.0.0" | "Borceux" | "C-UDA-1.0" | "CAL-1.0" | "CAL-1.0-Combined-Work-Exception" | "CATOSL-1.1" | "CC-BY-1.0" | "CC-BY-2.0" | "CC-BY-2.5" | "CC-BY-3.0" | "CC-BY-4.0" | "CC-BY-NC-1.0" | "CC-BY-NC-2.0" | "CC-BY-NC-2.5" | "CC-BY-NC-3.0" | "CC-BY-NC-4.0" | "CC-BY-NC-ND-1.0" | "CC-BY-NC-ND-2.0" | "CC-BY-NC-ND-2.5" | "CC-BY-NC-ND-3.0" | "CC-BY-NC-ND-4.0" | "CC-BY-NC-SA-1.0" | "CC-BY-NC-SA-2.0" | "CC-BY-NC-SA-2.5" | "CC-BY-NC-SA-3.0" | "CC-BY-NC-SA-4.0" | "CC-BY-ND-1.0" | "CC-BY-ND-2.0" | "CC-BY-ND-2.5" | "CC-BY-ND-3.0" | "CC-BY-ND-4.0" | "CC-BY-SA-1.0" | "CC-BY-SA-2.0" | "CC-BY-SA-2.5" | "CC-BY-SA-3.0" | "CC-BY-SA-4.0" | "CC-PDDC" | "CC0-1.0" | "CDDL-1.0" | "CDDL-1.1" | "CDLA-Permissive-1.0" | "CDLA-Sharing-1.0" | "CECILL-1.0" | "CECILL-1.1" | "CECILL-2.0" | "CECILL-2.1" | "CECILL-B" | "CECILL-C" | "CERN-OHL-1.1" | "CERN-OHL-1.2" | "CERN-OHL-P-2.0" | "CERN-OHL-S-2.0" | "CERN-OHL-W-2.0" | "CNRI-Jython" | "CNRI-Python" | "CNRI-Python-GPL-Compatible" | "CPAL-1.0" | "CPL-1.0" | "CPOL-1.02" | "CUA-OPL-1.0" | "Caldera" | "ClArtistic" | "Condor-1.1" | "Crossword" | "CrystalStacker" | "Cube" | "D-FSL-1.0" | "DFSG" | "DOC" | "DRL-1.0" | "DSDP" | "Dotseqn" | "ECL-1.0" | "ECL-2.0" | "EFL-1.0" | "EFL-2.0" | "EPICS" | "EPL-1.0" | "EPL-2.0" | "EUDatagrid" | "EUPL-1.0" | "EUPL-1.1" | "EUPL-1.2" | "Entessa" | "ErlPL-1.1" | "Eurosym" | "FSFAP" | "FSFUL" | "FSFULLR" | "FTL" | "Fair" | "Frameworx-1.0" | "FreeBSD-DOC" | "FreeImage" | "GD" | "GFDL-1.1-invariants-only" | "GFDL-1.1-invariants-or-later" | "GFDL-1.1-no-invariants-only" | "GFDL-1.1-no-invariants-or-later" | "GFDL-1.1-only" | "GFDL-1.1-or-later" | "GFDL-1.2-invariants-only" | "GFDL-1.2-invariants-or-later" | "GFDL-1.2-no-invariants-only" | "GFDL-1.2-no-invariants-or-later" | "GFDL-1.2-only" | "GFDL-1.2-or-later" | "GFDL-1.3-invariants-only" | "GFDL-1.3-invariants-or-later" | "GFDL-1.3-no-invariants-only" | "GFDL-1.3-no-invariants-or-later" | "GFDL-1.3-only" | "GFDL-1.3-or-later" | "GL2PS" | "GLWTPL" | "GPL-1.0-only" | "GPL-1.0-or-later" | "GPL-2.0-only" | "GPL-2.0-or-later" | "GPL-3.0-only" | "GPL-3.0-or-later" | "Giftware" | "Glide" | "Glulxe" | "HPND" | "HPND-sell-variant" | "HTMLTIDY" | "HaskellReport" | "Hippocratic-2.1" | "IBM-pibs" | "ICU" | "IJG" | "IPA" | "IPL-1.0" | "ISC" | "ImageMagick" | "Imlib2" | "Info-ZIP" | "Intel" | "Intel-ACPI" | "Interbase-1.0" | "JPNIC" | "JSON" | "JasPer-2.0" | "LAL-1.2" | "LAL-1.3" | "LGPL-2.0-only" | "LGPL-2.0-or-later" | "LGPL-2.1-only" | "LGPL-2.1-or-later" | "LGPL-3.0-only" | "LGPL-3.0-or-later" | "LGPLLR" | "LPL-1.0" | "LPL-1.02" | "LPPL-1.0" | "LPPL-1.1" | "LPPL-1.2" | "LPPL-1.3a" | "LPPL-1.3c" | "Latex2e" | "Leptonica" | "LiLiQ-P-1.1" | "LiLiQ-R-1.1" | "LiLiQ-Rplus-1.1" | "Libpng" | "Linux-OpenIB" | "MIT" | "MIT-0" | "MIT-CMU" | "MIT-Modern-Variant" | "MIT-advertising" | "MIT-enna" | "MIT-feh" | "MIT-open-group" | "MITNFA" | "MPL-1.0" | "MPL-1.1" | "MPL-2.0" | "MPL-2.0-no-copyleft-exception" | "MS-PL" | "MS-RL" | "MTLL" | "MakeIndex" | "MirOS" | "Motosoto" | "MulanPSL-1.0" | "MulanPSL-2.0" | "Multics" | "Mup" | "NAIST-2003" | "NASA-1.3" | "NBPL-1.0" | "NCGL-UK-2.0" | "NCSA" | "NGPL" | "NIST-PD" | "NIST-PD-fallback" | "NLOD-1.0" | "NLPL" | "NOSL" | "NPL-1.0" | "NPL-1.1" | "NPOSL-3.0" | "NRL" | "NTP" | "NTP-0" | "Naumen" | "Net-SNMP" | "NetCDF" | "Newsletr" | "Nokia" | "Noweb" | "O-UDA-1.0" | "OCCT-PL" | "OCLC-2.0" | "ODC-By-1.0" | "ODbL-1.0" | "OFL-1.0" | "OFL-1.0-RFN" | "OFL-1.0-no-RFN" | "OFL-1.1" | "OFL-1.1-RFN" | "OFL-1.1-no-RFN" | "OGC-1.0" | "OGDL-Taiwan-1.0" | "OGL-Canada-2.0" | "OGL-UK-1.0" | "OGL-UK-2.0" | "OGL-UK-3.0" | "OGTSL" | "OLDAP-1.1" | "OLDAP-1.2" | "OLDAP-1.3" | "OLDAP-1.4" | "OLDAP-2.0" | "OLDAP-2.0.1" | "OLDAP-2.1" | "OLDAP-2.2" | "OLDAP-2.2.1" | "OLDAP-2.2.2" | "OLDAP-2.3" | "OLDAP-2.4" | "OLDAP-2.5" | "OLDAP-2.6" | "OLDAP-2.7" | "OLDAP-2.8" | "OML" | "OPL-1.0" | "OSET-PL-2.1" | "OSL-1.0" | "OSL-1.1" | "OSL-2.0" | "OSL-2.1" | "OSL-3.0" | "OpenSSL" | "PDDL-1.0" | "PHP-3.0" | "PHP-3.01" | "PSF-2.0" | "Parity-6.0.0" | "Parity-7.0.0" | "Plexus" | "PolyForm-Noncommercial-1.0.0" | "PolyForm-Small-Business-1.0.0" | "PostgreSQL" | "Python-2.0" | "QPL-1.0" | "Qhull" | "RHeCos-1.1" | "RPL-1.1" | "RPL-1.5" | "RPSL-1.0" | "RSA-MD" | "RSCPL" | "Rdisc" | "Ruby" | "SAX-PD" | "SCEA" | "SGI-B-1.0" | "SGI-B-1.1" | "SGI-B-2.0" | "SHL-0.5" | "SHL-0.51" | "SISSL" | "SISSL-1.2" | "SMLNJ" | "SMPPL" | "SNIA" | "SPL-1.0" | "SSH-OpenSSH" | "SSH-short" | "SSPL-1.0" | "SWL" | "Saxpath" | "Sendmail" | "Sendmail-8.23" | "SimPL-2.0" | "Sleepycat" | "Spencer-86" | "Spencer-94" | "Spencer-99" | "SugarCRM-1.1.3" | "TAPR-OHL-1.0" | "TCL" | "TCP-wrappers" | "TMate" | "TORQUE-1.1" | "TOSL" | "TU-Berlin-1.0" | "TU-Berlin-2.0" | "UCL-1.0" | "UPL-1.0" | "Unicode-DFS-2015" | "Unicode-DFS-2016" | "Unicode-TOU" | "Unlicense" | "VOSTROM" | "VSL-1.0" | "Vim" | "W3C" | "W3C-19980720" | "W3C-20150513" | "WTFPL" | "Watcom-1.0" | "Wsuipa" | "X11" | "XFree86-1.1" | "XSkat" | "Xerox" | "Xnet" | "ZPL-1.1" | "ZPL-2.0" | "ZPL-2.1" | "Zed" | "Zend-2.0" | "Zimbra-1.3" | "Zimbra-1.4" | "Zlib" | "blessing" | "bzip2-1.0.5" | "bzip2-1.0.6" | "copyleft-next-0.3.0" | "copyleft-next-0.3.1" | "curl" | "diffmark" | "dvipdfm" | "eGenix" | "etalab-2.0" | "freeware" | "gSOAP-1.3b" | "gnuplot" | "iMatix" | "libpng-2.0" | "libselinux-1.0" | "libtiff" | "mpich2" | "proprietary" | "psfrag" | "psutils" | "unknown" | "xinetd" | "xpp" | "zlib-acknowledgement";
        /** @description A structure describing some interesting facts about an OS template project */
        "dedicated.TemplateOsInfoProject": {
            /** @description OS template project OS details */
            os?: components["schemas"]["dedicated.TemplateOsInfoProjectItem"] | null;
            /** @description OS template project usage details */
            usage?: components["schemas"]["dedicated.TemplateOsInfoProjectItem"] | null;
        };
        /** @description A structure describing some interesting facts about an OS template project item */
        "dedicated.TemplateOsInfoProjectItem": {
            /** @description OS template project item governance */
            governance?: string[] | null;
            /** @description OS template project item name */
            name?: string | null;
            /** @description OS template project item release notes */
            releaseNotes?: string | null;
            /** @description OS template project item url */
            url?: string | null;
            /** @description OS template project item version */
            version?: string | null;
        };
        /** @description A structure describing input questions for the specific OS template */
        "dedicated.TemplateOsInput": {
            /** @description Default value */
            default?: string | null;
            /** @description Input question description */
            description?: string | null;
            /** @description When type is enum: name of the possible enum values */
            enum?: string[];
            /** @description Whether answering to that question is mandatory in order to trigger an install with that specific OS or not */
            mandatory?: boolean;
            /** @description Input question name */
            name?: string;
            /** @description Input type */
            type?: components["schemas"]["dedicated.TemplateOsInputTypeEnum"];
        };
        /**
         * @description Template OS Input type enum
         * @enum {string}
         */
        "dedicated.TemplateOsInputTypeEnum": "boolean" | "date" | "email" | "enum" | "hexstring" | "ip" | "keyValue" | "number" | "sshPubKey" | "string" | "text" | "time" | "url" | "uuid";
        /** @description A structure describing properties customizables about this dedicated installation template */
        "dedicated.TemplateOsProperties": {
            /** @description Set up the server using the provided hostname instead of the default hostname */
            customHostname?: string | null;
            /** @description Indicate the URL where your postinstall customisation script is located */
            postInstallationScriptLink?: string | null;
            /** @description indicate the string returned by your postinstall customisation script on successful execution. Advice: your script should return a unique validation string in case of succes. A good example is "loh1Xee7eo OK OK OK UGh8Ang1Gu */
            postInstallationScriptReturn?: string | null;
            /** @description Name of the ssh key that should be installed. Password login will be disabled */
            sshKeyName?: string | null;
        };
        /**
         * @description Os subfamily definition
         * @enum {string}
         */
        "dedicated.TemplateOsSubfamilyEnum": "alma" | "aos" | "arch" | "byoi" | "byolinux" | "centos" | "cloudlinux" | "coreos" | "debian" | "dgx" | "esxi" | "fedora" | "freebsd" | "gentoo" | "hyperv" | "omnios" | "openio" | "openmediavault" | "opensuse" | "ovh" | "pcs" | "power" | "proxmox" | "rhel" | "rocky" | "slackware" | "sles-sap" | "smartos" | "solusvm" | "ubuntu" | "windows-server-core" | "windows-server-desktop-exp" | "xcp" | "xen";
        /**
         * @description Os type
         * @enum {string}
         */
        "dedicated.TemplateOsTypeEnum": "bsd" | "custom" | "ibm" | "linux" | "solaris" | "unix" | "windows";
        /**
         * @description Os usage definition
         * @enum {string}
         */
        "dedicated.TemplateOsUsageEnum": "backup" | "basic" | "customer" | "database" | "erp" | "hosting" | "management" | "other" | "readyToUse" | "virtualisation" | "virtualization";
        /**
         * @description partition type
         * @enum {string}
         */
        "dedicated.TemplatePartitionTypeEnum": "logical" | "lv" | "primary";
        /** @description Available installation templates */
        "dedicated.installationTemplate.Templates": {
            /** @description this template bit format */
            readonly bitFormat?: components["schemas"]["dedicated.server.BitFormatEnum"];
            /** @description category of this template (informative only) */
            readonly category?: components["schemas"]["dedicated.TemplateOsUsageEnum"];
            /** @description Customizable template properties  */
            customization?: components["schemas"]["dedicated.TemplateOsProperties"] | null;
            /** @description information about this template */
            readonly description?: string;
            /** @description the distribution this template is based on */
            readonly distribution?: string;
            /**
             * Format: date
             * @description after this date, install of this template will not be possible at OVH
             */
            readonly endOfInstall?: string;
            /** @description this template family type */
            readonly family?: components["schemas"]["dedicated.TemplateOsTypeEnum"];
            /** @description list of all filesystems available for this template */
            readonly filesystems?: components["schemas"]["dedicated.server.FileSystemEnum"][];
            /** @description This distribution supports hardware raid configuration through the OVH API */
            readonly hardRaidConfiguration?: boolean | null;
            /** @description Inputs */
            readonly inputs?: components["schemas"]["dedicated.TemplateOsInput"][] | null;
            /** @description This distribution licensing details */
            readonly license?: components["schemas"]["dedicated.TemplateOsInfoLicense"] | null;
            /** @description This distribution supports Logical Volumes (Linux LVM) */
            readonly lvmReady?: boolean | null;
            /** @description Partitioning customization is not available for this OS template */
            readonly noPartitioning?: boolean;
            /** @description This distribution project details */
            readonly project?: components["schemas"]["dedicated.TemplateOsInfoProject"] | null;
            /** @description Partitioning customization is available but limited to mirroring for this OS template */
            readonly softRaidOnlyMirroring?: boolean;
            /** @description this template subfamily type */
            readonly subfamily?: components["schemas"]["dedicated.TemplateOsSubfamilyEnum"];
            /** @description This template name */
            templateName?: string;
        };
        /** @description Hardware RAID defined in this partitioning scheme */
        "dedicated.installationTemplate.hardwareRaid": {
            /** @description Disk list */
            disks?: string[];
            /** @description RAID mode */
            mode?: components["schemas"]["dedicated.TemplateOsHardwareRaidEnum"];
            /** @description Hardware RAID name */
            name?: string;
            /** @description Specifies the creation order of the hardware RAID */
            step?: number;
        };
        /** @description Partitioning schemes available on this template */
        "dedicated.installationTemplate.templatePartitioningSchemes": {
            /** @description This partitioning scheme name */
            name?: string;
            /** @description on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications) */
            priority?: number;
        };
        /** @description  Partitions defined in this partitioning scheme */
        "dedicated.installationTemplate.templatePartitions": {
            /** @description Partition filesytem */
            filesystem?: components["schemas"]["dedicated.server.FileSystemEnum"];
            /** @description Partition mount point */
            mountpoint?: string;
            /** @description specifies the creation order of the partition on the disk */
            order?: number;
            /** @description Partition raid */
            raid?: components["schemas"]["dedicated.server.PartitionRaidEnum"] | null;
            /** @description Partition size (unit: MB GB TB, MB by default), 0 => rest of the space */
            size?: components["schemas"]["complexType.UnitAndValue_long"];
            /** @description Partition type */
            type?: components["schemas"]["dedicated.TemplatePartitionTypeEnum"];
            /** @description Logical volume name (required if type is lv) or optional zpool name if filesystem is ZFS */
            volumeName?: string | null;
        };
        /**
         * @description Available os bit format
         * @enum {integer}
         */
        "dedicated.server.BitFormatEnum": 32 | 64;
        /**
         * @description FileSystems
         * @enum {string}
         */
        "dedicated.server.FileSystemEnum": "btrfs" | "ext3" | "ext4" | "fat16" | "none" | "ntfs" | "reiserfs" | "swap" | "ufs" | "vmfs5" | "vmfs6" | "vmfsl" | "xfs" | "zfs";
        /**
         * @description partition raid type
         * @enum {string}
         */
        "dedicated.server.PartitionRaidEnum": "0" | "1" | "10" | "5" | "6" | "7";
        /**
         * @description Document file format
         * @enum {string}
         */
        "domain.DocumentFormatsEnum": "gif" | "jpeg" | "jpg" | "pdf" | "png";
        /**
         * @description Operation actions
         * @enum {string}
         */
        "domain.OperationActionEnum": "canCancel" | "canCorrect" | "canRelaunch" | "canReset";
        /**
         * @description Operation functions
         * @enum {string}
         */
        "domain.OperationFunctionEnum": "ContactControl" | "ContactControlAcknowledge" | "ContactControlCorrect" | "ContactControlNotify" | "DnsAnycastActivate" | "DnsAnycastDeactivate" | "DnssecDisable" | "DnssecEnable" | "DnssecResigning" | "DnssecRollKsk" | "DnssecRollZsk" | "DomainAfterMarket" | "DomainContactControl" | "DomainContactUpdate" | "DomainControl" | "DomainCreate" | "DomainDelete" | "DomainDnsUpdate" | "DomainDsUpdate" | "DomainEmailRedirectionsCreate" | "DomainEmailRedirectionsDelete" | "DomainHold" | "DomainHostCreate" | "DomainHostDelete" | "DomainHostUpdate" | "DomainIncomingTransfer" | "DomainLock" | "DomainOutgoingTransfer" | "DomainRegistryDelete" | "DomainRenew" | "DomainResourceDelete" | "DomainRestore" | "DomainTrade" | "DomainUnhold" | "DomainUnlock" | "ZoneImport";
        /**
         * @description Operation status
         * @enum {string}
         */
        "domain.OperationStatusEnum": "cancelled" | "doing" | "done" | "error" | "problem" | "todo";
        /** @description One step from an operation */
        "domain.OperationStep": {
            /** @description Description of the step */
            readonly description?: string;
            /** @description Execution time of the step */
            readonly executionDuration?: number;
            /** @description Name of the step */
            readonly step?: string;
        };
        /** @description Tasks associated to domain */
        "domain.Task": {
            /** @description Can accelerate the task */
            readonly canAccelerate?: boolean;
            /** @description Can cancel the task */
            readonly canCancel?: boolean;
            /** @description Can relaunch the task */
            readonly canRelaunch?: boolean;
            /** @description Comment about the task */
            readonly comment?: string | null;
            /**
             * Format: date-time
             * @description Creation date of the task
             */
            readonly creationDate?: string;
            /** @description Domain of the task */
            readonly domain?: string | null;
            /**
             * Format: date-time
             * @description Done date of the task
             */
            readonly doneDate?: string | null;
            /** @description Function of the task */
            readonly function?: string;
            /** @description Id of the task */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Last update date of the task
             */
            readonly lastUpdate?: string;
            /** @description Status of the task */
            readonly status?: components["schemas"]["domain.OperationStatusEnum"];
            /**
             * Format: date-time
             * @description Todo date of the task
             */
            readonly todoDate?: string;
        };
        /**
         * @description All functions from a dns task
         * @enum {string}
         */
        "domain.TaskFunctionEnum": "DnsAnycastActivate" | "DnsAnycastDeactivate" | "DnssecDisable" | "DnssecEnable" | "DnssecResigning" | "DnssecRollKsk" | "DnssecRollZsk" | "ZoneCreate" | "ZoneCut" | "ZoneDelete" | "ZoneImport" | "ZoneRestore";
        /**
         * @description All statuses from a dns task
         * @enum {string}
         */
        "domain.TaskStatusEnum": "cancelled" | "doing" | "done" | "error" | "problem" | "todo";
        /**
         * @description All HTTP methods available
         * @enum {string}
         */
        "http.MethodEnum": "DELETE" | "GET" | "POST" | "PUT";
        /**
         * @description Possible values for IP campuses' names
         * @enum {string}
         */
        "ip.CampusEnum": "BHS" | "ERI" | "GRA" | "HIL" | "LIM" | "RBX" | "SBG" | "SGP" | "SYD" | "VIN" | "WAW" | "YNM" | "YYZ";
        /** @description Country Migration */
        "me.Migration": {
            /** @description Billing country to migrate from */
            readonly from?: components["schemas"]["nichandle.OvhSubsidiaryEnum"];
            /** @description Migration Id */
            readonly id?: number;
            /** @description Migration status */
            readonly status?: components["schemas"]["me.migration.StatusEnum"];
            /** @description Migration steps */
            readonly steps?: components["schemas"]["me.migration.Step"][] | null;
            /** @description Billing country to migrate to */
            readonly to?: components["schemas"]["nichandle.OvhSubsidiaryEnum"];
        };
        /** @description Support level of an account */
        "me.SupportLevel.Level": {
            /** @description Level of support */
            readonly level?: components["schemas"]["me.SupportLevel.LevelTypeEnum"];
        };
        /**
         * @description Type of level
         * @enum {string}
         */
        "me.SupportLevel.LevelTypeEnum": "business" | "enterprise" | "premium" | "premium-accredited" | "standard";
        /** @description Get report API response */
        "me.abuse.Abuse": {
            /** @description Abuse category */
            readonly category?: components["schemas"]["me.abuse.AbuseCategoryEnum"];
            /**
             * Format: date
             * @description Creation date of the abuse
             */
            readonly creationDate?: string;
            /** @description Public ID of the abuse case */
            readonly publicId?: string;
            /** @description Service where is hosted the abuse */
            readonly service?: string;
            /** @description Abuse case status */
            readonly status?: components["schemas"]["me.abuse.AbuseStatusEnum"];
        };
        /**
         * @description The abuse categories
         * @enum {string}
         */
        "me.abuse.AbuseCategoryEnum": "Compromised" | "Copyright" | "Illegal" | "Intrusion" | "Malware" | "Network Attack" | "Other" | "Phishing" | "Spam";
        /**
         * @description The abuse status
         * @enum {string}
         */
        "me.abuse.AbuseStatusEnum": "Answered" | "Claimed" | "Closed" | "Escalated" | "Open" | "Paused" | "Reopened" | "Updated" | "WaitingAnswer";
        /**
         * @description State of the agreement
         * @enum {string}
         */
        "me.agreements.AgreementStatusEnum": "ko" | "obsolete" | "ok" | "todo";
        /** @description Contract Agreement */
        "me.agreements.ContractAgreement": {
            /** @description State of the agreement */
            readonly agreed?: components["schemas"]["me.agreements.AgreementStatusEnum"];
            /** @description Contract ID */
            readonly contractId?: number;
            /**
             * Format: date-time
             * @description Date of creation if the agreement is not signed. Date of signature if the agreement is signed
             */
            readonly date?: string;
            /** @description Contract Agreement ID */
            readonly id?: number;
        };
        /** @description Missing description */
        "me.billing.group.BillingGroup": {
            /** @description Contact ID from /me/contact */
            contactId?: number | null;
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /** @description Billing group ID */
            readonly groupId?: number;
            /**
             * Format: date-time
             * @description Last update date
             */
            readonly lastUpdate?: string;
            /** @description Billing group unique name */
            name?: string;
            /** @description Payment method ID associated to the billing group */
            paymentMethodId?: number | null;
        };
        /** @description Missing description */
        "me.billing.group.Service": {
            /** @description Billing group ID */
            readonly groupId?: number;
            /** @description Service ID */
            readonly serviceId?: number;
        };
        /** @description Missing description */
        "me.billing.group.service.Create": {
            /** @description A service ID to associate */
            serviceId: number;
        };
        /** @description Purchase order creation payload */
        "me.billing.purchaseOrder.Creation": {
            /** @description Active */
            active?: boolean | null;
            /** @description Billing Group identifier */
            billingGroupId?: number | null;
            /** @description Description */
            description?: string | null;
            /**
             * Format: date
             * @description End date
             */
            endDate?: string | null;
            /** @description Reference */
            reference: string;
            /**
             * Format: date
             * @description Start date
             */
            startDate: string;
            /** @description Type of a purchase order */
            type: components["schemas"]["me.billing.purchaseOrder.PurchaseOrderTypeEnum"];
        };
        /** @description Purchase Order */
        "me.billing.purchaseOrder.PurchaseOrder": {
            /** @description Active */
            readonly active?: boolean | null;
            /** @description Billing Group identifier */
            readonly billingGroupId?: number | null;
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /** @description Description */
            readonly description?: string | null;
            /**
             * Format: date
             * @description End date
             */
            readonly endDate?: string | null;
            /** @description Purchase Order identifier */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Last update date
             */
            readonly lastUpdate?: string;
            /** @description Reference */
            readonly reference?: string;
            /**
             * Format: date
             * @description Start date
             */
            readonly startDate?: string;
            /** @description Status */
            readonly status?: components["schemas"]["me.billing.purchaseOrder.StatusEnum"];
            /** @description Type of a purchase order */
            readonly type?: components["schemas"]["me.billing.purchaseOrder.PurchaseOrderTypeEnum"];
        };
        /**
         * @description Type of a purchase order
         * @enum {string}
         */
        "me.billing.purchaseOrder.PurchaseOrderTypeEnum": "PURCHASE_ORDER" | "REFERENCE_ORDER";
        /**
         * @description Status of the Purchase Order
         * @enum {string}
         */
        "me.billing.purchaseOrder.StatusEnum": "CREATED" | "DELETED";
        /** @description Purchase order update payload */
        "me.billing.purchaseOrder.Update": {
            /** @description Active */
            active?: boolean | null;
            /** @description Billing group identifier */
            billingGroupId?: number | null;
            /** @description Description */
            description?: string | null;
            /**
             * Format: date
             * @description End date
             */
            endDate?: string | null;
            /** @description Reference */
            reference?: string | null;
            /**
             * Format: date
             * @description Start date
             */
            startDate?: string | null;
            /** @description Type of a purchase order */
            type?: components["schemas"]["me.billing.purchaseOrder.PurchaseOrderTypeEnum"] | null;
        };
        /** @description Consumption billing report */
        "me.billing.report.Consumption": {
            /**
             * Format: date
             * @description End date of the report period
             */
            readonly periodEnd?: string;
            /**
             * Format: date
             * @description Start date of the report period
             */
            readonly periodStart?: string;
            /** @description Url of the report */
            readonly report?: string | null;
            /** @description Status of the report */
            readonly status?: components["schemas"]["me.billing.report.consumption.StatusEnum"];
            /** @description Task id of the report */
            readonly taskId?: string;
        };
        /** @description Request of consumption billing report creation */
        "me.billing.report.consumption.CreationRequest": {
            /**
             * Format: date
             * @description End date of the report period
             */
            periodEnd: string;
            /**
             * Format: date
             * @description Start date of the report period
             */
            periodStart: string;
        };
        /** @description Response of consumption billing report creation */
        "me.billing.report.consumption.CreationResponse": {
            /** @description Task id of the report */
            readonly taskId?: string;
        };
        /**
         * @description Status of consumption billing report
         * @enum {string}
         */
        "me.billing.report.consumption.StatusEnum": "CREATING" | "ERROR" | "READY";
        /** @description Asynchronous task related to Billing */
        "me.billing.tasks.Task": {
            /** @description Unique identifier of the Task */
            readonly id?: number;
            /** @description Metadata linked to the Task. Will help you determine which object it relates to */
            readonly metadata?: components["schemas"]["me.billing.tasks.TaskMetadatum"][];
            /** @description Describes which Task is being performed */
            readonly name?: components["schemas"]["me.billing.tasks.TaskNameEnum"];
            /** @description Current status of the Task */
            readonly status?: components["schemas"]["me.billing.tasks.TaskStatusEnum"];
            /** @description Current step of the Task. The step depends on the Task name. */
            readonly step?: string;
        };
        /** @description Metadatum linked to a Task */
        "me.billing.tasks.TaskMetadatum": {
            /** @description Metadatum key */
            readonly key?: string;
            /** @description Metadatum value */
            readonly value?: string;
        };
        /**
         * @description Billing tasks names
         * @enum {string}
         */
        "me.billing.tasks.TaskNameEnum": "contact/change";
        /**
         * @description Billing tasks statuses
         * @enum {string}
         */
        "me.billing.tasks.TaskStatusEnum": "CANCELLED" | "DOING" | "DONE" | "ERROR" | "INIT" | "PROBLEM" | "TODO";
        /** @description Consent campaign */
        "me.consent.Campaign": {
            /** @description Campaign description */
            readonly description?: string;
            /** @description Campaign name */
            readonly name?: string;
            /** @description Campaign type */
            readonly type?: components["schemas"]["me.consent.CampaignTypeEnum"];
        };
        /**
         * @description Campaign type
         * @enum {string}
         */
        "me.consent.CampaignTypeEnum": "OPTIN" | "OPTOUT";
        /** @description Customer consent information for a campaign */
        "me.consent.Consent": {
            /** @description Campaign name */
            readonly campaign?: string;
            /** @description Consent decisions history for this campaign */
            readonly history?: components["schemas"]["me.consent.Decision"][];
            /** @description Campaign type */
            readonly type?: components["schemas"]["me.consent.CampaignTypeEnum"];
            /** @description Current consent value */
            readonly value?: boolean;
        };
        /** @description Customer consent decision */
        "me.consent.Decision": {
            /**
             * Format: date-time
             * @description Consent decision datetime
             */
            readonly timestamp?: string;
            /** @description Consent decision value */
            value: boolean;
        };
        /** @description Price with currency and amount in micro-cents */
        "me.consumption.Price": {
            readonly currencyCode?: components["schemas"]["order.CurrencyCodeEnum"];
            readonly text?: string;
            readonly value?: number;
            readonly valueInUcents?: number;
        };
        /** @description List of consumptions recorded in a range */
        "me.consumption.Transaction": {
            /**
             * Format: date-time
             * @description Begin date
             */
            readonly beginDate?: string;
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string | null;
            /** @description List of product plan code consumption */
            readonly elements?: components["schemas"]["me.consumption.transaction.Element"][];
            /**
             * Format: date-time
             * @description End date
             */
            readonly endDate?: string | null;
            /** @description Transaction ID */
            readonly id?: number | null;
            /**
             * Format: date-time
             * @description Last update
             */
            readonly lastUpdate?: string | null;
            /** @description Consumption amount price */
            readonly price?: components["schemas"]["me.consumption.Price"];
            /** @description Service ID */
            readonly serviceId?: number;
        };
        /** @description Element of consumption for resource */
        "me.consumption.transaction.Element": {
            /** @description List of consumption details for this planCode */
            readonly details?: components["schemas"]["me.consumption.transaction.element.Detail"][];
            /** @description Identifier of the offer */
            readonly planCode?: string;
            /** @description Family of the offer */
            readonly planFamily?: string;
            /** @description Consumption amount price */
            readonly price?: components["schemas"]["me.consumption.Price"];
            /** @description Consumption quantity */
            readonly quantity?: number;
        };
        /** @description Element of consumption for resource */
        "me.consumption.transaction.element.Detail": {
            /** @description Consumption amount price */
            readonly price?: components["schemas"]["me.consumption.Price"];
            /** @description Consumption quantity */
            readonly quantity?: number;
            /** @description Unique ID associated to one service element */
            readonly unique_id?: string | null;
        };
        /** @description Representation of a Contact */
        "me.contact.Address": {
            /** @description City */
            city?: string;
            /** @description Country */
            country?: components["schemas"]["nichandle.CountryEnum"];
            /** @description First line of the address */
            line1?: string;
            /** @description Second line of the address */
            line2?: string | null;
            /** @description Third line of the address */
            line3?: string | null;
            /** @description Other details */
            otherDetails?: string | null;
            /** @description Province name */
            province?: string | null;
            /** @description Zipcode */
            zip?: string | null;
        };
        /** @description Contact definition */
        "me.contact.Contact": {
            /** @description Address for this contact */
            address?: components["schemas"]["me.contact.Address"];
            /** @description Birth city */
            birthCity?: string | null;
            /** @description Birth Country */
            birthCountry?: components["schemas"]["nichandle.CountryEnum"] | null;
            /**
             * Format: date
             * @description Birth date
             */
            birthDay?: string | null;
            /** @description Birth Zipcode */
            birthZip?: string | null;
            /** @description Cellphone number */
            cellPhone?: components["schemas"]["phoneNumber"] | null;
            /** @description National identification number of your company */
            companyNationalIdentificationNumber?: string | null;
            /** @description Email address */
            email?: string;
            /** @description Fax number */
            fax?: components["schemas"]["phoneNumber"] | null;
            /** @description First name */
            firstName?: string;
            /** @description Gender */
            gender?: components["schemas"]["nichandle.GenderEnum"] | null;
            /** @description Contact Identifier */
            readonly id?: number;
            /** @description Language */
            language?: components["schemas"]["nichandle.LanguageEnum"];
            /** @description Last name */
            lastName?: string;
            /** @description Legal form of the contact */
            legalForm?: components["schemas"]["nichandle.LegalFormEnum"];
            /** @description National identification number of the contact */
            nationalIdentificationNumber?: string | null;
            /** @description Nationality */
            nationality?: components["schemas"]["nichandle.CountryEnum"] | null;
            /** @description Organisation name */
            organisationName?: string | null;
            /** @description Organisation type */
            organisationType?: string | null;
            /** @description Telephone number */
            phone?: components["schemas"]["phoneNumber"] | null;
            /** @description Spare email address */
            spareEmail?: string | null;
            /** @description VAT number */
            vat?: string | null;
        };
        /** @description Extras information about a field */
        "me.contact.FieldInformation": {
            /** @description Name of the field concerned by restrictions */
            readonly fieldName?: string;
            /** @description Indicates if the field is mandatory when editing */
            readonly mandatory?: boolean;
            /** @description Indicates if the field can't be edited */
            readonly readOnly?: boolean;
        };
        /** @description Missing description */
        "me.credit.Balance": {
            /** @description Balance amount */
            readonly amount?: components["schemas"]["order.Price"];
            /** @description Balance details, amounts by serviceID */
            readonly balanceDetails?: components["schemas"]["me.credit.balance.BalanceDetails"][];
            /** @description Balance name */
            readonly balanceName?: string;
            /** @description Movement already booked on orders */
            readonly booked?: components["schemas"]["me.credit.balance.BookedMovement"][];
            /**
             * Format: date-time
             * @description Balance creation date
             */
            readonly creationDate?: string;
            /** @description Movement expiring soon */
            readonly expiring?: components["schemas"]["me.credit.balance.ExpiringMovement"][];
            /**
             * Format: date-time
             * @description Balance last update
             */
            readonly lastUpdate?: string;
            /** @description Balance type */
            readonly type?: components["schemas"]["me.credit.balance.TypeEnum"];
        };
        /** @description Missing description */
        "me.credit.balance.BalanceDetails": {
            /** @description Balance part amount */
            readonly amount?: components["schemas"]["order.Price"];
            /** @description Balance sub name */
            readonly balanceSubName?: string | null;
            /** @description Expiring parts of this balance */
            readonly expiring?: components["schemas"]["me.credit.balance.ExpiringMovement"][];
            /** @description Service ID of this balance part */
            readonly serviceId?: number | null;
        };
        /** @description Missing description */
        "me.credit.balance.BookedMovement": {
            /** @description Movement amount */
            readonly amount?: components["schemas"]["order.Price"];
            /** @description Balance sub name */
            readonly balanceSubName?: string | null;
            /** @description Order ID */
            readonly orderId?: number;
        };
        /** @description Missing description */
        "me.credit.balance.ExpiringMovement": {
            /** @description Movement amount */
            readonly amount?: components["schemas"]["order.Price"];
            /**
             * Format: date-time
             * @description Movement creation date
             */
            readonly creationDate?: string;
            /**
             * Format: date-time
             * @description Movement expiration date
             */
            readonly expirationDate?: string;
            /**
             * Format: date-time
             * @description Movement last update
             */
            readonly lastUpdate?: string;
            /** @description Object source of this credit movement */
            readonly sourceObject?: components["schemas"]["me.credit.balance.movement.SubObject"];
        };
        /** @description Missing description */
        "me.credit.balance.Movement": {
            /** @description Movement amount */
            readonly amount?: components["schemas"]["order.Price"];
            /** @description Balance name */
            readonly balanceName?: string;
            /**
             * Format: date-time
             * @description Movement creation date
             */
            readonly creationDate?: string;
            /** @description Object destination of this credit movement */
            readonly destinationObject?: components["schemas"]["me.credit.balance.movement.SubObject"] | null;
            /**
             * Format: date-time
             * @description Movement expiration date
             */
            readonly expirationDate?: string | null;
            /**
             * Format: date-time
             * @description Movement last update
             */
            readonly lastUpdate?: string;
            /** @description Movement ID */
            readonly movementId?: number;
            /** @description Order ID associated to this credit movement */
            readonly orderId?: number | null;
            /** @description Object source of this credit movement */
            readonly sourceObject?: components["schemas"]["me.credit.balance.movement.SubObject"];
            /** @description Movement type */
            readonly type?: components["schemas"]["me.credit.balance.movement.TypeEnum"];
        };
        /**
         * @description Balance type
         * @enum {string}
         */
        "me.credit.balance.TypeEnum": "BONUS" | "DEPOSIT" | "PREPAID_ACCOUNT" | "VOUCHER";
        /** @description Missing description */
        "me.credit.balance.movement.SubObject": {
            /** @description Sub object ID */
            readonly id?: string;
            /** @description Sub object name */
            readonly name?: string;
        };
        /**
         * @description Balance movement type
         * @enum {string}
         */
        "me.credit.balance.movement.TypeEnum": "BONUS" | "CANCEL" | "CREDIT_NOTE" | "EXPIRE" | "GIFT" | "MANUAL" | "ORDER" | "REFUND" | "UNPAID" | "USE" | "VOUCHER";
        /** @description Missing description */
        "me.credit.code.Redeem": {
            /** @description Code to validate */
            inputCode: string;
            /** @description Restrict credit to a specific service */
            serviceId?: number;
        };
        /** @description DNS task */
        "me.dns.Task": {
            /** @description Can accelerate the task */
            readonly canAccelerate?: boolean;
            /** @description Can cancel the task */
            readonly canCancel?: boolean;
            /** @description Can relaunch the task */
            readonly canRelaunch?: boolean;
            /** @description Comment about the task */
            readonly comment?: string | null;
            /**
             * Format: date-time
             * @description Creation date of the task
             */
            readonly creationDate?: string;
            /**
             * Format: date-time
             * @description Done date of the task
             */
            readonly doneDate?: string | null;
            /** @description Function of the task */
            readonly function?: components["schemas"]["domain.TaskFunctionEnum"];
            /** @description Id of the task */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Last update date of the task
             */
            readonly lastUpdate?: string | null;
            /** @description Status of the task */
            readonly status?: components["schemas"]["domain.TaskStatusEnum"];
            /**
             * Format: date-time
             * @description Todo date of the task
             */
            readonly todoDate?: string;
            /** @description Zone related to the task */
            readonly zone?: string;
        };
        /** @description Representation of country and continent from visitor IP */
        "me.geolocation.ContinentCountryLocation": {
            /** @description Continent */
            readonly continent?: components["schemas"]["me.geolocation.ContinentEnum"] | null;
            /** @description Country iso code */
            readonly countryCode?: components["schemas"]["me.geolocation.CountryEnum"] | null;
            /** @description The IP address processed, the user's origin one */
            readonly ip?: components["schemas"]["ip"];
        };
        /**
         * @description Continent
         * @enum {string}
         */
        "me.geolocation.ContinentEnum": "africa" | "antartica" | "asia" | "europe" | "north-america" | "oceania" | "south-america";
        /**
         * @description Country iso code
         * @enum {string}
         */
        "me.geolocation.CountryEnum": "ac" | "ad" | "ae" | "af" | "ag" | "ai" | "al" | "am" | "an" | "ao" | "aq" | "ar" | "as" | "at" | "au" | "aw" | "ax" | "az" | "ba" | "bb" | "bd" | "be" | "bf" | "bg" | "bh" | "bi" | "bj" | "bl" | "bm" | "bn" | "bo" | "bq" | "br" | "bs" | "bt" | "bv" | "bw" | "by" | "bz" | "ca" | "cc" | "cd" | "cf" | "cg" | "ch" | "ci" | "ck" | "cl" | "cm" | "cn" | "co" | "cr" | "cs" | "cu" | "cv" | "cw" | "cx" | "cy" | "cz" | "de" | "dj" | "dk" | "dm" | "do" | "dz" | "ec" | "ee" | "eg" | "eh" | "er" | "es" | "et" | "fc" | "fd" | "fi" | "fj" | "fk" | "fm" | "fo" | "fr" | "fx" | "ga" | "gb" | "gd" | "ge" | "gf" | "gg" | "gh" | "gi" | "gl" | "gm" | "gn" | "gp" | "gq" | "gr" | "gs" | "gt" | "gu" | "gw" | "gy" | "hk" | "hm" | "hn" | "hr" | "ht" | "hu" | "id" | "ie" | "il" | "im" | "in" | "io" | "iq" | "ir" | "is" | "it" | "je" | "jm" | "jo" | "jp" | "ke" | "kg" | "kh" | "ki" | "km" | "kn" | "kp" | "kr" | "kw" | "ky" | "kz" | "la" | "lb" | "lc" | "li" | "lk" | "lr" | "ls" | "lt" | "lu" | "lv" | "ly" | "ma" | "mc" | "md" | "me" | "mf" | "mg" | "mh" | "mk" | "ml" | "mm" | "mn" | "mo" | "mp" | "mq" | "mr" | "ms" | "mt" | "mu" | "mv" | "mw" | "mx" | "my" | "mz" | "na" | "nc" | "ne" | "nf" | "ng" | "ni" | "nl" | "no" | "np" | "nr" | "nu" | "nz" | "om" | "pa" | "pe" | "pf" | "pg" | "ph" | "pk" | "pl" | "pm" | "pn" | "pr" | "ps" | "pt" | "pw" | "py" | "qa" | "qc" | "re" | "ro" | "rs" | "ru" | "rw" | "sa" | "sb" | "sc" | "sd" | "se" | "sg" | "sh" | "si" | "sj" | "sk" | "sl" | "sm" | "sn" | "so" | "sr" | "ss" | "st" | "sv" | "sx" | "sy" | "sz" | "tc" | "td" | "tf" | "tg" | "th" | "tj" | "tk" | "tl" | "tm" | "tn" | "to" | "tp" | "tr" | "tt" | "tv" | "tw" | "tz" | "ua" | "ug" | "uk" | "um" | "us" | "uy" | "uz" | "va" | "vc" | "ve" | "vg" | "vi" | "vn" | "vu" | "we" | "wf" | "ws" | "ye" | "yt" | "yu" | "za" | "zm" | "zw";
        /** @description Original service that can be migrated */
        "me.incident.MigrateServices": {
            /** @description If false, the order will be registered; if true, the order will be returned but not registered. Useful to compute prices */
            dryRun?: boolean;
            /** @description IDs of the services to migrate */
            serviceIds?: number[];
        };
        /** @description Order created in order to migrate a service */
        "me.incident.Order": {
            /** @description Order created in order to migrate a service */
            readonly order?: components["schemas"]["order.Order"];
        };
        /** @description Commercial gesture applied for the service migration */
        "me.incident.PercentagePromotion": {
            /**
             * Format: duration
             * @description Duration applied for the commercial gesture
             */
            readonly duration?: string;
            /** @description Percentage of the discount */
            readonly value?: number;
        };
        /** @description Commercial offer a customer can migrate his service to */
        "me.incident.ProposedOffer": {
            /** @description List of configurations used for the migration */
            readonly configurations?: components["schemas"]["me.incident.ProposedOfferConfiguration"][];
            /** @description Proposed commercial offer */
            readonly plan?: components["schemas"]["order.cart.GenericProductDefinition"];
            /** @description Pricing mode used to bill the offer */
            readonly pricingMode?: string;
            /** @description Promotion applied to the commercial offer */
            readonly promotion?: components["schemas"]["me.incident.PercentagePromotion"];
        };
        /** @description Config */
        "me.incident.ProposedOfferConfiguration": {
            /** @description name */
            readonly name?: string;
            /** @description value */
            readonly value?: string;
        };
        /** @description Service you may migrate to a given offer */
        "me.incident.ServiceMigration": {
            /** @description Options to migrate linked to the original service */
            readonly addons?: components["schemas"]["me.incident.ServiceMigration"][];
            /** @description ID of an ongoing migration order */
            readonly orderId?: number | null;
            /** @description Proposed commercial offer to replace the service */
            readonly proposedOffer?: components["schemas"]["me.incident.ProposedOffer"];
            /** @description Description of the service to migrate */
            readonly serviceToMigrate?: components["schemas"]["me.incident.ServiceToMigrate"] | null;
        };
        /** @description Original service that can be migrated */
        "me.incident.ServiceToMigrate": {
            /** @description Description of the offer of the service */
            readonly description?: string;
            /** @description Additional information on the service */
            readonly metadata?: components["schemas"]["complexType.SafeKeyValue_string"][];
            /** @description Route */
            readonly route?: string | null;
            /** @description ID of the migratable service */
            readonly serviceId?: number;
            /** @description Name of the migratable service */
            readonly serviceName?: string;
        };
        /** @description Insight access token */
        "me.insight.Access": {
            /**
             * Format: password
             * @description Access token
             */
            readonly access?: string;
            /**
             * Format: date-time
             * @description Token creation date
             */
            readonly createdAt?: string;
            /**
             * Format: date-time
             * @description Token expiration date
             */
            readonly expireAt?: string;
        };
        /** @description User marketing consent */
        "me.marketing.Consent": {
            /** @description Details for call marketing communication */
            call?: components["schemas"]["me.marketing.ConsentDetails"];
            /** @description Stop all marketing communication */
            denyAll?: boolean;
            /**
             * Format: date-time
             * @description Stop marketing communication until this date
             */
            denyUntil?: string | null;
            /** @description Details for email marketing communication */
            email?: components["schemas"]["me.marketing.ConsentDetails"];
            /** @description Details for sms marketing communication */
            sms?: components["schemas"]["me.marketing.ConsentDetails"];
        };
        /** @description User consent details for a marketing communication mean */
        "me.marketing.ConsentDetails": {
            /** @description Enable marketing communication for OVHcloud events and webinars */
            events?: boolean;
            /** @description Enable marketing communication for new product */
            newProductRecommendation?: boolean;
            /** @description Enable marketing communication for OVHcloud newsletter */
            newsletter?: boolean;
            /** @description Enable marketing communication for offer and discount */
            offerAndDiscount?: boolean;
        };
        /** @description contract */
        "me.migration.Contract": {
            /** @description Status */
            readonly active?: boolean;
            /**
             * Format: date
             * @description Date
             */
            readonly date?: string;
            /** @description ID */
            readonly id?: number;
            /** @description Name */
            readonly name?: string;
            /** @description PDF URL */
            readonly pdf?: string;
            /** @description Text of the contract */
            readonly text?: string;
        };
        /**
         * @description Status of the migration
         * @enum {string}
         */
        "me.migration.StatusEnum": "CANCELED" | "CHECKED" | "DOING" | "MIGRATED" | "TODO" | "TO_CHECK";
        /** @description Country Migration Step */
        "me.migration.Step": {
            /** @description Contracts data */
            readonly contracts?: components["schemas"]["me.migration.step.Contracts"] | null;
            /** @description Debt data */
            readonly debt?: components["schemas"]["me.migration.step.Debt"] | null;
            /** @description Migration step name */
            readonly name?: components["schemas"]["me.migration.step.NameEnum"];
            /** @description Orders data */
            readonly orders?: components["schemas"]["me.migration.step.Orders"] | null;
            /** @description Billing step status */
            readonly status?: components["schemas"]["me.migration.step.StatusEnum"];
        };
        /** @description Country Migration step contracts data */
        "me.migration.step.Contracts": {
            /** @description Array of contract agreements to accept */
            readonly agreements?: components["schemas"]["me.agreements.ContractAgreement"][];
        };
        /** @description Country Migration step debt data */
        "me.migration.step.Debt": {
            /** @description Balance amount */
            readonly balanceAmount?: components["schemas"]["order.Price"] | null;
            /** @description OVH Account amount */
            readonly ovhAccountAmount?: components["schemas"]["order.Price"] | null;
        };
        /**
         * @description Name of the migration step
         * @enum {string}
         */
        "me.migration.step.NameEnum": "CONTRACTS" | "DEBT" | "NIC" | "ORDERS";
        /** @description Country Migration step orders data */
        "me.migration.step.Orders": {
            /** @description Whether there is pending operations */
            readonly pendingOperations?: boolean;
            /** @description Whether there is pending promotions */
            readonly pendingPromotions?: boolean;
            /** @description Whether there is pending subscriptions */
            readonly pendingSubscriptions?: boolean;
        };
        /**
         * @description Status of the migration step
         * @enum {string}
         */
        "me.migration.step.StatusEnum": "OK" | "PENDING";
        /** @description Partner level of an account */
        "me.partnerLevel.Level": {
            /** @description Level of partner */
            readonly level?: components["schemas"]["me.partnerLevel.LevelTypeEnum"];
            /** @description Contains an MSA certificate */
            readonly msa?: boolean;
            /** @description Level of Support required */
            readonly requirement?: components["schemas"]["me.partnerLevel.RequirementLoSEnum"];
        };
        /**
         * @description Type of level
         * @enum {string}
         */
        "me.partnerLevel.LevelTypeEnum": "advanced" | "none" | "standard" | "strategic";
        /**
         * @description Level of Support required
         * @enum {string}
         */
        "me.partnerLevel.RequirementLoSEnum": "none" | "premium" | "premium-accredited";
        /** @description Available payment method object */
        "me.payment.AvailablePaymentMethod": {
            /** @description Form session ID */
            readonly formSessionId?: string | null;
            /** @description Payment method type icon */
            readonly icon?: components["schemas"]["me.payment.Icon"];
            /** @description Payment method integration type */
            readonly integration?: components["schemas"]["me.payment.IntegrationEnum"];
            /** @description Merchant ID */
            readonly merchantId?: string | null;
            /** @description Indicates if payment method type allows to process oneshot payment */
            readonly oneshot?: boolean;
            /** @description Organization ID */
            readonly organizationId?: string | null;
            /** @description Payment method sub-type */
            readonly paymentSubType?: components["schemas"]["me.payment.AvailableSubTypeEnum"] | null;
            /** @description Payment method type */
            readonly paymentType?: string;
            /** @description Indicates if payment method type is registerable ? */
            readonly registerable?: boolean;
            /** @description Indicates if payment method type allows payment and registration at the same time */
            readonly registerableWithTransaction?: boolean;
        };
        /**
         * @description Payment method available sub-type enum
         * @enum {string}
         */
        "me.payment.AvailableSubTypeEnum": "30_DAYS" | "45_DAYS" | "60_DAYS" | "AMERICAN_EXPRESS" | "AURA" | "CARTE_BANCAIRE" | "CARTE_BLEUE" | "CHORUS" | "DINERS_CLUB" | "DISCOVER" | "JCB" | "MAESTRO" | "MASTERCARD" | "NONE" | "RUPAY" | "VISA";
        /**
         * @description Payment method creation sub-type enum
         * @enum {string}
         */
        "me.payment.CreationSubTypeEnum": "CHORUS" | "NONE";
        /** @description Icon */
        "me.payment.Icon": {
            /** @description Icon in base64 */
            readonly data?: string | null;
            /** @description Icon name */
            readonly name?: string;
            /** @description Icon URL */
            readonly url?: string | null;
        };
        /**
         * @description Register integration type enum
         * @enum {string}
         */
        "me.payment.IntegrationEnum": "BANK_TRANSFER" | "COMPONENT" | "IFRAME_VANTIV" | "IN_CONTEXT" | "NONE" | "POST_FORM" | "REDIRECT";
        /** @description Payment method object */
        "me.payment.PaymentMethod": {
            /** @description Associated billing contact ID */
            readonly billingContactId?: number | null;
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /** @description Indicates if payment method is the default one for this account */
            default?: boolean;
            /** @description Custom customer description */
            description?: string | null;
            /**
             * Format: date-time
             * @description Expiration date
             */
            readonly expirationDate?: string | null;
            /** @description Form session ID */
            readonly formSessionId?: string | null;
            /** @description Payment method type icon */
            readonly icon?: components["schemas"]["me.payment.Icon"];
            /** @description Payment method integration type */
            readonly integration?: components["schemas"]["me.payment.IntegrationEnum"] | null;
            /** @description Payment method public label */
            readonly label?: string | null;
            /**
             * Format: date-time
             * @description Last update date
             */
            readonly lastUpdate?: string;
            /** @description Merchant ID */
            readonly merchantId?: string | null;
            /** @description Indicates if payment method support the oneclick functionality */
            readonly oneclick?: boolean | null;
            /** @description Payment mean ID associated to this payment method */
            readonly paymentMeanId?: number | null;
            /** @description Payment method ID */
            readonly paymentMethodId?: number;
            /** @description Payment method sub-type */
            readonly paymentSubType?: components["schemas"]["me.payment.AvailableSubTypeEnum"] | null;
            /** @description Payment method type */
            readonly paymentType?: string;
            /** @description Payment method status */
            readonly status?: components["schemas"]["me.payment.method.StatusEnum"];
        };
        /** @description Transaction object */
        "me.payment.Transaction": {
            /** @description Transaction amount */
            readonly amount?: components["schemas"]["order.Price"];
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /**
             * Format: date-time
             * @description Last update date
             */
            readonly lastUpdate?: string;
            /** @description Associated payment method ID */
            readonly paymentMethodId?: number;
            /** @description Transaction status */
            readonly status?: components["schemas"]["me.payment.transaction.StatusEnum"];
            /** @description Transaction ID */
            readonly transactionId?: number;
            /** @description Transaction type */
            readonly type?: components["schemas"]["me.payment.transaction.TypeEnum"];
        };
        /** @description Callback URL's to register a new payment method */
        "me.payment.method.CallbackUrl": {
            /** @description URL when customer cancels the action */
            cancel: string;
            /** @description URL when registration encounters an error */
            error: string;
            /** @description URL when registration failed */
            failure: string;
            /** @description URL when payment method is in validation */
            pending: string;
            /** @description URL when payment method registration success */
            success: string;
        };
        /** @description Payment method Challenge */
        "me.payment.method.Challenge": {
            /** @description Challenge */
            challenge: string;
        };
        /** @description Payment method creation payload */
        "me.payment.method.Creation": {
            /** @description Associated billing contact ID */
            billingContactId?: number | null;
            /** @description Callback URL's necessary to register */
            callbackUrl: components["schemas"]["me.payment.method.CallbackUrl"];
            /** @description Indicates if this payment method will be set as the default one */
            default?: boolean;
            /** @description Personalized description */
            description?: string | null;
            /** @description Additional payment information */
            formData?: string | null;
            /** @description Order ID to pay it if it's possible (in oneshot transaction or while registration) */
            orderId?: number | null;
            /** @description Payment sub-type */
            paymentSubType?: components["schemas"]["me.payment.CreationSubTypeEnum"] | null;
            /** @description Payment type */
            paymentType: string;
            /** @description Register this payment method if it's possible (default value is false and will proceed a oneshot transaction) */
            register?: boolean;
        };
        /** @description Add details to one payment method challenge */
        "me.payment.method.Details": {
            /** @description Details data */
            details?: string;
            /** @description Transaction ID */
            transactionId?: number;
        };
        /** @description Payload to finalize payment method registration */
        "me.payment.method.Finalize": {
            /** @description Expiration month */
            expirationMonth?: number | null;
            /** @description Expiration year */
            expirationYear?: number | null;
            /** @description Form session ID */
            formSessionId?: string | null;
            /** @description Registration ID */
            registrationId?: string | null;
        };
        /**
         * @description Payment method status
         * @enum {string}
         */
        "me.payment.method.StatusEnum": "CANCELED" | "CANCELING" | "CREATED" | "CREATING" | "ERROR" | "EXPIRED" | "FAILED" | "MAINTENANCE" | "PAUSED" | "REJECTED" | "REPLACED" | "VALID" | "VALIDATING";
        /** @description Registration response to validate */
        "me.payment.method.Validation": {
            /** @description Form session ID */
            readonly formSessionId?: string | null;
            /** @description Merchant ID */
            readonly merchantId?: string | null;
            /** @description Organization ID */
            readonly organizationId?: string | null;
            /** @description Registered new payment method ID */
            readonly paymentMethodId?: number;
            /** @description Registered new transaction ID */
            readonly transactionId?: number | null;
            /** @description Registration validation URL to redirect */
            readonly url?: string | null;
            /** @description Registration validation type */
            readonly validationType?: components["schemas"]["me.payment.IntegrationEnum"];
        };
        /**
         * @description Transaction status
         * @enum {string}
         */
        "me.payment.transaction.StatusEnum": "CANCELED" | "CANCELING" | "CONFIRMING" | "ERROR" | "EXPIRED" | "FAILED" | "READY" | "SUCCESS";
        /**
         * @description Transaction type
         * @enum {string}
         */
        "me.payment.transaction.TypeEnum": "CREDIT" | "DEBIT";
        /** @description Credit card information */
        "me.paymentMean.BankAccount": {
            readonly bic?: string;
            /** Format: date */
            readonly creationDate?: string;
            /** @description This credit card is the default payment mean? */
            readonly defaultPaymentMean?: boolean;
            /** @description Custom description of this bank account */
            description?: string | null;
            readonly iban?: string;
            /** @description Payment method type icon */
            readonly icon?: components["schemas"]["me.paymentMean.IconData"] | null;
            readonly id?: number;
            /** Format: date */
            readonly mandateSignatureDate?: string | null;
            /** @description Bank account owner's address */
            readonly ownerAddress?: string;
            /** @description Bank account owner's name */
            readonly ownerName?: string;
            /** @description Bank account state */
            readonly state?: components["schemas"]["me.paymentMean.BankAccountStateEnum"];
            readonly uniqueReference?: string;
            readonly validationDocumentLink?: string | null;
        };
        /** @description Missing description */
        "me.paymentMean.BankAccountChallengeCreation": {
            /** @description Payload to answer the challenge */
            challenge: string;
        };
        /** @description Missing description */
        "me.paymentMean.BankAccountCreation": {
            /** @description Bank account BIC */
            bic: string;
            /** @description Custom description of this account */
            description?: string | null;
            /** @description Bank account IBAN */
            iban: string;
            /** @description Bank account owner's address */
            ownerAddress: string;
            /** @description Bank account owner's name */
            ownerName: string;
            /** @description Set as default payment mean once validated */
            setDefault?: boolean | null;
        };
        /**
         * @description State of your bank account
         * @enum {string}
         */
        "me.paymentMean.BankAccountStateEnum": "blockedForIncidents" | "pendingValidation" | "replaced" | "valid";
        /** @description A validation required to add a payment mean bank account */
        "me.paymentMean.BankAccountValidation": {
            readonly id?: number;
            readonly submitUrl?: string | null;
            /** @description URL where redirect for registration process */
            readonly url?: string;
            /** @description Kind of registration validation */
            readonly validationType?: components["schemas"]["me.paymentMean.ValidationTypeEnum"];
        };
        /** @description Credit card information */
        "me.paymentMean.CreditCard": {
            /** @description This credit card is the default payment mean? */
            readonly defaultPaymentMean?: boolean;
            /** @description Custom description of this credit card */
            description?: string | null;
            /** Format: date */
            readonly expirationDate?: string;
            /** @description Payment method type icon */
            readonly icon?: components["schemas"]["me.paymentMean.IconData"] | null;
            readonly id?: number;
            /** @description Credit card BIN */
            readonly number?: string;
            /** @description Credit card state */
            readonly state?: components["schemas"]["me.paymentMean.CreditCardStateEnum"];
            /** @description True if this credit card has been registered with a successful 3DSecure challenge */
            readonly threeDsValidated?: boolean;
            /** @description Kind of credit card */
            readonly type?: string;
        };
        /** @description Missing description */
        "me.paymentMean.CreditCardChallengeCreation": {
            /** @description Payload to answer the challenge */
            challenge: string;
        };
        /** @description Missing description */
        "me.paymentMean.CreditCardCreation": {
            /** @description Custom description of this account */
            description?: string | null;
            /** @description Callback URL where the customer will be redirected to after validation */
            returnUrl?: string | null;
            /** @description Set as default payment mean once validated */
            setDefault?: boolean | null;
        };
        /**
         * @description State of your credit card
         * @enum {string}
         */
        "me.paymentMean.CreditCardStateEnum": "expired" | "tooManyFailures" | "valid";
        /** @description A validation required to add a payment mean credit card */
        "me.paymentMean.CreditCardValidation": {
            readonly id?: number;
            readonly submitUrl?: string | null;
            /** @description URL where redirect for registration process */
            readonly url?: string;
            /** @description Kind of registration validation */
            readonly validationType?: components["schemas"]["me.paymentMean.ValidationTypeEnum"];
        };
        /** @description Deferred account information */
        "me.paymentMean.Deferred": {
            /**
             * Format: date-time
             * @description Creation date of this deferred account
             */
            readonly creationDate?: string;
            /** @description This deferred account is the default payment mean? */
            readonly defaultPaymentMean?: boolean;
            /** @description Custom description of this deferred account */
            description?: string | null;
            /** @description Payment method type icon */
            readonly icon?: components["schemas"]["me.paymentMean.IconData"] | null;
            readonly id?: number;
            /** @description Deferred account type */
            readonly label?: string | null;
            /** @description Deferred account state */
            readonly state?: components["schemas"]["me.paymentMean.DeferredStateEnum"];
        };
        /**
         * @description State of you deferred account
         * @enum {string}
         */
        "me.paymentMean.DeferredStateEnum": "failed" | "valid";
        /** @description Payment mean type icon */
        "me.paymentMean.IconData": {
            /** @description Icon in base64 */
            readonly data?: string | null;
            /** @description Icon name */
            readonly name?: string | null;
            /** @description Icon URL */
            readonly url?: string | null;
        };
        /** @description Paypal information */
        "me.paymentMean.Paypal": {
            /** @description Paypal agreement */
            readonly agreementId?: string;
            /**
             * Format: date-time
             * @description Paypal creation date
             */
            readonly creationDate?: string;
            /** @description This paypal is the default payment mean? */
            readonly defaultPaymentMean?: boolean;
            /** @description Custom description of this paypal */
            description?: string | null;
            /** @description Paypal associated email */
            readonly email?: string;
            /** @description Payment method type icon */
            readonly icon?: components["schemas"]["me.paymentMean.IconData"] | null;
            readonly id?: number;
            /** @description Paypal state */
            readonly state?: components["schemas"]["me.paymentMean.PaypalStateEnum"];
        };
        /** @description Missing description */
        "me.paymentMean.PaypalChallengeCreation": {
            /** @description Payload to answer the challenge */
            challenge: string;
        };
        /** @description Missing description */
        "me.paymentMean.PaypalCreation": {
            /** @description Custom description of this account */
            description?: string | null;
            /** @description Callback URL where the customer will be redirected to after validation */
            returnUrl?: string | null;
            /** @description Set as default payment mean once validated */
            setDefault?: boolean | null;
        };
        /**
         * @description State of you paypal
         * @enum {string}
         */
        "me.paymentMean.PaypalStateEnum": "failing" | "tooManyFailures" | "valid";
        /** @description A validation required to add a payment mean paypal */
        "me.paymentMean.PaypalValidation": {
            readonly id?: number;
            readonly submitUrl?: string | null;
            /** @description URL where redirect for registration process */
            readonly url?: string;
            /** @description Kind of registration validation */
            readonly validationType?: components["schemas"]["me.paymentMean.ValidationTypeEnum"];
        };
        /**
         * @description All the validation you may have to do
         * @enum {string}
         */
        "me.paymentMean.ValidationTypeEnum": "creditAccount" | "documentToSend" | "simpleValidation";
        /** @description Description of a service being repricing */
        "me.repricing.Service": {
            /** @description Addons of the Service */
            readonly addons?: components["schemas"]["me.repricing.Service"][];
            /**
             * Format: date
             * @description Date of application of the repricing
             */
            readonly applicationDate?: string;
            /** @description Description of the Service */
            readonly description?: string;
            /** @description Custom name for the Service */
            readonly displayName?: string;
            /** @description Duration for the price described in the payload (ISO8601) */
            readonly duration?: string;
            /** @description Price after repricing, tax included */
            readonly priceAfterWithTax?: components["schemas"]["order.Price"];
            /** @description Price after repricing, tax excluded */
            readonly priceAfterWithoutTax?: components["schemas"]["order.Price"];
            /** @description Price before repricing, tax included */
            readonly priceBeforeWithTax?: components["schemas"]["order.Price"];
            /** @description Price before repricing, tax excluded */
            readonly priceBeforeWithoutTax?: components["schemas"]["order.Price"];
            /** @description Route */
            readonly route?: components["schemas"]["services.expanded.Route"] | null;
            /** @description Service ID */
            readonly serviceId?: number;
            /** @description Identifier of the service */
            readonly serviceName?: string;
            /** @description Total price (addons included) after repricing, tax included */
            readonly totalPriceAfterWithTax?: components["schemas"]["order.Price"];
            /** @description Total price (addons included) after repricing, tax excluded */
            readonly totalPriceAfterWithoutTax?: components["schemas"]["order.Price"];
            /** @description Total price (addons included) before repricing, tax included */
            readonly totalPriceBeforeWithTax?: components["schemas"]["order.Price"];
            /** @description Total price (addons included) before repricing, tax excluded */
            readonly totalPriceBeforeWithoutTax?: components["schemas"]["order.Price"];
        };
        /** @description Available tag configuration object for creation */
        "me.tag.AvailableTag": {
            /** @description Tag configuration keys */
            readonly keys?: components["schemas"]["me.tag.TagKey"][];
            /** @description Tag name */
            readonly name?: string;
        };
        /** @description Tag creation payload */
        "me.tag.Creation": {
            /** @description Reason */
            reason?: string | null;
            /** @description Tag name */
            tagName: string;
        };
        /**
         * @description Tag status
         * @enum {string}
         */
        "me.tag.StatusEnum": "CREATED" | "CREATING" | "DELETED" | "DELETING" | "ERROR" | "MODERATING" | "REFUSED" | "REFUSING" | "REVOCATING" | "WAIT_MODERATION" | "WAIT_REVOCATION";
        /** @description Tag */
        "me.tag.Tag": {
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /** @description Customer code */
            readonly customerCode?: string;
            /**
             * Format: date-time
             * @description Expiration date
             */
            readonly expirationDate?: string | null;
            /** @description Extra data */
            readonly extra?: components["schemas"]["me.tag.TagExtra"] | null;
            /**
             * Format: date-time
             * @description Last update
             */
            readonly lastUpdate?: string;
            /** @description Tag Status */
            readonly status?: components["schemas"]["me.tag.StatusEnum"];
            /** @description Tag name */
            readonly tag?: string;
        };
        /** @description Tag Extra */
        "me.tag.TagExtra": {
            /** @description Tax exemption */
            readonly exemption?: string | null;
        };
        /** @description Tag configuration key */
        "me.tag.TagKey": {
            /** @description Enum values */
            readonly enum?: string[] | null;
            /** @description Tag key name */
            readonly key?: string;
            /** @description Maximum length for a text */
            readonly maxLength?: number | null;
            /** @description Minimum value for a number */
            readonly minValue?: number | null;
            /** @description Tag key optional */
            readonly optional?: boolean;
            /** @description Tag value regex pattern */
            readonly pattern?: string | null;
            /** @description Tag key type */
            readonly type?: components["schemas"]["me.tag.tagKey.TypeEnum"];
        };
        /**
         * @description Tag key type
         * @enum {string}
         */
        "me.tag.tagKey.TypeEnum": "ARRAY" | "DATE" | "ENUM" | "INTEGER" | "TEXT" | "VARCHAR";
        /** @description Internal customer billing capacities for customer control panel */
        "nichandle.BillingCapacities": {
            /** @description Indicates if the debt system has been enabled on the customer account */
            canUseDebtSystem?: boolean;
            /** @description Indicates customer's ability to use postal mailing for invoices */
            canUsePostalMailForInvoices?: boolean;
            /** @description Indicates the mandatory nature of having a valid payment method */
            requiredPaymentMethod?: components["schemas"]["nichandle.RequiredPaymentMethodEnum"];
        };
        /**
         * @description Countries a nichandle can choose
         * @enum {string}
         */
        "nichandle.CountryEnum": "AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BW" | "BY" | "BZ" | "CA" | "CC" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CX" | "CY" | "CZ" | "DE" | "DG" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EA" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "IC" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "UM" | "UNKNOWN" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW";
        /** @description Customer currency */
        "nichandle.Currency": {
            /** @description Currency code */
            code?: string;
            /** @description Currency symbol */
            symbol?: string;
        };
        /** @description Login restrictions on a development version of the Manager */
        "nichandle.DeveloperModeRestriction": {
            /** @description Allow login on your account on a development version of the Manager */
            enabled?: boolean;
        };
        /** @description Domain operation argument */
        "nichandle.DomainTaskArgument": {
            /** @description List of accepted formats */
            readonly acceptedFormats?: components["schemas"]["domain.DocumentFormatsEnum"][] | null;
            /** @description List of accepted values */
            readonly acceptedValues?: string[] | null;
            /** @description Description of the argument */
            readonly description?: string | null;
            /** @description List of impacted field names */
            readonly fields?: components["schemas"]["xander.ContactFieldEnum"][] | null;
            /** @description Key of the argument */
            readonly key?: string;
            /** @description Maximum of the content length that you can send */
            readonly maximumSize?: number | null;
            /** @description Minimum of the content length that you can send */
            readonly minimumSize?: number | null;
            /** @description True if the argument is in read only */
            readonly readOnly?: boolean;
            /** @description Template of the content */
            readonly template?: string | null;
            /** @description Type of the argument */
            readonly type?: string;
            /** @description Value of the argument */
            value?: string | null;
        };
        /** @description Domain operation progress */
        "nichandle.DomainTaskProgressBar": {
            /** @description Current step of the operation */
            readonly currentStep?: components["schemas"]["domain.OperationStep"];
            /**
             * Format: date-time
             * @description The estimated end date of the task
             */
            readonly expectedDoneDate?: string | null;
            /** @description All the steps of the operation */
            readonly followUpSteps?: components["schemas"]["domain.OperationStep"][] | null;
            /**
             * Format: date-time
             * @description The last update date of the task
             */
            readonly lastUpdateDate?: string | null;
            /** @description Progress percentage of the task */
            readonly progress?: number;
            /** @description Action possible on task */
            readonly taskActions?: components["schemas"]["domain.OperationActionEnum"][];
            /** @description The status of the task */
            readonly taskStatus?: components["schemas"]["domain.OperationStatusEnum"];
        };
        /** @description Email notification received */
        "nichandle.EmailNotification": {
            /** @description Content of the email */
            readonly body?: string;
            /**
             * Format: date-time
             * @description Date at which the email was sent
             */
            readonly date?: string;
            /** @description ID of the email notification */
            readonly id?: number;
            /** @description Subject of the email */
            readonly subject?: string;
        };
        /**
         * @description All genders a person can choose
         * @enum {string}
         */
        "nichandle.GenderEnum": "female" | "male";
        /**
         * @description Ip registries
         * @enum {string}
         */
        "nichandle.IpRegistryEnum": "ARIN" | "RIPE";
        /** @description List of all IP Restrictions */
        "nichandle.IpRestriction": {
            /** @description The Id of the restriction */
            readonly id?: number;
            /** @description An IP range where we will apply the rule */
            readonly ip?: components["schemas"]["ipBlock"];
            /** @description Accept or deny IP access */
            rule?: components["schemas"]["nichandle.accessRestriction.IpRestrictionRuleEnum"];
            /** @description Send an email if someone try to access with this IP address */
            warning?: boolean;
        };
        /** @description IP Restriction default rule */
        "nichandle.IpRestrictionDefaultRule": {
            /** @description Accept or deny access */
            rule?: components["schemas"]["nichandle.accessRestriction.IpRestrictionRuleEnum"];
            /** @description Send an email if someone try to access */
            warning?: boolean;
        };
        /** @description Details about an IP block organisation */
        "nichandle.Ipv4Org": {
            abuse_mailbox?: string;
            address?: string;
            city?: string;
            country?: components["schemas"]["nichandle.CountryEnum"];
            firstname?: string;
            lastname?: string;
            readonly organisationId?: string;
            phone?: components["schemas"]["phoneNumber"];
            readonly registry?: components["schemas"]["nichandle.IpRegistryEnum"];
            state?: string | null;
            zip?: string | null;
        };
        /**
         * @description Languages a nichandle can choose
         * @enum {string}
         */
        "nichandle.LanguageEnum": "cs_CZ" | "de_DE" | "en_AU" | "en_CA" | "en_GB" | "en_IE" | "en_US" | "es_ES" | "fi_FI" | "fr_CA" | "fr_FR" | "fr_MA" | "fr_SN" | "fr_TN" | "it_IT" | "lt_LT" | "nl_NL" | "pl_PL" | "pt_PT";
        /**
         * @description Legal forms a nichandle can be registered as
         * @enum {string}
         */
        "nichandle.LegalFormEnum": "administration" | "association" | "corporation" | "individual" | "other" | "personalcorporation";
        /** @description Manager preference */
        "nichandle.ManagerPreference": {
            /** @description This preference key */
            readonly key?: string;
            /** @description This preference value */
            value?: string;
        };
        /** @description Auto renewal information */
        "nichandle.NicAutorenewInfos": {
            /** @description Renewal active or not */
            active?: boolean;
            /**
             * Format: date-time
             * @description give the last renew
             */
            readonly lastRenew?: string | null;
            /** @description give the renewal day */
            renewDay?: number;
        };
        /** @description Details about your OVH identifier */
        "nichandle.Nichandle": {
            /** @description Address of nichandle */
            address?: string | null;
            /** @description Area of nichandle */
            area?: string | null;
            /** @description City of birth */
            birthCity?: string | null;
            /** @description Birth date */
            birthDay?: string | null;
            /** @description City of nichandle */
            city?: string | null;
            /** @description Company National Identification Number */
            companyNationalIdentificationNumber?: string | null;
            /** @description Complementary Address */
            complementaryAddress?: string | null;
            /** @description Corporation type */
            corporationType?: string | null;
            /** @description Customer country */
            country?: components["schemas"]["nichandle.CountryEnum"];
            /** @description Customer currency */
            readonly currency?: components["schemas"]["nichandle.Currency"];
            /** @description Your customer code (a numerical value used for identification when contacting support via phone call) */
            readonly customerCode?: string | null;
            /** @description Email address */
            readonly email?: string;
            /** @description Fax number */
            fax?: string | null;
            /** @description First name */
            firstname?: string | null;
            /** @description Italian SDI */
            italianSDI?: string | null;
            /** @description KYC validation state */
            readonly kycValidated?: boolean | null;
            /** @description Language */
            language?: components["schemas"]["nichandle.LanguageEnum"] | null;
            /** @description Customer legal form */
            legalform?: components["schemas"]["nichandle.LegalFormEnum"];
            /** @description Customer name */
            name?: string | null;
            /** @description National Identification Number */
            nationalIdentificationNumber?: string | null;
            /** @description Customer identifier */
            readonly nichandle?: string;
            /** @description Name of organisation */
            organisation?: string | null;
            /** @description OVH company */
            readonly ovhCompany?: components["schemas"]["nichandle.OvhCompanyEnum"];
            /** @description OVH subsidiary */
            readonly ovhSubsidiary?: components["schemas"]["nichandle.OvhSubsidiaryEnum"];
            /** @description Phone number */
            phone?: string | null;
            phoneCountry?: components["schemas"]["nichandle.CountryEnum"] | null;
            /** @description Type of phone(mobile, landline) */
            phoneType?: components["schemas"]["nichandle.PhoneTypeEnum"] | null;
            /** @description Customer purpose of purchase */
            purposeOfPurchase?: string | null;
            /** @description Gender */
            sex?: components["schemas"]["nichandle.GenderEnum"] | null;
            /** @description Spare email */
            spareEmail?: string | null;
            /** @description Nichandle state */
            readonly state?: components["schemas"]["nichandle.StateEnum"];
            /** @description VAT number */
            vat?: string | null;
            /** @description Zipcode */
            zip?: string | null;
        };
        /** @description SMS notifications */
        "nichandle.NichandleSmsNotification": {
            /** @description Receive notification for abuse reports */
            readonly abuse?: boolean;
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /** @description The phone number you want to receive notification on */
            readonly phoneNumber?: string;
            /** @description Status of your notification */
            readonly status?: components["schemas"]["nichandle.NotificationStatusEnum"];
            /**
             * Format: date-time
             * @description Last update date
             */
            readonly updateDate?: string | null;
        };
        /**
         * @description Status of your notification
         * @enum {string}
         */
        "nichandle.NotificationStatusEnum": "ok" | "waitingForValidation";
        /**
         * @description OVH companies
         * @enum {string}
         */
        "nichandle.OvhCompanyEnum": "kimsufi" | "ovh" | "soyoustart";
        /**
         * @description All phone type a person can choose
         * @enum {string}
         */
        "nichandle.PhoneTypeEnum": "landline" | "mobile";
        /**
         * @description Indicates the mandatory nature of having a valid payment method
         * @enum {string}
         */
        "nichandle.RequiredPaymentMethodEnum": "mandatoryForAutorenew" | "mandatoryForPostpaid" | "notMandatory";
        /**
         * @description States a nichandle can be in
         * @enum {string}
         */
        "nichandle.StateEnum": "complete" | "incomplete";
        /** @description Sub Account */
        "nichandle.SubAccount": {
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /** @description This sub-account description */
            description?: string | null;
            /** @description This sub-account id */
            readonly id?: number;
        };
        /** @description Credentials to interact with the api on behalf of the sub-account */
        "nichandle.SubAccountConsumerKey": {
            /** @description The consumer key */
            consumerKey?: string;
        };
        /** @description List of all OVH things you can subscribe to */
        "nichandle.Subscription": {
            /** @description Determine whether you are registered or not */
            registered?: boolean | null;
            /** @description The type of subscription */
            readonly type?: string;
        };
        /** @description VIP Status by Universe */
        "nichandle.VipStatus": {
            /** @description Is account VIP for Cloud Universe */
            cloud?: boolean;
            /** @description Is account VIP for Dedicated Universe */
            dedicated?: boolean;
            /** @description Is account VIP for Telecom Universe */
            telecom?: boolean;
            /** @description Is account VIP for Web Universe */
            web?: boolean;
        };
        /** @description Voucher Status and Information */
        "nichandle.VoucherStatus": {
            /** @description Is voucher valid */
            validity?: boolean;
        };
        /**
         * @description Accept or deny IP access
         * @enum {string}
         */
        "nichandle.accessRestriction.IpRestrictionRuleEnum": "accept" | "deny";
        /** @description SOTP Two-Factor Authentication */
        "nichandle.accessRestriction.SOTPAccount": {
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /**
             * Format: date-time
             * @description Last used date
             */
            readonly lastUsedDate?: string | null;
            /** @description Number of remaining codes */
            readonly remaining?: number;
            /** @description Status of this account */
            readonly status?: components["schemas"]["nichandle.accessRestriction.SOTPStatusEnum"];
        };
        /** @description Describe SOTP secret keys */
        "nichandle.accessRestriction.SOTPSecret": {
            codes?: string[];
        };
        /**
         * @description Status of SOTP account
         * @enum {string}
         */
        "nichandle.accessRestriction.SOTPStatusEnum": "disabled" | "enabled" | "needCodeValidation" | "needEmailValidation";
        /** @description Describe SOTP validation status */
        "nichandle.accessRestriction.SOTPValidate": {
            remainingCodes?: number;
        };
        /** @description Sms Two-Factor Authentication */
        "nichandle.accessRestriction.SmsAccount": {
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /** @description Description of this phone */
            description?: string;
            /** @description The Id of the restriction */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Last used date
             */
            readonly lastUsedDate?: string | null;
            /** @description Associated phone number */
            readonly phoneNumber?: string;
            /** @description Status of this account */
            readonly status?: components["schemas"]["nichandle.accessRestriction.SmsStatusEnum"];
        };
        /** @description Send secret code */
        "nichandle.accessRestriction.SmsCode": {
            challenge?: string;
        };
        /** @description Describe secret key */
        "nichandle.accessRestriction.SmsSecret": {
            id?: number;
            remainingTry?: number;
        };
        /**
         * @description Status of the Sms account
         * @enum {string}
         */
        "nichandle.accessRestriction.SmsStatusEnum": "disabled" | "enabled" | "needCodeValidation" | "needEmailValidation";
        /** @description TOTP Two-Factor Authentication */
        "nichandle.accessRestriction.TOTPAccount": {
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /** @description Description of this TOTP */
            description?: string;
            /** @description The Id of the restriction */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Last used date
             */
            readonly lastUsedDate?: string | null;
            /** @description Status of this account */
            readonly status?: components["schemas"]["nichandle.accessRestriction.TOTPStatusEnum"];
        };
        /** @description Describe TOTP secret keys */
        "nichandle.accessRestriction.TOTPSecret": {
            id?: number;
            /** Format: password */
            qrcodeHelper?: string;
            /** Format: password */
            secret?: string;
        };
        /**
         * @description Status of TOTP account
         * @enum {string}
         */
        "nichandle.accessRestriction.TOTPStatusEnum": "disabled" | "enabled" | "needCodeValidation" | "needEmailValidation";
        /** @description U2F Two-Factor Authentication */
        "nichandle.accessRestriction.U2FAccount": {
            /**
             * Format: date-time
             * @description Creation date
             */
            readonly creationDate?: string;
            /** @description Description of this U2F key */
            description?: string;
            /** @description The Id of the restriction */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Last used date
             */
            readonly lastUsedDate?: string | null;
            /** @description Status of this account */
            readonly status?: components["schemas"]["nichandle.accessRestriction.U2FStatusEnum"];
        };
        /** @description U2F Register Request */
        "nichandle.accessRestriction.U2FRegisterChallenge": {
            challenge?: string;
            id?: number;
            rpId?: string;
            rpName?: string;
            userDisplayName?: string;
            userId?: string;
            userName?: string;
        };
        /**
         * @description Status of U2F account
         * @enum {string}
         */
        "nichandle.accessRestriction.U2FStatusEnum": "disabled" | "enabled" | "needCodeValidation";
        /**
         * @description Allowed types of contact who can be changed by change contact task
         * @enum {string}
         */
        "nichandle.changeContact.ContactTypeEnum": "contactAdmin" | "contactBilling" | "contactTech";
        /**
         * @description State of contact change task
         * @enum {string}
         */
        "nichandle.changeContact.TaskStateEnum": "aborted" | "checkValidity" | "doing" | "done" | "error" | "expired" | "refused" | "todo" | "validatingByCustomers";
        /**
         * @description State of email change task
         * @enum {string}
         */
        "nichandle.changeEmail.TaskStateEnum": "aborted" | "done" | "refused" | "todo";
        /** @description Task running a contact change on a service */
        "nichandle.contactChange.Task": {
            /** @description Account who asked the contact change */
            readonly askingAccount?: string | null;
            /** @description Contacts to be changed */
            readonly contactTypes?: components["schemas"]["nichandle.changeContact.ContactTypeEnum"][];
            /**
             * Format: date-time
             * @description Date at which the contact change has been finished
             */
            readonly dateDone?: string | null;
            /**
             * Format: date-time
             * @description Date at which the request has been made
             */
            readonly dateRequest?: string;
            /** @description Account to change contact from */
            readonly fromAccount?: string;
            readonly id?: number;
            /** @description The service on which the task runs */
            readonly serviceDomain?: string | null;
            /** @description Current state of the request */
            readonly state?: components["schemas"]["nichandle.changeContact.TaskStateEnum"];
            /** @description Account to change contact to */
            readonly toAccount?: string;
        };
        /** @description List of documents added on your account */
        "nichandle.document.Document": {
            /**
             * Format: date-time
             * @description Document creation
             */
            readonly creationDate?: string;
            /**
             * Format: date-time
             * @description Document expiration
             */
            expirationDate?: string | null;
            /** @description URL used to get document */
            readonly getUrl?: string;
            /**
             * Format: uuid
             * @description Document id
             */
            readonly id?: string;
            /** @description Document name */
            readonly name?: string;
            /** @description URL used to put document */
            readonly putUrl?: string;
            /** @description Document size (in bytes) */
            readonly size?: number;
            /** @description Document tags */
            readonly tags?: components["schemas"]["complexType.SafeKeyValue_string"][];
            /**
             * Format: date-time
             * @description Document validation
             */
            readonly validationDate?: string | null;
        };
        /** @description Task running an email change on an account */
        "nichandle.emailChange.Task": {
            /**
             * Format: date-time
             * @description End date of that request
             */
            readonly dateDone?: string | null;
            /**
             * Format: date-time
             * @description Creation date of that request
             */
            readonly dateRequest?: string;
            readonly id?: number;
            /** @description The email address to change for */
            readonly newEmail?: string;
            /** @description Current state of the request */
            readonly state?: components["schemas"]["nichandle.changeEmail.TaskStateEnum"];
        };
        /** @description Email notification */
        "nichandle.emailNotification": {
            /** @description This email body */
            readonly body?: string;
            /**
             * Format: date-time
             * @description This email date
             */
            readonly date?: string;
            /** @description This email Id */
            readonly id?: number;
            /** @description This email subject */
            readonly subject?: string;
        };
        /** @description Customer IPXE scripts */
        "nichandle.ipxe": {
            /** @description Name of this script */
            readonly name?: string;
            /** @description Content of your IPXE script */
            readonly script?: string;
        };
        /** @description Customer public SSH key, can be used for rescue netboot or server access after reinstallation */
        "nichandle.sshKey": {
            /** @description ASCII encoded public SSH key */
            readonly key?: string;
            /** @description Name of this public SSH key */
            readonly keyName?: string;
        };
        /**
         * @description oAuth2 Flow
         * @enum {string}
         */
        "oauth2.ClientFlowEnum": "AUTHORIZATION_CODE" | "CLIENT_CREDENTIALS";
        /** @description An oAuth2 Client */
        "oauth2.client": {
            /** @description allowed callback urls */
            callbackUrls?: string[] | null;
            /** @description client's client_id */
            readonly clientId?: string;
            /**
             * Format: date-time
             * @description client's creation date
             */
            readonly createdAt?: string;
            /** @description client's description */
            description?: string;
            /** @description oAuth2's flow */
            readonly flow?: components["schemas"]["oauth2.ClientFlowEnum"];
            /** @description associated IAM identity */
            readonly identity?: string | null;
            /** @description client's name */
            name?: string;
        };
        /** @description An oAuth2 Client Request */
        "oauth2.clientRequest": {
            /** @description allowed callback urls */
            callbackUrls?: string[];
            /** @description client's description */
            description: string;
            /** @description oAuth2's flow */
            flow: components["schemas"]["oauth2.ClientFlowEnum"];
            /** @description client's name */
            name: string;
        };
        /** @description An oAuth2 Client Secret */
        "oauth2.clientSecret": {
            /** @description client's client_id */
            readonly clientId?: string;
            /**
             * Format: password
             * @description client's client_secret
             */
            readonly clientSecret?: string;
        };
        /** @description A contract */
        "order.Contract": {
            /** @description Terms of the contract */
            readonly content?: string;
            /** @description Name of the contract */
            readonly name?: string;
            /** @description URL to download the contract */
            readonly url?: string;
        };
        /** @description LongPrice with all digits and its currency and a textual representation */
        "order.LongPrice": {
            currencyCode?: components["schemas"]["order.CurrencyCodeEnum"];
            text?: string;
            value?: number;
        };
        /** @description An order */
        "order.Order": {
            /** @description List of contracts related to the order */
            readonly contracts?: components["schemas"]["order.Contract"][];
            /** @description Details of the order */
            readonly details?: components["schemas"]["order.OrderDetail"][];
            /** @description Identifier of the order */
            readonly orderId?: number | null;
            /** @description Prices of the order including with and without taxes */
            readonly prices?: components["schemas"]["order.OrderPrices"];
            /** @description URL to download the order */
            readonly url?: string | null;
        };
        /** @description Detail of an order */
        "order.OrderDetail": {
            /** @description Cart Item ID the details is related to */
            readonly cartItemID?: number | null;
            /** @description Description of the detail */
            readonly description?: string;
            /** @description Type of detail */
            readonly detailType?: components["schemas"]["order.OrderDetailTypeEnum"] | null;
            /** @description Service name */
            readonly domain?: string;
            /** @description Original price of the detail before reduction application */
            readonly originalTotalPrice?: components["schemas"]["order.Price"];
            /** @description Quantity of the service */
            readonly quantity?: number;
            /** @description Total price of the reduction */
            readonly reductionTotalPrice?: components["schemas"]["order.Price"];
            /** @description List of reductions applied to the detail */
            readonly reductions?: components["schemas"]["order.Reduction"][];
            /** @description Price total of the services */
            readonly totalPrice?: components["schemas"]["order.Price"];
            /** @description Unitary price of the service */
            readonly unitPrice?: components["schemas"]["order.Price"];
        };
        /**
         * @description Product type of item in order
         * @enum {string}
         */
        "order.OrderDetailTypeEnum": "ACCESSORY" | "CAUTION" | "CHOOSED" | "CONSUMPTION" | "CREATION" | "DELIVERY" | "DURATION" | "GIFT" | "INSTALLATION" | "LICENSE" | "MUTE" | "OTHER" | "OUTPLAN" | "QUANTITY" | "REFUND" | "RENEW" | "SPECIAL" | "SWITCH" | "TRANSFER" | "VOUCHER";
        /** @description Prices of an order */
        "order.OrderPrices": {
            /** @description Price before reduction application */
            readonly originalWithoutTax?: components["schemas"]["order.Price"] | null;
            /** @description Price concerning the reduced amount */
            readonly reduction?: components["schemas"]["order.Price"] | null;
            /** @description Tax amount */
            readonly tax?: components["schemas"]["order.Price"];
            /** @description Price with tax */
            readonly withTax?: components["schemas"]["order.Price"];
            /** @description Price without tax */
            readonly withoutTax?: components["schemas"]["order.Price"];
        };
        /** @description Order detail reduction */
        "order.Reduction": {
            /** @description In which context the reduction is applied */
            readonly context?: components["schemas"]["order.ReductionContextEnum"];
            /** @description Promotion description */
            readonly description?: string;
            /** @description Reduction price applied with this promotion */
            readonly price?: components["schemas"]["order.Price"];
            /** @description Reduction description */
            readonly reductionDescription?: string;
            /** @description Reduction effect, price modification */
            readonly type?: components["schemas"]["order.ReductionTypeEnum"];
            /** @description The reduction value */
            readonly value?: components["schemas"]["order.Price"];
        };
        /**
         * @description Context of the reduction
         * @enum {string}
         */
        "order.ReductionContextEnum": "promotion" | "voucher";
        /**
         * @description Type of reduction
         * @enum {string}
         */
        "order.ReductionTypeEnum": "fixed_amount" | "forced_amount" | "percentage";
        /** @description Representation of a generic product */
        "order.cart.GenericProductDefinition": {
            /** @description Product offer identifier */
            readonly planCode?: string;
            /** @description Prices of the product offer */
            readonly prices?: components["schemas"]["order.cart.GenericProductPricing"][];
            /** @description Name of the product */
            readonly productName?: string;
            /** @description Product type */
            readonly productType?: components["schemas"]["order.cart.GenericProductTypeEnum"];
        };
        /** @description Representation of a product pricing */
        "order.cart.GenericProductPricing": {
            /** @description Capacities of the pricing (type of pricing) */
            readonly capacities?: components["schemas"]["order.cart.GenericProductPricingCapacitiesEnum"][];
            /** @description Description of the pricing */
            readonly description?: string;
            /**
             * Format: duration
             * @description Duration for ordering the product
             */
            readonly duration?: string;
            /** @description Interval of renewal */
            readonly interval?: number;
            /** @description Maximum quantity that can be ordered */
            readonly maximumQuantity?: number | null;
            /** @description Maximum repeat for renewal */
            readonly maximumRepeat?: number | null;
            /** @description Minimum quantity that can be ordered */
            readonly minimumQuantity?: number;
            /** @description Minimum repeat for renewal */
            readonly minimumRepeat?: number;
            /** @description Price of the product */
            readonly price?: components["schemas"]["order.Price"];
            /** @description Price of the product in micro-centims */
            readonly priceInUcents?: number;
            /** @description Pricing model identifier */
            readonly pricingMode?: string;
            /** @description Pricing type */
            readonly pricingType?: components["schemas"]["order.cart.GenericProductPricingTypeEnum"];
        };
        /**
         * @description Capacity of a pricing (type)
         * @enum {string}
         */
        "order.cart.GenericProductPricingCapacitiesEnum": "consumption" | "detach" | "downgrade" | "dynamic" | "installation" | "renew" | "upgrade";
        /**
         * @description Type of a pricing
         * @enum {string}
         */
        "order.cart.GenericProductPricingTypeEnum": "consumption" | "purchase" | "rental";
        /**
         * @description Type of a product
         * @enum {string}
         */
        "order.cart.GenericProductTypeEnum": "cloud_service" | "delivery" | "deposit" | "domain" | "implementation_services" | "saas_license" | "shipping" | "storage";
        /** @description Available payment methods */
        "payment.method.AvailablePaymentMethod": {
            /** @description Payment method session identifier */
            formSessionId?: string | null;
            /** @description Payment method type icon */
            icon?: components["schemas"]["payment.method.Icon"];
            /** @description Graphical payment integration to use */
            integration?: components["schemas"]["payment.method.IntegrationType"];
            /** @description Payment method merchant identifier */
            merchantId?: string | null;
            /** @description Payment method type is possible to pay in oneshot mode ? */
            oneshot?: boolean;
            /** @description Payment method organization identifier */
            organizationId?: string | null;
            /** @description Payment method subtype */
            paymentSubType?: string | null;
            /** @description Payment method type */
            paymentType?: string;
            /** @description Payment method type is registerable ? */
            registerable?: boolean;
            /** @description Payment method type is registerable with the possibility to pay in same time an order ? */
            registerableWithTransaction?: boolean;
        };
        /** @description Payment icon */
        "payment.method.Icon": {
            /** @description Icon data in base64 */
            data?: string | null;
            /** @description Icon name */
            name?: string | null;
            /** @description Icon URL */
            url?: string | null;
        };
        /**
         * @description Payment method integration type
         * @enum {string}
         */
        "payment.method.IntegrationType": "BANK_TRANSFER" | "COMPONENT" | "DONE" | "IFRAME_VANTIV" | "IN_CONTEXT" | "NONE" | "POST_FORM" | "REDIRECT";
        /** @description payment method */
        "payment.method.PaymentMethod": {
            /** @description Associated billing contact ID */
            billingContactId?: number | null;
            /**
             * Format: date-time
             * @description Creation date
             */
            creationDate?: string;
            /** @description Indicates if payment method is the default one for this account */
            default?: boolean;
            /** @description Custom customer description */
            description?: string | null;
            /**
             * Format: date-time
             * @description Expiration date
             */
            expirationDate?: string | null;
            /** @description Form session ID */
            formSessionId?: string | null;
            /** @description Payment method type icon */
            icon?: components["schemas"]["payment.method.Icon"];
            /** @description Payment method integration type */
            integration?: components["schemas"]["payment.method.IntegrationType"] | null;
            /** @description Payment method public label */
            label?: string | null;
            /**
             * Format: date-time
             * @description Last update date
             */
            lastUpdate?: string | null;
            /** @description Merchant ID */
            merchantId?: string | null;
            /** @description Indicates if payment method support the oneclick functionality */
            oneclick?: boolean | null;
            /** @description Payment mean ID associated to this payment method */
            paymentMeanId?: number | null;
            /** @description Payment method ID */
            paymentMethodId?: number;
            /** @description Payment method sub type */
            paymentSubType?: components["schemas"]["payment.method.SubTypeEnum"] | null;
            /** @description Payment method type */
            paymentType?: string;
            /** @description Payment method status */
            status?: components["schemas"]["payment.method.StatusEnum"];
        };
        /**
         * @description Payment method status
         * @enum {string}
         */
        "payment.method.StatusEnum": "CANCELED" | "CANCELING" | "CREATED" | "CREATING" | "ERROR" | "EXPIRED" | "FAILED" | "MAINTENANCE" | "PAUSED" | "REJECTED" | "REPLACED" | "VALID" | "VALIDATING";
        /**
         * @description Payment method sub-type
         * @enum {string}
         */
        "payment.method.SubTypeEnum": "30_DAYS" | "45_DAYS" | "60_DAYS" | "AMERICAN_EXPRESS" | "AURA" | "CARTE_BANCAIRE" | "CARTE_BLEUE" | "CHORUS" | "DINERS_CLUB" | "DISCOVER" | "JCB" | "MAESTRO" | "MASTERCARD" | "NONE" | "RUPAY" | "VISA";
        /** @description Recommendation struct */
        "recommendations.Recommendation": {
            readonly advices?: components["schemas"]["recommendations.RecommendationAdvice"][];
            /** @description Recommendation advices introduction and description sentences, indexed by supported locales */
            readonly localizedDescription?: {
                [key: string]: string | undefined;
            };
            /** @description Recommendation rank */
            readonly rank?: number;
        };
        /** @description Recommendation advice struct */
        "recommendations.RecommendationAdvice": {
            /** @description Product identifier, usually range>line>category>subCategory>marketingName */
            readonly id?: string;
            /** @description Recommendation score */
            readonly score?: number;
            /** @description Product page url */
            readonly url?: string;
        };
        /** @description Array of Recommendation objects */
        "recommendations.Recommendations": {
            readonly recommendations?: components["schemas"]["recommendations.Recommendation"][];
        };
        /**
         * @description Recommendations product ranges
         * @enum {string}
         */
        "recommendations.productRangesEnum": "baremetal" | "domain" | "public_cloud" | "saas" | "vps" | "web";
        /** @description Route of the service */
        "services.expanded.Route": {
            /** @description Path to use in API */
            readonly path?: string | null;
            /** @description Path with variables applied */
            readonly url?: string | null;
            /** @description Variables to use in the path */
            readonly vars?: components["schemas"]["complexType.SafeKeyValue_string"][];
        };
        /** @description Billing policies settings */
        "telephony.BillingSettings": {
            /** @description Renew is done by billing contact instead of billing account */
            renewByBillingContact?: boolean;
        };
        /** @description Default IP restriction of a VoIP line */
        "telephony.DefaultIpRestriction": {
            readonly id?: number;
            /** @description The IPv4 subnet you want to allow */
            readonly subnet?: components["schemas"]["ipv4Block"];
            /** @description The protocol you want to restrict (sip/mgcp) */
            readonly type?: components["schemas"]["telephony.ProtocolEnum"];
        };
        /** @description Line description policies settings */
        "telephony.LineDescriptionSettings": {
            /** @description Line's description is displayed on bills */
            displayOnBill?: boolean;
            /** @description Line's description is displayed on incoming calls */
            displayOnIncomingCall?: boolean;
        };
        /** @description Custom domains of your fax services */
        "telephony.MailDomain2Service": {
            /** @description The custom domain of your fax services */
            readonly domain?: string;
            readonly id?: number;
        };
        /**
         * @description Phone protocol
         * @enum {string}
         */
        "telephony.ProtocolEnum": "mgcp" | "sip";
        /** @description Telephony settings linked to the customer account */
        "telephony.Settings": {
            /** @description Billing policies settings */
            billingPolicies?: components["schemas"]["telephony.BillingSettings"];
            /** @description Line description policies settings */
            lineDescriptionPolicies?: components["schemas"]["telephony.LineDescriptionSettings"];
        };
        /**
         * @description Available contact fields
         * @enum {string}
         */
        "xander.ContactFieldEnum": "address.city" | "address.country" | "address.line1" | "address.line2" | "address.line3" | "address.otherDetails" | "address.province" | "address.zip" | "birthCity" | "birthCountry" | "birthDay" | "birthZip" | "cellPhone" | "companyNationalIdentificationNumber" | "email" | "fax" | "firstName" | "gender" | "language" | "lastName" | "legalForm" | "nationalIdentificationNumber" | "nationality" | "organisationName" | "organisationType" | "phone" | "spareEmail" | "vat";
        /** @description Xdsl Settings */
        "xdsl.Setting": {
            /** @description Send the modem as soon as possible, do not wait the xdsl line to be active */
            resellerFastModemShipping?: boolean;
            /** @description Let the modem with vendor configuration. It prevent to apply the config managed by ovh manager */
            resellerModemBasicConfig?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listLoadBalancers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service name */
                serviceName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Error 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 403 response */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    createLoadBalancer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service name */
                serviceName: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cloud.project.LoadBalancerCreation"];
            };
        };
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["cloud.project.LoadBalancer"];
                };
            };
            /** @description Error 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 403 response */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    getLoadBalancer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Load balancer ID */
                loadBalancerId: string;
                /** @description Service name */
                serviceName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["cloud.project.LoadBalancer"];
                };
            };
            /** @description Error 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 403 response */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    updateLoadBalancer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Load balancer ID */
                loadBalancerId: string;
                /** @description Service name */
                serviceName: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cloud.project.LoadBalancer"];
            };
        };
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["cloud.project.LoadBalancer"];
                };
            };
            /** @description Error 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 403 response */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteLoadBalancer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Load balancer ID */
                loadBalancerId: string;
                /** @description Service name */
                serviceName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listLoadBalancerConfigurations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Load balancer ID */
                loadBalancerId: string;
                /** @description Service name */
                serviceName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number[];
                };
            };
            /** @description Error 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 403 response */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    createLoadBalancerConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Load balancer ID */
                loadBalancerId: string;
                /** @description Service name */
                serviceName: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cloud.project.loadbalancer.ConfigurationCreation"];
            };
        };
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["cloud.project.loadbalancer.Configuration"];
                };
            };
            /** @description Error 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 403 response */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    getLoadBalancerConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Load balancer ID */
                loadBalancerId: string;
                /** @description Service name */
                serviceName: string;
                /** @description Version */
                version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["cloud.project.loadbalancer.Configuration"];
                };
            };
            /** @description Error 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 403 response */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    deleteLoadBalancerConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Load balancer ID */
                loadBalancerId: string;
                /** @description Service name */
                serviceName: string;
                /** @description Version */
                version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    applyLoadBalancerConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Load balancer ID */
                loadBalancerId: string;
                /** @description Service name */
                serviceName: string;
                /** @description Version */
                version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["cloud.project.loadbalancer.Configuration"];
                };
            };
            /** @description Error 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 403 response */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
            /** @description Error 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Class of the error */
                        class?: string;
                        /** @description Error message */
                        message?: string;
                    };
                };
            };
        };
    };
    getCertificates: {
        parameters: {
            query?: {
                /** @description Certificate definition name */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
}
